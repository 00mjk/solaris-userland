PASS: stack-limit-calibration.scm
=============
1 test passed
=============
PASS: test-system-cmds
PASS: test-require-extension
PASS: test-bad-identifiers
PASS: test-num2integral
PASS: test-round
PASS: test-gh
PASS: test-asmobs
PASS: test-list
PASS: test-unwind
PASS: test-conversion
PASS: test-fast-slot-ref
PASS: test-use-srfi
PASS: test-scm-c-read
PASS: test-scm-take-locale-symbol
PASS: test-with-guile-module
PASS: test-scm-with-guile
===================
All 16 tests passed
===================
Running alist.test
Running and-let-star.test
Running arbiters.test
Running bit-operations.test
FAIL: bit-operations.test: bit-extract: documented?
Running c-api.test
Running chars.test
Running common-list.test
Running continuations.test
Running elisp.test
Running environments.test
FAIL: environments.test: leaf-environments: leaf-environment?: documented?
FAIL: environments.test: leaf-environments: make-leaf-environment: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment?: documented?
FAIL: environments.test: leaf-environment based eval-environments: make-eval-environment: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-local: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-imported: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-set-local!: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-set-imported!: documented?
FAIL: environments.test: leaf-environment based import-environments: import-environment?: documented?
FAIL: environments.test: leaf-environment based import-environments: make-import-environment: documented?
Running eval.test
Running exceptions.test
Running filesys.test
Running format.test
Running fractions.test
Running ftw.test
Running gc.test
Running getopt-long.test
Running goops.test
Running guardians.test
FAIL: guardians.test: standard guardian functionality: make-guardian: documented?
Running hash.test
FAIL: hash.test: hash: (->bool (object-documentation hash))
FAIL: hash.test: hashv: (->bool (object-documentation hashv))
FAIL: hash.test: hashq: (->bool (object-documentation hashq))
FAIL: hash.test: hashx-remove!: (->bool (object-documentation hashx-remove!))
Running hooks.test
Running import.test
Running interp.test
Running list.test
FAIL: list.test: list: documented?
FAIL: list.test: make-list: documented?
FAIL: list.test: cons*: documented?
FAIL: list.test: append!: documented?
FAIL: list.test: list-ref: documented?
FAIL: list.test: list-set!: documented?
FAIL: list.test: list-cdr-set!: documented?
Running load.test
Running modules.test
Running numbers.test
FAIL: numbers.test: 1+: documented?
FAIL: numbers.test: 1-: documented?
FAIL: numbers.test: ash: documented?
FAIL: numbers.test: exact?: documented?
FAIL: numbers.test: exp: documented?
FAIL: numbers.test: odd?: (documented? odd?)
FAIL: numbers.test: even?: (documented? even?)
FAIL: numbers.test: inf?: (documented? inf?)
FAIL: numbers.test: nan?: (documented? nan?)
FAIL: numbers.test: abs: (documented? abs)
FAIL: numbers.test: number->string: (documented? number->string)
FAIL: numbers.test: string->number: documented?
FAIL: numbers.test: number?: (documented? number?)
FAIL: numbers.test: complex?: (documented? complex?)
FAIL: numbers.test: real?: (documented? real?)
FAIL: numbers.test: rational?: (documented? rational?)
FAIL: numbers.test: integer?: (documented? integer?)
FAIL: numbers.test: inexact?: (documented? inexact?)
FAIL: numbers.test: equal?: (documented? equal?)
FAIL: numbers.test: log: documented?
FAIL: numbers.test: log10: documented?
FAIL: numbers.test: sqrt: documented?
Running optargs.test
Running options.test
Running poe.test
Running popen.test
Running ports.test
UNRESOLVED: ports.test: port-for-each: passing freed cell
Running posix.test
Running procprop.test
Running q.test
Running r4rs.test
Running r5rs_pitfall.test
Running ramap.test
Running reader.test
Running receive.test
Running regexp.test
Running signals.test
Running socket.test
Running alist.test
Running and-let-star.test
Running arbiters.test
Running bit-operations.test
FAIL: bit-operations.test: bit-extract: documented?
Running c-api.test
Running chars.test
Running common-list.test
Running continuations.test
Running elisp.test
Running environments.test
FAIL: environments.test: leaf-environments: leaf-environment?: documented?
FAIL: environments.test: leaf-environments: make-leaf-environment: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment?: documented?
FAIL: environments.test: leaf-environment based eval-environments: make-eval-environment: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-local: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-imported: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-set-local!: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-set-imported!: documented?
FAIL: environments.test: leaf-environment based import-environments: import-environment?: documented?
FAIL: environments.test: leaf-environment based import-environments: make-import-environment: documented?
Running eval.test
Running exceptions.test
Running filesys.test
Running format.test
Running fractions.test
Running ftw.test
Running gc.test
Running getopt-long.test
Running goops.test
Running guardians.test
FAIL: guardians.test: standard guardian functionality: make-guardian: documented?
Running hash.test
FAIL: hash.test: hash: (->bool (object-documentation hash))
FAIL: hash.test: hashv: (->bool (object-documentation hashv))
FAIL: hash.test: hashq: (->bool (object-documentation hashq))
FAIL: hash.test: hashx-remove!: (->bool (object-documentation hashx-remove!))
Running hooks.test
Running import.test
Running interp.test
Running list.test
FAIL: list.test: list: documented?
FAIL: list.test: make-list: documented?
FAIL: list.test: cons*: documented?
FAIL: list.test: append!: documented?
FAIL: list.test: list-ref: documented?
FAIL: list.test: list-set!: documented?
FAIL: list.test: list-cdr-set!: documented?
Running load.test
Running modules.test
Running numbers.test
FAIL: numbers.test: 1+: documented?
FAIL: numbers.test: 1-: documented?
FAIL: numbers.test: ash: documented?
FAIL: numbers.test: exact?: documented?
FAIL: numbers.test: exp: documented?
FAIL: numbers.test: odd?: (documented? odd?)
FAIL: numbers.test: even?: (documented? even?)
FAIL: numbers.test: inf?: (documented? inf?)
FAIL: numbers.test: nan?: (documented? nan?)
FAIL: numbers.test: abs: (documented? abs)
FAIL: numbers.test: number->string: (documented? number->string)
FAIL: numbers.test: string->number: documented?
FAIL: numbers.test: number?: (documented? number?)
FAIL: numbers.test: complex?: (documented? complex?)
FAIL: numbers.test: real?: (documented? real?)
FAIL: numbers.test: rational?: (documented? rational?)
FAIL: numbers.test: integer?: (documented? integer?)
FAIL: numbers.test: inexact?: (documented? inexact?)
FAIL: numbers.test: equal?: (documented? equal?)
FAIL: numbers.test: log: documented?
FAIL: numbers.test: log10: documented?
FAIL: numbers.test: sqrt: documented?
Running optargs.test
Running options.test
Running poe.test
Running popen.test
Running ports.test
UNRESOLVED: ports.test: port-for-each: passing freed cell
Running posix.test
Running procprop.test
Running q.test
Running r4rs.test
Running r5rs_pitfall.test
Running ramap.test
Running reader.test
Running receive.test
Running regexp.test
Running signals.test
Running socket.test
Running alist.test
Running and-let-star.test
Running arbiters.test
Running bit-operations.test
FAIL: bit-operations.test: bit-extract: documented?
Running c-api.test
Running chars.test
Running common-list.test
Running continuations.test
Running elisp.test
Running environments.test
FAIL: environments.test: leaf-environments: leaf-environment?: documented?
FAIL: environments.test: leaf-environments: make-leaf-environment: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment?: documented?
FAIL: environments.test: leaf-environment based eval-environments: make-eval-environment: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-local: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-imported: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-set-local!: documented?
FAIL: environments.test: leaf-environment based eval-environments: eval-environment-set-imported!: documented?
FAIL: environments.test: leaf-environment based import-environments: import-environment?: documented?
FAIL: environments.test: leaf-environment based import-environments: make-import-environment: documented?
Running eval.test
Running exceptions.test
Running filesys.test
Running format.test
Running fractions.test
Running ftw.test
Running gc.test
Running getopt-long.test
Running goops.test
Running guardians.test
FAIL: guardians.test: standard guardian functionality: make-guardian: documented?
Running hash.test
FAIL: hash.test: hash: (->bool (object-documentation hash))
FAIL: hash.test: hashv: (->bool (object-documentation hashv))
FAIL: hash.test: hashq: (->bool (object-documentation hashq))
FAIL: hash.test: hashx-remove!: (->bool (object-documentation hashx-remove!))
Running hooks.test
Running import.test
Running interp.test
Running list.test
FAIL: list.test: list: documented?
FAIL: list.test: make-list: documented?
FAIL: list.test: cons*: documented?
FAIL: list.test: append!: documented?
FAIL: list.test: list-ref: documented?
FAIL: list.test: list-set!: documented?
FAIL: list.test: list-cdr-set!: documented?
Running load.test
Running modules.test
Running numbers.test
FAIL: numbers.test: 1+: documented?
FAIL: numbers.test: 1-: documented?
FAIL: numbers.test: ash: documented?
FAIL: numbers.test: exact?: documented?
FAIL: numbers.test: exp: documented?
FAIL: numbers.test: odd?: (documented? odd?)
FAIL: numbers.test: even?: (documented? even?)
FAIL: numbers.test: inf?: (documented? inf?)
FAIL: numbers.test: nan?: (documented? nan?)
FAIL: numbers.test: abs: (documented? abs)
FAIL: numbers.test: number->string: (documented? number->string)
FAIL: numbers.test: string->number: documented?
FAIL: numbers.test: number?: (documented? number?)
FAIL: numbers.test: complex?: (documented? complex?)
FAIL: numbers.test: real?: (documented? real?)
FAIL: numbers.test: rational?: (documented? rational?)
FAIL: numbers.test: integer?: (documented? integer?)
FAIL: numbers.test: inexact?: (documented? inexact?)
FAIL: numbers.test: equal?: (documented? equal?)
FAIL: numbers.test: log: documented?
FAIL: numbers.test: log10: documented?
FAIL: numbers.test: sqrt: documented?
Running optargs.test
Running options.test
Running poe.test
Running popen.test
Running ports.test
UNRESOLVED: ports.test: port-for-each: passing freed cell
Running posix.test
Running procprop.test
Running q.test
Running r4rs.test
Running r5rs_pitfall.test
Running ramap.test
Running reader.test
Running receive.test
Running regexp.test
Running signals.test
Running socket.test
Running srcprop.test
Running srfi-1.test
Running srfi-10.test
Running srfi-11.test
Running srfi-13.test
Running srfi-14.test
FAIL: srfi-14.test: Latin-1 (8-bit charset): char-set:letter (size)
Running srfi-19.test
Running srfi-26.test
Running srfi-31.test
Running srfi-34.test
Running srfi-35.test
Running srfi-37.test
Running srfi-39.test
Running srfi-4.test
Running srfi-6.test
Running srfi-60.test
Running srfi-69.test
Running srfi-88.test
Running srfi-9.test
Running strings.test
Running structs.test
Running symbols.test
FAIL: symbols.test: symbol?: documented?
FAIL: symbols.test: gensym: documented?
Running syncase.test
Running syntax.test
UNRESOLVED: syntax.test: while: in empty environment: empty body
UNRESOLVED: syntax.test: while: in empty environment: initially false
UNRESOLVED: syntax.test: while: in empty environment: iterating
Running threads.test
Running time.test
Running unif.test
Running version.test
Running weaks.test
Totals for this test run:
passes:                 11927
failures:               48
unexpected passes:      0
expected failures:      24
unresolved test cases:  4
untested test cases:    0
unsupported test cases: 11
errors:                 0
FAIL: check-guile
==================================
1 of 1 test failed
==================================
Makefile:659: recipe for target 'check-TESTS' failed
Makefile:932: recipe for target 'check-am' failed
Makefile:530: recipe for target 'check-recursive' failed
