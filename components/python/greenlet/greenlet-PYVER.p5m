#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
#

set name=pkg.fmri \
    value=pkg:/library/python/greenlet-$(PYV)@$(IPS_COMPONENT_VERSION),$(BUILD_VERSION)
set name=pkg.summary value="Lightweight in-process concurrent programming"
set name=pkg.description \
    value="The greenlet package supports micro-threads called 'tasklets'. Tasklets run pseudo-concurrently (typically in a single or a few OS-level threads) and are synchronized with data exchanges on 'channels'. A 'greenlet', on the other hand, is a still more primitive notion of micro-thread with no implicit scheduling; coroutines, in other words. This is useful when one want to control exactly when one's code runs. One can build custom scheduled micro-threads on top of greenlet; However, greenlets are useful on their own as a way to make advanced control flow structures. For example, one can recreate generators; the difference with Python's own generators is that greenlet's generators can call nested functions and the nested functions can yield values too."
set name=com.oracle.info.description \
    value="the Python greenlet coroutine module"
set name=com.oracle.info.tpno value=$(TPNO)
set name=info.classification \
    value=org.opensolaris.category.2008:Development/Python
set name=info.source-url value=$(COMPONENT_ARCHIVE_URL)
set name=info.upstream value="Ralf Schmitt <ralf@systemexit.de>"
set name=info.upstream-url value=$(COMPONENT_PROJECT_URL)
set name=org.opensolaris.arc-caseid value=PSARC/2013/140
set name=org.opensolaris.consolidation value=$(CONSOLIDATION)
#
$(PYTHON_2.6_ONLY)file path=usr/include/python$(PYVER)/greenlet/greenlet.h
$(PYTHON_2.7_ONLY)file path=usr/include/python$(PYVER)/greenlet/greenlet.h
$(PYTHON_3.4_ONLY)file path=usr/include/python$(PYVER)m/greenlet/greenlet.h
$(PYTHON_3.5_ONLY)file path=usr/include/python$(PYVER)m/greenlet/greenlet.h
file path=usr/lib/python$(PYVER)/vendor-packages/64/greenlet.so
file path=usr/lib/python$(PYVER)/vendor-packages/greenlet-$(COMPONENT_VERSION)-py$(PYVER).egg-info
file path=usr/lib/python$(PYVER)/vendor-packages/greenlet.so
#
license greenlet.license license="MIT, PSFv2"

# force the rename with an optional dependency on the old name
depend type=optional \
    fmri=library/python-2/greenlet-$(PYV)@0.4.1,5.12-5.12.0.0.0.41.0

# force a dependency on the Python runtime
depend type=require fmri=__TBD pkg.debug.depend.file=python$(PYVER) \
    pkg.debug.depend.path=usr/bin

# force a dependency on the greenlet package
depend type=require \
    fmri=library/python/greenlet@$(IPS_COMPONENT_VERSION),$(BUILD_VERSION)
