This patch includes support for the Solaris netdev provider.

This patch has not been proposed upstream because we are not yet
proposing Solaris specific requirements upstream.

diff --git a/lib/netdev-dummy.c b/lib/netdev-dummy.c
index dec1a8e0c..4b14e4b84 100644
--- a/lib/netdev-dummy.c
+++ b/lib/netdev-dummy.c
@@ -1316,6 +1316,7 @@ netdev_dummy_update_flags(struct netdev *netdev_,
 
 /* Helper functions. */
 
+#ifdef __sun
 #define NETDEV_DUMMY_CLASS(NAME, PMD, RECOFIGURE)               \
 {                                                               \
     NAME,                                                       \
@@ -1376,7 +1377,76 @@ netdev_dummy_update_flags(struct netdev *netdev_,
                                                                 \
     netdev_dummy_update_flags,                                  \
     RECOFIGURE,                                                 \
+    NULL,                       /* configure_uplink */          \
+    netdev_dummy_rxq_alloc,                                     \
+    netdev_dummy_rxq_construct,                                 \
+    netdev_dummy_rxq_destruct,                                  \
+    netdev_dummy_rxq_dealloc,                                   \
+    netdev_dummy_rxq_recv,                                      \
+    netdev_dummy_rxq_wait,                                      \
+    netdev_dummy_rxq_drain,                                     \
+}
+#else
+#define NETDEV_DUMMY_CLASS(NAME, PMD, RECOFIGURE)               \
+{                                                               \
+    NAME,                                                       \
+    PMD,                        /* is_pmd */                    \
+    NULL,                       /* init */                      \
+    netdev_dummy_run,                                           \
+    netdev_dummy_wait,                                          \
+                                                                \
+    netdev_dummy_alloc,                                         \
+    netdev_dummy_construct,                                     \
+    netdev_dummy_destruct,                                      \
+    netdev_dummy_dealloc,                                       \
+    netdev_dummy_get_config,                                    \
+    netdev_dummy_set_config,                                    \
+    NULL,                       /* get_tunnel_config */         \
+    NULL,                       /* build header */              \
+    NULL,                       /* push header */               \
+    NULL,                       /* pop header */                \
+    netdev_dummy_get_numa_id,                                   \
+    NULL,                       /* set_tx_multiq */             \
+                                                                \
+    netdev_dummy_send,          /* send */                      \
+    NULL,                       /* send_wait */                 \
+                                                                \
+    netdev_dummy_set_etheraddr,                                 \
+    netdev_dummy_get_etheraddr,                                 \
+    netdev_dummy_get_mtu,                                       \
+    netdev_dummy_set_mtu,                                       \
+    netdev_dummy_get_ifindex,                                   \
+    NULL,                       /* get_carrier */               \
+    NULL,                       /* get_carrier_resets */        \
+    NULL,                       /* set_miimon_interval */       \
+    netdev_dummy_get_stats,                                     \
                                                                 \
+    NULL,                       /* get_features */              \
+    NULL,                       /* set_advertisements */        \
+                                                                \
+    NULL,                       /* set_policing */              \
+    NULL,                       /* get_qos_types */             \
+    NULL,                       /* get_qos_capabilities */      \
+    NULL,                       /* get_qos */                   \
+    NULL,                       /* set_qos */                   \
+    netdev_dummy_get_queue,                                     \
+    NULL,                       /* set_queue */                 \
+    NULL,                       /* delete_queue */              \
+    netdev_dummy_get_queue_stats,                               \
+    netdev_dummy_queue_dump_start,                              \
+    netdev_dummy_queue_dump_next,                               \
+    netdev_dummy_queue_dump_done,                               \
+    netdev_dummy_dump_queue_stats,                              \
+                                                                \
+    NULL,                       /* set_in4 */                   \
+    netdev_dummy_get_addr_list,                                 \
+    NULL,                       /* add_router */                \
+    NULL,                       /* get_next_hop */              \
+    NULL,                       /* get_status */                \
+    NULL,                       /* arp_lookup */                \
+                                                                \
+    netdev_dummy_update_flags,                                  \
+    RECOFIGURE,                                                 \
     netdev_dummy_rxq_alloc,                                     \
     netdev_dummy_rxq_construct,                                 \
     netdev_dummy_rxq_destruct,                                  \
@@ -1385,6 +1455,7 @@ netdev_dummy_update_flags(struct netdev *netdev_,
     netdev_dummy_rxq_wait,                                      \
     netdev_dummy_rxq_drain,                                     \
 }
+#endif
 
 static const struct netdev_class dummy_class =
     NETDEV_DUMMY_CLASS("dummy", false, NULL);
diff --git a/lib/netdev-native-tnl.c b/lib/netdev-native-tnl.c
index ce2582f13..6c90a84e0 100644
--- a/lib/netdev-native-tnl.c
+++ b/lib/netdev-native-tnl.c
@@ -429,6 +429,7 @@ netdev_gre_push_header(struct dp_packet *packet,
     }
 }
 
+#ifndef __sun
 int
 netdev_gre_build_header(const struct netdev *netdev,
                         struct ovs_action_push_tnl *data,
@@ -470,6 +471,7 @@ netdev_gre_build_header(const struct netdev *netdev,
     data->tnl_type = OVS_VPORT_TYPE_GRE;
     return 0;
 }
+#endif /* !__sun */
 
 struct dp_packet *
 netdev_vxlan_pop_header(struct dp_packet *packet)
diff --git a/lib/netdev-provider.h b/lib/netdev-provider.h
index c8507a56b..8f68194ec 100644
--- a/lib/netdev-provider.h
+++ b/lib/netdev-provider.h
@@ -724,6 +724,14 @@ struct netdev_class {
      * used to send and receive packets until a successful configuration is
      * applied. */
     int (*reconfigure)(struct netdev *netdev);
+
+#ifdef __sun
+    /* migrate the internal port to uplink if it is available or migrate it
+     * back to etherstub when the uplink is deleted. */
+    int (*configure_uplink)(const char *, const struct netdev *,
+	const struct netdev *);
+#endif /* __sun */
+
 /* ## -------------------- ## */
 /* ## netdev_rxq Functions ## */
 /* ## -------------------- ## */
@@ -774,7 +782,11 @@ extern const struct netdev_class netdev_bsd_class;
 #elif defined(_WIN32)
 extern const struct netdev_class netdev_windows_class;
 #else
+#ifdef __sun
+extern const struct netdev_class netdev_solaris_class;
+#else
 extern const struct netdev_class netdev_linux_class;
+#endif /* __sun */
 #endif
 extern const struct netdev_class netdev_internal_class;
 extern const struct netdev_class netdev_tap_class;
diff --git a/lib/netdev-vport.c b/lib/netdev-vport.c
index ac31da6a6..82a5d43d5 100644
--- a/lib/netdev-vport.c
+++ b/lib/netdev-vport.c
@@ -47,6 +47,13 @@
 
 VLOG_DEFINE_THIS_MODULE(netdev_vport);
 
+#ifdef __sun
+#ifdef IFNAMSIZ
+#undef IFNAMSIZ
+#define IFNAMSIZ MAXLINKNAMESPECIFIER
+#endif
+#endif
+
 #define GENEVE_DST_PORT 6081
 #define VXLAN_DST_PORT 4789
 #define LISP_DST_PORT 4341
@@ -124,9 +131,15 @@ netdev_vport_get_dpif_port(const struct netdev *netdev,
 {
     const struct netdev_class *class = netdev_get_class(netdev);
     const char *dpif_port = netdev_vport_class_get_dpif_port(class);
+	const char *str_rv = NULL;
+
+	namebuf[0] = '\0';
 
     if (!dpif_port) {
-        return netdev_get_name(netdev);
+		(void) snprintf(namebuf, bufsize, "%s", netdev_get_name(netdev));
+	VLOG_DBG("netdev_vport_get_dpif_port: returns = %s, netdev = %s",
+		 namebuf, netdev_get_name(netdev));
+        return namebuf;
     }
 
     if (netdev_vport_needs_dst_port(netdev)) {
@@ -141,10 +154,17 @@ netdev_vport_get_dpif_port(const struct netdev *netdev,
         ovs_assert(strlen(dpif_port) + 6 < IFNAMSIZ);
         snprintf(namebuf, bufsize, "%s_%d", dpif_port,
                  ntohs(vport->tnl_cfg.dst_port));
+	VLOG_DBG("netdev_vport_get_dpif_port: returns = %s, netdev = %s",
+		 namebuf, netdev_get_name(netdev));
         return namebuf;
     } else {
-        return dpif_port;
+        str_rv = dpif_port;
     }
+
+	(void) snprintf(namebuf, bufsize, "%s", str_rv);
+	VLOG_DBG("netdev_vport_get_dpif_port: returns = %s, netdev = %s",
+		 namebuf, netdev_get_name(netdev));
+	return namebuf;
 }
 
 /* Whenever the route-table change number is incremented,
@@ -807,6 +827,80 @@ get_stats(const struct netdev *netdev, struct netdev_stats *stats)
 }
 
 
+#ifdef __sun
+#define VPORT_FUNCTIONS(GET_CONFIG, SET_CONFIG,             \
+                        GET_TUNNEL_CONFIG, GET_STATUS,      \
+                        BUILD_HEADER,                       \
+                        PUSH_HEADER, POP_HEADER)            \
+    NULL,                                                   \
+    netdev_vport_run,                                       \
+    netdev_vport_wait,                                      \
+                                                            \
+    netdev_vport_alloc,                                     \
+    netdev_vport_construct,                                 \
+    netdev_vport_destruct,                                  \
+    netdev_vport_dealloc,                                   \
+    GET_CONFIG,                                             \
+    SET_CONFIG,                                             \
+    GET_TUNNEL_CONFIG,                                      \
+    BUILD_HEADER,                                           \
+    PUSH_HEADER,                                            \
+    POP_HEADER,                                             \
+    NULL,                       /* get_numa_id */           \
+    NULL,                       /* set_tx_multiq */         \
+                                                            \
+    NULL,                       /* send */                  \
+    NULL,                       /* send_wait */             \
+                                                            \
+    netdev_vport_set_etheraddr,                             \
+    netdev_vport_get_etheraddr,                             \
+    NULL,                       /* get_mtu */               \
+    NULL,                       /* set_mtu */               \
+    NULL,                       /* get_ifindex */           \
+    NULL,                       /* get_carrier */           \
+    NULL,                       /* get_carrier_resets */    \
+    NULL,                       /* get_miimon */            \
+    get_stats,                                              \
+                                                            \
+    NULL,                       /* get_features */          \
+    NULL,                       /* set_advertisements */    \
+                                                            \
+    NULL,                       /* set_policing */          \
+    NULL,                       /* get_qos_types */         \
+    NULL,                       /* get_qos_capabilities */  \
+    NULL,                       /* get_qos */               \
+    NULL,                       /* set_qos */               \
+    NULL,                       /* get_queue */             \
+    NULL,                       /* set_queue */             \
+    NULL,                       /* delete_queue */          \
+    NULL,                       /* get_queue_stats */       \
+    NULL,                       /* queue_dump_start */      \
+    NULL,                       /* queue_dump_next */       \
+    NULL,                       /* queue_dump_done */       \
+    NULL,                       /* dump_queue_stats */      \
+                                                            \
+    NULL,                       /* set_in4 */               \
+    NULL,                       /* get_addr_list */         \
+    NULL,                       /* add_router */            \
+    NULL,                       /* get_next_hop */          \
+    GET_STATUS,                                             \
+    NULL,                       /* arp_lookup */            \
+                                                            \
+    netdev_vport_update_flags,                              \
+    NULL,                       /* reconfigure */           \
+                                                            \
+    NULL,			/* configure_uplink */      \
+    NULL,                   /* rx_alloc */                  \
+    NULL,                   /* rx_construct */              \
+    NULL,                   /* rx_destruct */               \
+    NULL,                   /* rx_dealloc */                \
+    NULL,                   /* rx_recv */                   \
+    NULL,                   /* rx_wait */                   \
+    NULL,                   /* rx_drain */                  \
+    NULL,                   /* configure_uplink */          \
+    NULL,                   /* is_uplink */                 \
+    NULL                    /* add_port_to_bridge_mapping */
+#else
 #define VPORT_FUNCTIONS(GET_CONFIG, SET_CONFIG,             \
                         GET_TUNNEL_CONFIG, GET_STATUS,      \
                         BUILD_HEADER,                       \
@@ -874,7 +968,11 @@ get_stats(const struct netdev *netdev, struct netdev_stats *stats)
     NULL,                   /* rx_dealloc */                \
     NULL,                   /* rx_recv */                   \
     NULL,                   /* rx_wait */                   \
-    NULL,                   /* rx_drain */
+    NULL,                   /* rx_drain */                  \
+    NULL,                   /* configure_uplink */          \
+    NULL,                   /* is_uplink */                 \
+    NULL                    /* add_port_to_bridge_mapping */
+#endif
 
 
 #define TUNNEL_CLASS(NAME, DPIF_PORT, BUILD_HEADER, PUSH_HEADER, POP_HEADER)   \
@@ -892,6 +990,7 @@ netdev_vport_tunnel_register(void)
     /* The name of the dpif_port should be short enough to accomodate adding
      * a port number to the end if one is necessary. */
     static const struct vport_class vport_classes[] = {
+#ifndef __sun
         TUNNEL_CLASS("geneve", "genev_sys", netdev_geneve_build_header,
                                             netdev_tnl_push_udp_header,
                                             netdev_geneve_pop_header),
@@ -899,11 +998,14 @@ netdev_vport_tunnel_register(void)
                                        netdev_gre_push_header,
                                        netdev_gre_pop_header),
         TUNNEL_CLASS("ipsec_gre", "gre_sys", NULL, NULL, NULL),
+#endif /* !__sun */
         TUNNEL_CLASS("vxlan", "vxlan_sys", netdev_vxlan_build_header,
                                            netdev_tnl_push_udp_header,
                                            netdev_vxlan_pop_header),
+#ifndef __sun
         TUNNEL_CLASS("lisp", "lisp_sys", NULL, NULL, NULL),
         TUNNEL_CLASS("stt", "stt_sys", NULL, NULL, NULL),
+#endif /* !__sun */
     };
     static struct ovsthread_once once = OVSTHREAD_ONCE_INITIALIZER;
 
diff --git a/lib/netdev.c b/lib/netdev.c
index 6c4c6571e..41cfe3575 100644
--- a/lib/netdev.c
+++ b/lib/netdev.c
@@ -143,6 +143,11 @@ netdev_initialize(void)
         netdev_register_provider(&netdev_internal_class);
         netdev_vport_tunnel_register();
 #endif
+#ifdef __sun
+        netdev_register_provider(&netdev_solaris_class);
+        netdev_register_provider(&netdev_internal_class);
+        netdev_vport_tunnel_register();
+#endif /* __sun */
         ovsthread_once_done(&once);
     }
 }
@@ -824,6 +829,73 @@ netdev_get_etheraddr(const struct netdev *netdev, struct eth_addr *mac)
     return netdev->netdev_class->get_etheraddr(netdev, mac);
 }
 
+#ifdef __sun
+/*
+ * This function is used to migrate the internal port to the uplink when it 
+ * is available, or migrate it back to the default etherstub link when no
+ * uplink is available.
+ *
+ * 1. when old_netdev is not NULL, it means its assoicated port is deleted
+ *    from the bridge and we'd need to check if the to-be-deleted port is
+ *    the current uplink that the internal port is current created over,
+ *    and if it is, try to see if the internal port can be migrated to
+ *    new_netdev. new_netdev could be NULL, in that case, internal port must
+ *    be migrated to the etherstub.
+ *
+ *    1.1 return ENOTSUP if old_netdev is not the current uplink being selected
+ *        this also includes the case when the class of old_netdev does not
+ *        support uplink migration.
+ *
+ *    1.2 return 0 if old_netdev is the current uplink being selected and the
+ *        migration succeeded.
+ *
+ *    1.3 return other error if old_netdev is the current uplink being selected
+ *        but migration failed for some reason. This also includes the case
+ *        when the class of new_netdev does not support uplink migration. 
+ *
+ * 2. when old_netdev is NULL, the new_netdev must be non-NULL. It means that
+ *    its assoicated port might be the better candidate for the internal port
+ *    to be created over than the current uplink being selected
+ *
+ *    1.1 return 0 if new_netdev is a good candidate and the migration
+ *        succeeded.
+ *
+ *    1.2 return other error if the new_netdev is a not a good candidate or
+ *        the migration failed. This also includes the case when the class
+ *        of the new_netdev does not support uplink migration.
+ */
+int
+netdev_configure_uplink(const char *brname, const struct netdev *old_netdev,
+    const struct netdev *new_netdev)
+{
+	/*
+	 * If the old netdev does not support configure_uplink, return
+	 * ENOTSUP and the caller does not need to continue as the netdev
+	 * being deleted is not interesting.
+	 */
+	if (old_netdev != NULL &&
+	    old_netdev->netdev_class->configure_uplink == NULL)
+		return (ENOTSUP);
+
+	/*
+	 * If the new netdev does not support configure_uplink, return
+	 * failure and the caller could continue with the other new_netdev
+	 */
+	if (new_netdev != NULL &&
+	    new_netdev->netdev_class->configure_uplink == NULL)
+		return (EINVAL);
+
+	if (new_netdev != NULL) {
+		return new_netdev->netdev_class->configure_uplink(brname,
+		    old_netdev, new_netdev);
+	} else {
+		return old_netdev->netdev_class->configure_uplink(brname,
+	    	    old_netdev, new_netdev);
+	}
+	return (0);
+}
+#endif /* __sun */
+
 /* Returns the name of the network device that 'netdev' represents,
  * e.g. "eth0".  The caller must not modify or free the returned string. */
 const char *
diff --git a/lib/netdev.h b/lib/netdev.h
index 634c665f3..4b5622fd4 100644
--- a/lib/netdev.h
+++ b/lib/netdev.h
@@ -183,6 +183,11 @@ void netdev_pop_header(struct netdev *netdev, struct dp_packet_batch *);
 int netdev_set_etheraddr(struct netdev *, const struct eth_addr mac);
 int netdev_get_etheraddr(const struct netdev *, struct eth_addr *mac);
 
+#ifdef __sun
+int netdev_configure_uplink(const char *, const struct netdev *,
+    const struct netdev *);
+#endif /* __sun */
+
 /* PHY interface. */
 bool netdev_get_carrier(const struct netdev *);
 long long int netdev_get_carrier_resets(const struct netdev *);
