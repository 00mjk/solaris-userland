This patch includes OVS 2.6.1 port on Solaris

This patch has not been proposed upstream because we are not yet
proposing Solaris specific requirements upstream.

diff --git a/acinclude.m4 b/acinclude.m4
index 2c500a8d1..13a676c79 100644
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -712,6 +712,13 @@ AC_DEFUN([OVS_CHECK_IF_DL],
   [AC_CHECK_HEADER([net/if_dl.h],
                    [HAVE_IF_DL=yes],
                    [HAVE_IF_DL=no])
+   AC_CHECK_HEADER([zone.h],
+                   [SOLARIS=yes],
+                   [SOLARIS=no])
+   # We don't use libpcap on Solaris
+   if test "$SOLARIS" = yes; then
+      HAVE_IF_DL=no
+   fi
    AM_CONDITIONAL([HAVE_IF_DL], [test "$HAVE_IF_DL" = yes])
    if test "$HAVE_IF_DL" = yes; then
       AC_DEFINE([HAVE_IF_DL], [1],
diff --git a/build-aux/thread-safety-blacklist b/build-aux/thread-safety-blacklist
index 42560df9c..d7b6aaaf0 100644
--- a/build-aux/thread-safety-blacklist
+++ b/build-aux/thread-safety-blacklist
@@ -54,7 +54,6 @@
 \bhcreate(
 \bhdestroy(
 \bhsearch(
-\binet_ntoa(
 \bl64a(
 \blgamma(
 \blgammaf(
diff --git a/configure.ac b/configure.ac
index da3bbaeb4..6c3d4de08 100644
--- a/configure.ac
+++ b/configure.ac
@@ -87,6 +87,7 @@ AC_FUNC_STRERROR_R
 OVS_CHECK_ESX
 OVS_CHECK_WIN64
 OVS_CHECK_WIN32
+OVS_CHECK_SOLARIS
 OVS_CHECK_VISUAL_STUDIO_DDK
 OVS_CHECK_COVERAGE
 OVS_CHECK_NDEBUG
diff --git a/datapath/linux/compat/include/linux/openvswitch.h b/datapath/linux/compat/include/linux/openvswitch.h
index 12260d8bf..0ffdca374 100644
--- a/datapath/linux/compat/include/linux/openvswitch.h
+++ b/datapath/linux/compat/include/linux/openvswitch.h
@@ -282,6 +282,9 @@ enum ovs_vport_attr {
 	OVS_VPORT_ATTR_UPCALL_PID, /* array of u32 Netlink socket PIDs for */
 				/* receiving upcalls */
 	OVS_VPORT_ATTR_STATS,	/* struct ovs_vport_stats */
+#ifdef __sun
+	OVS_VPORT_ATTR_QOS,
+#endif
 	OVS_VPORT_ATTR_PAD,
 	__OVS_VPORT_ATTR_MAX
 };
diff --git a/datapath/Makefile.am b/datapath/Makefile.am
index f2a85bc3b..b4d06a3f5 100644
--- a/datapath/Makefile.am
+++ b/datapath/Makefile.am
@@ -42,15 +42,15 @@ COMPAT_EXPORTS := $(shell $(COMPAT_GET_EXPORTS))
 # Checks that all EXPORT_SYMBOL_GPL() export 'rpl_' or 'ovs_' prefixed functions.
 check-export-symbol:
 	@for fun_ in $(COMPAT_FUNCTIONS); do \
-	   if ! grep -- $${fun_} $(top_srcdir)/datapath/linux/compat/build-aux/export-check-whitelist > /dev/null; then \
-	      if ! echo $${fun_} | grep -q -E '^(rpl|ovs)_'; then \
+	   if ! $(GREP) -- $${fun_} $(top_srcdir)/datapath/linux/compat/build-aux/export-check-whitelist > /dev/null; then \
+	      if ! echo $${fun_} | $(GREP) -q -E '^(rpl|ovs)_'; then \
 	         echo "error: $${fun_}() needs to be prefixed with 'rpl_' or 'ovs_'."; \
 	         exit 1; \
 	      fi; \
 	   fi; \
 	done
 	@for fun_ in $(COMPAT_EXPORTS); do \
-	   if ! echo $${fun_} | grep -q -E '^(rpl|ovs)_'; then \
+	   if ! echo $${fun_} | $(GREP) -q -E '^(rpl|ovs)_'; then \
 	      echo "error: $${fun_}() needs to be prefixed with 'rpl_' or 'ovs_'."; \
 	      exit 1; \
 	   fi; \
diff --git a/include/automake.mk b/include/automake.mk
index 37903fdc3..593f3ff32 100644
--- a/include/automake.mk
+++ b/include/automake.mk
@@ -2,12 +2,13 @@ BUILT_SOURCES += include/odp-netlink.h
 
 include/odp-netlink.h: datapath/linux/compat/include/linux/openvswitch.h \
                        build-aux/extract-odp-netlink-h
-	$(AM_V_GEN)sed -f $(srcdir)/build-aux/extract-odp-netlink-h < $< > $@
+	$(AM_V_GEN)$(SED) -f $(srcdir)/build-aux/extract-odp-netlink-h < $< > $@
 EXTRA_DIST += build-aux/extract-odp-netlink-h
 CLEANFILES += include/odp-netlink.h
 
 include include/ovn/automake.mk
 include include/openflow/automake.mk
 include include/openvswitch/automake.mk
+include include/solaris/automake.mk
 include include/sparse/automake.mk
 include include/windows/automake.mk
diff --git a/lib/automake.mk b/lib/automake.mk
index e4cfc976f..aea1116d4 100644
--- a/lib/automake.mk
+++ b/lib/automake.mk
@@ -14,6 +14,15 @@ if WIN32
 lib_libopenvswitch_la_LIBADD += ${PTHREAD_LIBS}
 endif
 
+if SOLARIS 
+lib_libopenvswitch_la_LIBADD += -ldladm 
+lib_libopenvswitch_la_LIBADD += -ldlpi
+lib_libopenvswitch_la_LIBADD += -lkstat2
+lib_libopenvswitch_la_LIBADD += -ladr
+
+AM_LIBTOOLFLAGS = -Wnone
+endif
+
 lib_libopenvswitch_la_LDFLAGS = \
         -version-info $(LT_CURRENT):$(LT_REVISION):$(LT_AGE) \
         -Wl,--version-script=$(top_builddir)/lib/libopenvswitch.sym \
@@ -392,6 +401,23 @@ lib_libopenvswitch_la_SOURCES += \
 	lib/netlink-socket.h
 endif
 
+if SOLARIS
+lib_libopenvswitch_la_SOURCES += \
+        lib/dpif-netlink.c \
+        lib/dpif-netlink.h \
+        lib/netdev-solaris.c \
+        lib/netdev-solaris.h \
+        lib/route-table-solaris.c \
+        lib/util-solaris.c \
+        lib/util-solaris.h \
+        lib/netlink-notifier.c \
+        lib/netlink-notifier.h \
+        lib/netlink-protocol.h \
+        lib/if-notifier-stub.c \
+        lib/netlink-socket.c \
+        lib/netlink-socket.h
+endif
+
 if HAVE_POSIX_AIO
 lib_libopenvswitch_la_SOURCES += lib/async-append-aio.c
 else
diff --git a/lib/byte-order.h b/lib/byte-order.h
index e864658f9..a324812b6 100644
--- a/lib/byte-order.h
+++ b/lib/byte-order.h
@@ -22,7 +22,7 @@
 #include "openvswitch/types.h"
 
 #ifndef __CHECKER__
-#if !(defined(_WIN32) || defined(htonll))
+#if !(defined(_WIN32) || defined(htonll) || defined(__sun))
 static inline ovs_be64
 htonll(uint64_t n)
 {
@@ -34,7 +34,7 @@ ntohll(ovs_be64 n)
 {
     return htonl(1) == 1 ? n : ((uint64_t) ntohl(n) << 32) | ntohl(n >> 32);
 }
-#endif /* !(defined(_WIN32) || defined(htonll)) */
+#endif /* !(defined(_WIN32) || defined(htonll) || defined(__sun)) */
 #else
 /* Making sparse happy with these functions also makes them unreadable, so
  * don't bother to show it their implementations. */
diff --git a/lib/conntrack.c b/lib/conntrack.c
index 7c50a289c..0917bbc1e 100644
--- a/lib/conntrack.c
+++ b/lib/conntrack.c
@@ -314,7 +314,9 @@ conntrack_execute(struct conntrack *ct, struct dp_packet_batch *pkt_batch,
             ULLONG_SET1(arr[arrcnt].maps, i);
             arr[arrcnt++].bucket = bucket;
         } else {
+#pragma GCC diagnostic ignored "-Wchar-subscripts"
             ULLONG_SET1(arr[bucket_list[bucket]].maps, i);
+#pragma GCC diagnostic warning "-Wchar-subscripts"
         }
     }
 
diff --git a/lib/flow.h b/lib/flow.h
index ea24e28db..807775c44 100644
--- a/lib/flow.h
+++ b/lib/flow.h
@@ -32,6 +32,10 @@
 #include "hash.h"
 #include "util.h"
 
+#ifdef __sun
+#include "solaris/solarisdefs.h"
+#endif /* __sun */
+
 struct dpif_flow_stats;
 struct ds;
 struct flow_wildcards;
diff --git a/lib/lldp/lldp.c b/lib/lldp/lldp.c
index 74f747fcd..294cf2e61 100644
--- a/lib/lldp/lldp.c
+++ b/lib/lldp/lldp.c
@@ -146,7 +146,15 @@ static void
 lldp_tlv_end(struct dp_packet *p, unsigned int start)
 {
     ovs_be16 *tlv = dp_packet_at_assert(p, start, 2);
+#ifdef __sun
+    /* Need this because of alignment issue on SPARC */
+    ovs_be16 tmp_tlv;
+    memcpy(&tmp_tlv, tlv, sizeof (ovs_be16));
+    tmp_tlv |= htons((dp_packet_size(p) - (start + 2)) & 0x1ff);
+    memcpy(tlv, &tmp_tlv, sizeof (ovs_be16));
+#else
     *tlv |= htons((dp_packet_size(p) - (start + 2)) & 0x1ff);
+#endif
 }
 
 int
diff --git a/lib/libopenvswitch.sym.in b/lib/libopenvswitch.sym.in
index fdfc5bb72..52d32b4cb 100644
--- a/lib/libopenvswitch.sym.in
+++ b/lib/libopenvswitch.sym.in
@@ -1,4 +1,3856 @@
 libopenvswitch_@LT_CURRENT@ {
 global:
-        *;
+  IP_ECN_set_ce;
+  aa_configure;
+  aa_get_vlan_queue_size;
+  aa_get_vlan_queued;
+  aa_mapping_register;
+  aa_mapping_unregister;
+  abs_file_name;
+  add_allowed_ofp_versions;
+  addr_is_ipv6;
+  aes128_encrypt;
+  aes128_schedule;
+  af_inet_ifreq_ioctl;
+  af_inet_ioctl;
+  assert_single_threaded_at;
+  async_append_create;
+  async_append_destroy;
+  async_append_flush;
+  async_append_write;
+  backtrace_capture;
+  base_name;
+  bfd_account_rx;
+  bfd_check_status_change;
+  bfd_configure;
+  bfd_forwarding;
+  bfd_get_status;
+  bfd_init;
+  bfd_process_packet;
+  bfd_put_packet;
+  bfd_ref;
+  bfd_run;
+  bfd_set_netdev;
+  bfd_should_process_flow;
+  bfd_should_send_packet;
+  bfd_unref;
+  bfd_wait;
+  bfd_wake_time;
+  bitwise_copy;
+  bitwise_get;
+  bitwise_get_bit;
+  bitwise_is_all_zeros;
+  bitwise_one;
+  bitwise_put;
+  bitwise_put0;
+  bitwise_put1;
+  bitwise_put_bit;
+  bitwise_rscan;
+  bitwise_scan;
+  bitwise_toggle_bit;
+  bitwise_zero;
+  bundle_check;
+  bundle_execute;
+  bundle_format;
+  bundle_parse;
+  bundle_parse_load;
+  byteq_advance_head;
+  byteq_advance_tail;
+  byteq_avail;
+  byteq_get;
+  byteq_head;
+  byteq_headroom;
+  byteq_init;
+  byteq_is_empty;
+  byteq_is_full;
+  byteq_put;
+  byteq_put_string;
+  byteq_putn;
+  byteq_read;
+  byteq_tail;
+  byteq_tailroom;
+  byteq_used;
+  byteq_write;
+  ccmap_count;
+  ccmap_dec;
+  ccmap_destroy;
+  ccmap_find;
+  ccmap_inc;
+  ccmap_init;
+  ccmap_is_empty;
+  cfm_check_status_change;
+  cfm_compose_ccm;
+  cfm_configure;
+  cfm_create;
+  cfm_fault_reason_to_str;
+  cfm_get_fault;
+  cfm_get_flap_count;
+  cfm_get_health;
+  cfm_get_opup;
+  cfm_get_remote_mpids;
+  cfm_get_status;
+  cfm_init;
+  cfm_process_heartbeat;
+  cfm_ref;
+  cfm_run;
+  cfm_set_netdev;
+  cfm_should_process_flow;
+  cfm_should_send_ccm;
+  cfm_unref;
+  cfm_wait;
+  cfm_wake_time;
+  check_connection_completion;
+  classifier_count;
+  classifier_destroy;
+  classifier_find_match_exactly;
+  classifier_find_rule_exactly;
+  classifier_init;
+  classifier_insert;
+  classifier_is_empty;
+  classifier_lookup;
+  classifier_remove;
+  classifier_replace;
+  classifier_rule_overlaps;
+  classifier_set_prefix_fields;
+  close_standard_fds;
+  cls_cursor_advance;
+  cls_cursor_start;
+  cls_match_free_cb;
+  cls_rule_clone;
+  cls_rule_destroy;
+  cls_rule_equal;
+  cls_rule_format;
+  cls_rule_init;
+  cls_rule_init_from_minimatch;
+  cls_rule_is_catchall;
+  cls_rule_is_loose_match;
+  cls_rule_make_invisible_in_version;
+  cls_rule_move;
+  cls_rule_restore_visibility;
+  cls_rule_set_conjunctions;
+  cls_rule_visible_in_version;
+  cmap_count;
+  cmap_cursor_advance;
+  cmap_cursor_start;
+  cmap_destroy;
+  cmap_find;
+  cmap_find_batch;
+  cmap_find_protected;
+  cmap_init;
+  cmap_insert;
+  cmap_is_empty;
+  cmap_next_position;
+  cmap_replace;
+  colors_init;
+  commit_masked_set_action;
+  commit_odp_actions;
+  commit_odp_tunnel_action;
+  compose_arp;
+  compose_arp__;
+  compose_nd_na;
+  compose_nd_ns;
+  compose_rarp;
+  connectivity_seq_get;
+  conntrack_destroy;
+  conntrack_dump_done;
+  conntrack_dump_next;
+  conntrack_dump_start;
+  conntrack_execute;
+  conntrack_flush;
+  conntrack_init;
+  count_cpu_cores;
+  coverage_clear;
+  coverage_counter_register;
+  coverage_init;
+  coverage_log;
+  coverage_run;
+  coverage_try_clear;
+  crc32c;
+  csum;
+  csum_continue;
+  csum_finish;
+  ct_dpif_dump_done;
+  ct_dpif_dump_next;
+  ct_dpif_dump_start;
+  ct_dpif_entry_uninit;
+  ct_dpif_flush;
+  ct_dpif_format_entry;
+  ct_dpif_format_tuple;
+  ct_state_to_string;
+  ctl_add_cmd_options;
+  ctl_context_done;
+  ctl_context_done_command;
+  ctl_context_init;
+  ctl_context_init_command;
+  ctl_default_db;
+  ctl_fatal;
+  ctl_get_db_cmd_usage;
+  ctl_init;
+  ctl_might_write_to_db;
+  ctl_parse_commands;
+  ctl_print_commands;
+  ctl_print_options;
+  ctl_register_commands;
+  ctl_set_column;
+  daemon_become_new_user;
+  daemon_disable_self_confinement;
+  daemon_save_fd;
+  daemon_set_monitor;
+  daemon_set_new_user;
+  daemon_should_self_confine;
+  daemon_usage;
+  daemonize;
+  daemonize_complete;
+  daemonize_start;
+  decrease_rstp_port_timers__;
+  describe_fd;
+  dir_name;
+  dlparse_drvppa;
+  dp_blacklist_provider;
+  dp_enumerate_names;
+  dp_enumerate_types;
+  dp_netdev_actions_create;
+  dp_netdev_flow_get_actions;
+  dp_packet_clone;
+  dp_packet_clone_data;
+  dp_packet_clone_data_with_headroom;
+  dp_packet_clone_with_headroom;
+  dp_packet_init;
+  dp_packet_init_dpdk;
+  dp_packet_new;
+  dp_packet_new_with_headroom;
+  dp_packet_prealloc_headroom;
+  dp_packet_prealloc_tailroom;
+  dp_packet_push;
+  dp_packet_push_uninit;
+  dp_packet_push_zeros;
+  dp_packet_put;
+  dp_packet_put_hex;
+  dp_packet_put_uninit;
+  dp_packet_put_zeros;
+  dp_packet_reserve;
+  dp_packet_reserve_with_tailroom;
+  dp_packet_resize_l2;
+  dp_packet_resize_l2_5;
+  dp_packet_shift;
+  dp_packet_steal_data;
+  dp_packet_uninit;
+  dp_packet_use;
+  dp_packet_use_const;
+  dp_packet_use_stub;
+  dp_parse_name;
+  dp_register_provider;
+  dp_unregister_provider;
+  dpctl_run_command;
+  dpctl_unixctl_register;
+  dpdk_init;
+  dpid_from_string;
+  dpif_base_name;
+  dpif_close;
+  dpif_create;
+  dpif_create_and_open;
+  dpif_delete;
+  dpif_disable_upcall;
+  dpif_dummy_register;
+  dpif_enable_upcall;
+  dpif_execute;
+  dpif_flow_del;
+  dpif_flow_dump_create;
+  dpif_flow_dump_destroy;
+  dpif_flow_dump_next;
+  dpif_flow_dump_thread_create;
+  dpif_flow_dump_thread_destroy;
+  dpif_flow_flush;
+  dpif_flow_get;
+  dpif_flow_hash;
+  dpif_flow_put;
+  dpif_flow_stats_extract;
+  dpif_flow_stats_format;
+  dpif_get_dp_stats;
+  dpif_get_dp_version;
+  dpif_get_netflow_ids;
+  dpif_handlers_set;
+  dpif_init;
+  dpif_is_netdev;
+  dpif_name;
+  dpif_netlink_is_internal_device;
+  dpif_netlink_vport_get;
+  dpif_netlink_vport_init;
+  dpif_netlink_vport_transact;
+  dpif_normalize_type;
+  dpif_open;
+  dpif_operate;
+  dpif_poll_threads_set;
+  dpif_port_add;
+  dpif_port_clone;
+  dpif_port_del;
+  dpif_port_destroy;
+  dpif_port_dump_done;
+  dpif_port_dump_next;
+  dpif_port_dump_start;
+  dpif_port_exists;
+  dpif_port_get_name;
+  dpif_port_get_pid;
+  dpif_port_open_type;
+  dpif_port_poll;
+  dpif_port_poll_wait;
+  dpif_port_query_by_name;
+  dpif_port_query_by_number;
+  dpif_port_set_config;
+  dpif_print_packet;
+  dpif_probe_feature;
+  dpif_queue_to_priority;
+  dpif_recv;
+  dpif_recv_purge;
+  dpif_recv_set;
+  dpif_recv_wait;
+  dpif_register_dp_purge_cb;
+  dpif_register_upcall_cb;
+  dpif_run;
+  dpif_supports_tnl_push_pop;
+  dpif_type;
+  dpif_uninit;
+  dpif_upcall_type_to_string;
+  dpif_wait;
+  drain_fd;
+  drain_rcvbuf;
+  ds_chomp;
+  ds_clear;
+  ds_clone;
+  ds_cstr;
+  ds_cstr_ro;
+  ds_destroy;
+  ds_get_line;
+  ds_get_preprocessed_line;
+  ds_get_test_line;
+  ds_init;
+  ds_last;
+  ds_put_and_free_cstr;
+  ds_put_buffer;
+  ds_put_char__;
+  ds_put_char_multiple;
+  ds_put_cstr;
+  ds_put_format;
+  ds_put_format_valist;
+  ds_put_hex;
+  ds_put_hex_dump;
+  ds_put_printable;
+  ds_put_strftime_msec;
+  ds_put_uninit;
+  ds_put_utf8;
+  ds_reserve;
+  ds_steal_cstr;
+  ds_swap;
+  ds_truncate;
+  dummy_enable;
+  empty_cmap; 
+  english_list_delimiter;
+  epoll_create;
+  epoll_ctl;
+  epoll_wait;
+  eth_addr_from_string;
+  eth_addr_is_reserved;
+  eth_compose;
+  eth_format_masked;
+  eth_from_hex;
+  eth_pop_vlan;
+  eth_push_vlan;
+  fat_rwlock_destroy;
+  fat_rwlock_init;
+  fat_rwlock_rdlock;
+  fat_rwlock_tryrdlock;
+  fat_rwlock_unlock;
+  fat_rwlock_wrlock;
+  fatal_ignore_sigpipe;
+  fatal_signal_add_file_to_unlink;
+  fatal_signal_add_hook;
+  fatal_signal_atexit_handler;
+  fatal_signal_block;
+  fatal_signal_fork;
+  fatal_signal_handler;
+  fatal_signal_init;
+  fatal_signal_remove_file_to_unlink;
+  fatal_signal_run;
+  fatal_signal_unlink_file_now;
+  fatal_signal_wait;
+  field_array_set;
+  flow_compose;
+  flow_count_common_mpls_labels;
+  flow_count_mpls_labels;
+  flow_equal_except;
+  flow_extract;
+  flow_format;
+  flow_get_metadata;
+  flow_hash_5tuple;
+  flow_hash_fields;
+  flow_hash_fields_to_str;
+  flow_hash_fields_valid;
+  flow_hash_in_wildcards;
+  flow_hash_symmetric_l3l4;
+  flow_hash_symmetric_l4;
+  flow_mask_hash_fields;
+  flow_pop_mpls;
+  flow_print;
+  flow_push_mpls;
+  flow_random_hash_fields;
+  flow_segment_u64s;
+  flow_set_dl_vlan;
+  flow_set_mpls_bos;
+  flow_set_mpls_label;
+  flow_set_mpls_lse;
+  flow_set_mpls_tc;
+  flow_set_mpls_ttl;
+  flow_set_vlan_pcp;
+  flow_set_vlan_vid;
+  flow_tnl_dst;
+  flow_tnl_src;
+  flow_to_string;
+  flow_tun_flag_to_string;
+  flow_unwildcard_tp_ports;
+  flow_wc_map;
+  flow_wildcards_and;
+  flow_wildcards_clear_non_packet_fields;
+  flow_wildcards_equal;
+  flow_wildcards_has_extra;
+  flow_wildcards_hash;
+  flow_wildcards_init_catchall;
+  flow_wildcards_init_for_packet;
+  flow_wildcards_is_catchall;
+  flow_wildcards_or;
+  flow_wildcards_set_reg_mask;
+  flow_wildcards_set_xreg_mask;
+  flow_wildcards_set_xxreg_mask;
+  flow_zero_wildcards;
+  follow_symlinks;
+  forbid_forking;
+  format_flags;
+  format_flags_masked;
+  format_odp_actions;
+  free_cacheline;
+  fsync_parent_dir;
+  get_allowed_ofp_versions;
+  get_cpu_usage;
+  get_cwd;
+  get_detach;
+  get_dh1024;
+  get_dh2048;
+  get_dh4096;
+  get_entropy;
+  get_entropy_or_die;
+  get_mtime;
+  get_nvvt_int;
+  get_socket_rcvbuf;
+  get_subprogram_name;
+  get_unix_name_len;
+  gmtime_msec;
+  guarded_list_destroy;
+  guarded_list_init;
+  guarded_list_is_empty;
+  guarded_list_pop_all;
+  guarded_list_pop_front;
+  guarded_list_push_back;
+  guess_netmask;
+  hash_3words;
+  hash_bytes;
+  hash_bytes128;
+  hash_double;
+  hash_words64__;
+  hash_words__;
+  heap_change;
+  heap_clear;
+  heap_destroy;
+  heap_init;
+  heap_insert;
+  heap_raw_insert;
+  heap_raw_remove;
+  heap_rebuild;
+  heap_remove;
+  heap_swap;
+  hexit_value;
+  hexits_value;
+  hindex_clear;
+  hindex_destroy;
+  hindex_expand;
+  hindex_first;
+  hindex_init;
+  hindex_insert;
+  hindex_insert_fast;
+  hindex_moved;
+  hindex_next;
+  hindex_remove;
+  hindex_reserve;
+  hindex_shrink;
+  hindex_swap;
+  hmap_at_position;
+  hmap_clear;
+  hmap_contains;
+  hmap_destroy;
+  hmap_expand_at;
+  hmap_init;
+  hmap_moved;
+  hmap_node_moved;
+  hmap_random_node;
+  hmap_reserve_at;
+  hmap_shrink_at;
+  hmap_swap;
+  hmapx_add;
+  hmapx_add_assert;
+  hmapx_clear;
+  hmapx_clone;
+  hmapx_contains;
+  hmapx_count;
+  hmapx_delete;
+  hmapx_destroy;
+  hmapx_equals;
+  hmapx_find;
+  hmapx_find_and_delete;
+  hmapx_find_and_delete_assert;
+  hmapx_init;
+  hmapx_is_empty;
+  hmapx_moved;
+  hmapx_swap;
+  id_pool_add;
+  id_pool_alloc_id;
+  id_pool_create;
+  id_pool_destroy;
+  id_pool_free_id;
+  if_notifier_create;
+  if_notifier_destroy;
+  if_notifier_run;
+  if_notifier_wait;
+  ignore;
+  ignore_existing_pidfile;
+  inet_open_active;
+  inet_open_passive;
+  inet_parse_active;
+  inet_parse_passive;
+  in6addr_all_hosts;
+  in6addr_exact;
+  ip_count_cidr_bits;
+  ip_format_masked;
+  ip_parse;
+  ip_parse_cidr;
+  ip_parse_cidr_len;
+  ip_parse_masked;
+  ip_parse_masked_len;
+  ipv6_addr_bitand;
+  ipv6_addr_bitxor;
+  ipv6_count_cidr_bits;
+  ipv6_create_mask;
+  ipv6_format_addr;
+  ipv6_format_addr_bracket;
+  ipv6_format_mapped;
+  ipv6_format_masked;
+  ipv6_is_cidr;
+  ipv6_is_zero;
+  ipv6_parse;
+  ipv6_parse_cidr;
+  ipv6_parse_cidr_len;
+  ipv6_parse_masked;
+  ipv6_parse_masked_len;
+  ipv6_string_mapped;
+  is_all_ones;
+  is_all_zeros;
+  is_stdout_a_tty;
+  jhash_bytes;
+  jhash_words;
+  json_array;
+  json_array_add;
+  json_array_create;
+  json_array_create_1;
+  json_array_create_2;
+  json_array_create_3;
+  json_array_create_empty;
+  json_array_trim;
+  json_boolean;
+  json_boolean_create;
+  json_clone;
+  json_destroy;
+  json_equal;
+  json_from_file;
+  json_from_stream;
+  json_from_string;
+  json_hash;
+  json_integer;
+  json_integer_create;
+  json_null_create;
+  json_object;
+  json_object_create;
+  json_object_put;
+  json_object_put_string;
+  json_parser_abort;
+  json_parser_create;
+  json_parser_feed;
+  json_parser_finish;
+  json_parser_is_done;
+  json_real;
+  json_real_create;
+  json_string;
+  json_string_create;
+  json_string_create_nocopy;
+  json_string_escape;
+  json_string_unescape;
+  json_to_ds;
+  json_to_string;
+  json_type_to_string;
+  jsonrpc_close;
+  jsonrpc_create_error;
+  jsonrpc_create_notify;
+  jsonrpc_create_reply;
+  jsonrpc_create_request;
+  jsonrpc_get_backlog;
+  jsonrpc_get_name;
+  jsonrpc_get_received_bytes;
+  jsonrpc_get_status;
+  jsonrpc_msg_destroy;
+  jsonrpc_msg_from_json;
+  jsonrpc_msg_is_valid;
+  jsonrpc_msg_to_json;
+  jsonrpc_msg_type_to_string;
+  jsonrpc_open;
+  jsonrpc_pstream_open;
+  jsonrpc_recv;
+  jsonrpc_recv_block;
+  jsonrpc_recv_wait;
+  jsonrpc_run;
+  jsonrpc_send;
+  jsonrpc_send_block;
+  jsonrpc_session_close;
+  jsonrpc_session_enable_reconnect;
+  jsonrpc_session_force_reconnect;
+  jsonrpc_session_get_backlog;
+  jsonrpc_session_get_last_error;
+  jsonrpc_session_get_name;
+  jsonrpc_session_get_reconnect_stats;
+  jsonrpc_session_get_seqno;
+  jsonrpc_session_get_status;
+  jsonrpc_session_is_alive;
+  jsonrpc_session_is_connected;
+  jsonrpc_session_open;
+  jsonrpc_session_open_unreliably;
+  jsonrpc_session_recv;
+  jsonrpc_session_recv_wait;
+  jsonrpc_session_run;
+  jsonrpc_session_send;
+  jsonrpc_session_set_dscp;
+  jsonrpc_session_set_max_backoff;
+  jsonrpc_session_set_probe_interval;
+  jsonrpc_session_wait;
+  jsonrpc_stream_open;
+  jsonrpc_transact_block;
+  jsonrpc_wait;
+  kstat_handle_close;
+  kstat_handle_init;
+  kstat_handle_update;
+  lacp_configure;
+  lacp_create;
+  lacp_get_slave_stats;
+  lacp_init;
+  lacp_is_active;
+  lacp_process_packet;
+  lacp_ref;
+  lacp_run;
+  lacp_slave_carrier_changed;
+  lacp_slave_is_current;
+  lacp_slave_may_enable;
+  lacp_slave_register;
+  lacp_slave_unregister;
+  lacp_status;
+  lacp_unref;
+  lacp_wait;
+  latch_destroy;
+  latch_init;
+  latch_is_set;
+  latch_poll;
+  latch_set;
+  latch_wait_at;
+  learn_check;
+  learn_execute;
+  learn_format;
+  learn_mask;
+  learn_parse;
+  lldp_configure;
+  lldp_create;
+  lldp_create_dummy;
+  lldp_decode;
+  lldp_destroy_dummy;
+  lldp_init;
+  lldp_process_packet;
+  lldp_put_packet;
+  lldp_ref;
+  lldp_send;
+  lldp_should_process_flow;
+  lldp_should_send_packet;
+  lldp_unref;
+  lldp_wait;
+  lldp_wake_time;
+  lldpd_alloc_hardware;
+  lldpd_alloc_mgmt;
+  lldpd_assign_cfg_to_protocols;
+  lldpd_chassis_cleanup;
+  lldpd_chassis_mgmt_cleanup;
+  lldpd_cleanup;
+  lldpd_config_cleanup;
+  lldpd_get_hardware;
+  lldpd_hardware_cleanup;
+  lldpd_port_cleanup;
+  lldpd_recv;
+  lldpd_remote_cleanup;
+  lldpd_send;
+  localtime_msec;
+  lockfile_lock;
+  lockfile_name;
+  lockfile_postfork;
+  lockfile_unlock;
+  log_backtrace_at;
+  lookup_hostname;
+  lookup_ip;
+  lookup_ipv6;
+  lswitch_create;
+  lswitch_destroy;
+  lswitch_is_alive;
+  lswitch_run;
+  lswitch_wait;
+  mac_entry_age;
+  mac_entry_set_port;
+  mac_learning_create;
+  mac_learning_expire;
+  mac_learning_flush;
+  mac_learning_insert;
+  mac_learning_lookup;
+  mac_learning_may_learn;
+  mac_learning_ref;
+  mac_learning_run;
+  mac_learning_set_flood_vlans;
+  mac_learning_set_idle_time;
+  mac_learning_set_max_entries;
+  mac_learning_unref;
+  mac_learning_wait;
+  make_echo_reply;
+  make_echo_request;
+  make_pidfile_name;
+  make_unix_socket;
+  map_op_create;
+  map_op_datum;
+  map_op_destroy;
+  map_op_list_add;
+  map_op_list_create;
+  map_op_list_destroy;
+  map_op_list_first;
+  map_op_list_next;
+  map_op_type;
+  mask_allowed_ofp_versions;
+  match_equal;
+  match_format;
+  match_has_default_hidden_fields;
+  match_hash;
+  match_init;
+  match_init_catchall;
+  match_init_hidden_fields;
+  match_print;
+  match_set_actset_output;
+  match_set_any_mpls_bos;
+  match_set_any_mpls_label;
+  match_set_any_mpls_lse;
+  match_set_any_mpls_tc;
+  match_set_any_mpls_ttl;
+  match_set_any_pcp;
+  match_set_any_vid;
+  match_set_arp_sha;
+  match_set_arp_sha_masked;
+  match_set_arp_tha;
+  match_set_arp_tha_masked;
+  match_set_conj_id;
+  match_set_ct_label;
+  match_set_ct_label_masked;
+  match_set_ct_mark;
+  match_set_ct_mark_masked;
+  match_set_ct_state;
+  match_set_ct_state_masked;
+  match_set_ct_zone;
+  match_set_dl_dst;
+  match_set_dl_dst_masked;
+  match_set_dl_src;
+  match_set_dl_src_masked;
+  match_set_dl_tci;
+  match_set_dl_tci_masked;
+  match_set_dl_type;
+  match_set_dl_vlan;
+  match_set_dl_vlan_pcp;
+  match_set_dp_hash;
+  match_set_dp_hash_masked;
+  match_set_icmp_code;
+  match_set_icmp_type;
+  match_set_in_port;
+  match_set_ipv6_dst;
+  match_set_ipv6_dst_masked;
+  match_set_ipv6_label;
+  match_set_ipv6_label_masked;
+  match_set_ipv6_src;
+  match_set_ipv6_src_masked;
+  match_set_metadata;
+  match_set_metadata_masked;
+  match_set_mpls_bos;
+  match_set_mpls_label;
+  match_set_mpls_lse;
+  match_set_mpls_tc;
+  match_set_mpls_ttl;
+  match_set_nd_target;
+  match_set_nd_target_masked;
+  match_set_nw_dscp;
+  match_set_nw_dst;
+  match_set_nw_dst_masked;
+  match_set_nw_ecn;
+  match_set_nw_frag;
+  match_set_nw_frag_masked;
+  match_set_nw_proto;
+  match_set_nw_src;
+  match_set_nw_src_masked;
+  match_set_nw_ttl;
+  match_set_pkt_mark;
+  match_set_pkt_mark_masked;
+  match_set_recirc_id;
+  match_set_reg;
+  match_set_reg_masked;
+  match_set_skb_priority;
+  match_set_tcp_flags;
+  match_set_tcp_flags_masked;
+  match_set_tp_dst;
+  match_set_tp_dst_masked;
+  match_set_tp_src;
+  match_set_tp_src_masked;
+  match_set_tun_dst;
+  match_set_tun_dst_masked;
+  match_set_tun_flags;
+  match_set_tun_flags_masked;
+  match_set_tun_gbp_flags;
+  match_set_tun_gbp_flags_masked;
+  match_set_tun_gbp_id;
+  match_set_tun_gbp_id_masked;
+  match_set_tun_id;
+  match_set_tun_id_masked;
+  match_set_tun_ipv6_dst;
+  match_set_tun_ipv6_dst_masked;
+  match_set_tun_ipv6_src;
+  match_set_tun_ipv6_src_masked;
+  match_set_tun_src;
+  match_set_tun_src_masked;
+  match_set_tun_tos;
+  match_set_tun_tos_masked;
+  match_set_tun_ttl;
+  match_set_tun_ttl_masked;
+  match_set_vlan_vid;
+  match_set_vlan_vid_masked;
+  match_set_xreg;
+  match_set_xreg_masked;
+  match_set_xxreg;
+  match_set_xxreg_masked;
+  match_to_string;
+  match_wc_init;
+  match_zero_wildcarded_fields;
+  may_fork;
+  mcast_bundle_age;
+  mcast_mrouter_age;
+  mcast_snooping_add_group;
+  mcast_snooping_add_group4;
+  mcast_snooping_add_mld;
+  mcast_snooping_add_mrouter;
+  mcast_snooping_add_report;
+  mcast_snooping_create;
+  mcast_snooping_enabled;
+  mcast_snooping_flood_unreg;
+  mcast_snooping_flush;
+  mcast_snooping_is_membership;
+  mcast_snooping_is_query;
+  mcast_snooping_leave_group;
+  mcast_snooping_leave_group4;
+  mcast_snooping_lookup;
+  mcast_snooping_lookup4;
+  mcast_snooping_mdb_flush;
+  mcast_snooping_ref;
+  mcast_snooping_run;
+  mcast_snooping_set_flood_unreg;
+  mcast_snooping_set_idle_time;
+  mcast_snooping_set_max_entries;
+  mcast_snooping_set_port_flood;
+  mcast_snooping_set_port_flood_reports;
+  mcast_snooping_unref;
+  mcast_snooping_wait;
+  memory_report;
+  memory_run;
+  memory_should_report;
+  memory_wait;
+  mf_are_prereqs_ok;
+  mf_check_dst;
+  mf_check_src;
+  mf_fields;
+  mf_field_len;
+  mf_format;
+  mf_format_subfield;
+  mf_format_subvalue;
+  mf_from_name;
+  mf_from_nxm_header;
+  mf_get;
+  mf_get_mask;
+  mf_get_subfield;
+  mf_get_value;
+  mf_is_all_wild;
+  mf_is_mask_valid;
+  mf_is_set;
+  mf_is_tun_metadata;
+  mf_is_value_valid;
+  mf_mask_field;
+  mf_mask_field_masked;
+  mf_mask_subfield;
+  mf_nxm_header;
+  mf_parse;
+  mf_parse_subfield;
+  mf_parse_subfield__;
+  mf_parse_value;
+  mf_read_subfield;
+  mf_set;
+  mf_set_flow_value;
+  mf_set_flow_value_masked;
+  mf_set_value;
+  mf_set_wild;
+  mf_subfield_copy;
+  mf_subfield_swap;
+  mf_subvalue_format;
+  mf_subvalue_intersect;
+  mf_subvalue_shift;
+  mf_subvalue_width;
+  mf_write_subfield;
+  mf_write_subfield_flow;
+  mf_write_subfield_value;
+  miniflow_alloc;
+  miniflow_clone;
+  miniflow_create;
+  miniflow_equal;
+  miniflow_equal_flow_in_minimask;
+  miniflow_equal_in_minimask;
+  miniflow_expand;
+  miniflow_extract;
+  miniflow_hash_5tuple;
+  miniflow_init;
+  miniflow_map_init;
+  minimask_combine;
+  minimask_create;
+  minimask_equal;
+  minimask_expand;
+  minimask_has_extra;
+  minimask_init;
+  minimatch_clone;
+  minimatch_destroy;
+  minimatch_equal;
+  minimatch_expand;
+  minimatch_format;
+  minimatch_init;
+  minimatch_matches_flow;
+  minimatch_move;
+  minimatch_to_string;
+  move_rstp__;
+  multipath_check;
+  multipath_execute;
+  multipath_format;
+  multipath_parse;
+  netdev_add_router;
+  netdev_arp_lookup;
+  netdev_build_header;
+  netdev_close;
+  netdev_configure_uplink;
+  netdev_create_impl_etherstub;
+  netdev_delete_impl_etherstub;
+  netdev_delete_queue;
+  netdev_dummy_register;
+  netdev_dump_queue_stats;
+  netdev_enumerate_types;
+  netdev_features_is_full_duplex;
+  netdev_features_to_bps;
+  netdev_from_name;
+  netdev_geneve_build_header;
+  netdev_geneve_pop_header;
+  netdev_get_addr_list;
+  netdev_get_addrs;
+  netdev_get_addrs_list_flush;
+  netdev_get_carrier;
+  netdev_get_carrier_resets;
+  netdev_get_change_seq;
+  netdev_get_class;
+  netdev_get_config;
+  netdev_get_devices;
+  netdev_get_etheraddr;
+  netdev_get_features;
+  netdev_get_flags;
+  netdev_get_ifindex;
+  netdev_get_in4_by_name;
+  netdev_get_mtu;
+  netdev_get_n_queues;
+  netdev_get_name;
+  netdev_get_next_hop;
+  netdev_get_numa_id;
+  netdev_get_qos;
+  netdev_get_qos_capabilities;
+  netdev_get_qos_types;
+  netdev_get_queue;
+  netdev_get_queue_stats;
+  netdev_get_stats;
+  netdev_get_status;
+  netdev_get_tunnel_config;
+  netdev_get_type;
+  netdev_get_type_from_name;
+  netdev_get_vports;
+  netdev_gre_pop_header;
+  netdev_gre_push_header;
+  netdev_impl_etherstub_exists;
+  netdev_init_tnl_build_header_params;
+  netdev_is_pmd;
+  netdev_is_reconf_required;
+  netdev_is_reserved_name;
+  netdev_mtu_is_user_config;
+  netdev_mtu_user_config;
+  netdev_n_rxq;
+  netdev_n_txq;
+  netdev_open;
+  netdev_parse_name;
+  netdev_pop_header;
+  netdev_push_header;
+  netdev_queue_dump_done;
+  netdev_queue_dump_next;
+  netdev_queue_dump_start;
+  netdev_reconfigure;
+  netdev_ref;
+  netdev_register_provider;
+  netdev_remove;
+  netdev_restore_flags;
+  netdev_run;
+  netdev_rxq_close;
+  netdev_rxq_drain;
+  netdev_rxq_get_name;
+  netdev_rxq_get_netdev;
+  netdev_rxq_get_queue_id;
+  netdev_rxq_open;
+  netdev_rxq_recv;
+  netdev_rxq_wait;
+  netdev_send;
+  netdev_send_wait;
+  netdev_set_advertisements;
+  netdev_set_config;
+  netdev_set_etheraddr;
+  netdev_set_flags;
+  netdev_set_in4;
+  netdev_set_miimon_interval;
+  netdev_set_mtu;
+  netdev_set_policing;
+  netdev_set_qos;
+  netdev_set_queue;
+  netdev_set_tx_multiq;
+  netdev_tnl_egress_port_range;
+  netdev_tnl_ip_build_header;
+  netdev_tnl_ip_extract_tnl_md;
+  netdev_tnl_push_ip_header;
+  netdev_tnl_push_udp_header;
+  netdev_turn_flags_off;
+  netdev_turn_flags_on;
+  netdev_unregister_provider;
+  netdev_vport_class_get_dpif_port;
+  netdev_vport_construct;
+  netdev_vport_get_dpif_port;
+  netdev_vport_inc_rx;
+  netdev_vport_inc_tx;
+  netdev_vport_is_layer3;
+  netdev_vport_is_patch;
+  netdev_vport_is_vport_class;
+  netdev_vport_patch_peer;
+  netdev_vport_patch_register;
+  netdev_vport_tunnel_register;
+  netdev_vxlan_build_header;
+  netdev_vxlan_pop_header;
+  netdev_wait;
+  netdev_wait_reconf_required;
+  new_fd_pstream;
+  new_fd_stream;
+  nl_attr_find;
+  nl_attr_find__;
+  nl_attr_find_nested;
+  nl_attr_get;
+  nl_attr_get_be16;
+  nl_attr_get_be32;
+  nl_attr_get_be64;
+  nl_attr_get_flag;
+  nl_attr_get_in6_addr;
+  nl_attr_get_nested;
+  nl_attr_get_odp_port;
+  nl_attr_get_size;
+  nl_attr_get_string;
+  nl_attr_get_u16;
+  nl_attr_get_u32;
+  nl_attr_get_u64;
+  nl_attr_get_u8;
+  nl_attr_get_unspec;
+  nl_attr_oversized;
+  nl_attr_type;
+  nl_attr_validate;
+  nl_dump_done;
+  nl_dump_next;
+  nl_dump_start;
+  nl_lookup_genl_family;
+  nl_lookup_genl_mcgroup;
+  nl_msg_end_nested;
+  nl_msg_genlmsghdr;
+  nl_msg_next;
+  nl_msg_nlmsgerr;
+  nl_msg_nlmsghdr;
+  nl_msg_push;
+  nl_msg_push_be16;
+  nl_msg_push_be32;
+  nl_msg_push_be64;
+  nl_msg_push_flag;
+  nl_msg_push_string;
+  nl_msg_push_u16;
+  nl_msg_push_u32;
+  nl_msg_push_u64;
+  nl_msg_push_u8;
+  nl_msg_push_uninit;
+  nl_msg_push_unspec;
+  nl_msg_push_unspec_uninit;
+  nl_msg_put;
+  nl_msg_put_be16;
+  nl_msg_put_be32;
+  nl_msg_put_be64;
+  nl_msg_put_flag;
+  nl_msg_put_genlmsghdr;
+  nl_msg_put_in6_addr;
+  nl_msg_put_nested;
+  nl_msg_put_nlmsghdr;
+  nl_msg_put_odp_port;
+  nl_msg_put_string;
+  nl_msg_put_string__;
+  nl_msg_put_u16;
+  nl_msg_put_u32;
+  nl_msg_put_u64;
+  nl_msg_put_u8;
+  nl_msg_put_uninit;
+  nl_msg_put_unspec;
+  nl_msg_put_unspec_uninit;
+  nl_msg_put_unspec_zero;
+  nl_msg_reserve;
+  nl_msg_start_nested;
+  nl_parse_nested;
+  nl_policy_parse;
+  nl_sock_clone;
+  nl_sock_create;
+  nl_sock_destroy;
+  nl_sock_drain;
+  nl_sock_fd;
+  nl_sock_join_mcgroup;
+  nl_sock_leave_mcgroup;
+  nl_sock_pid;
+  nl_sock_recv;
+  nl_sock_send;
+  nl_sock_send_seq;
+  nl_sock_wait;
+  nl_transact;
+  nl_transact_multiple;
+  nln_create;
+  nln_destroy;
+  nln_notifier_create;
+  nln_notifier_destroy;
+  nln_run;
+  nln_wait;
+  nullable_string_is_equal;
+  nullable_xstrdup;
+  nx_format_field_name;
+  nx_match_from_string;
+  nx_match_to_string;
+  nx_pull_entry;
+  nx_pull_header;
+  nx_pull_match;
+  nx_pull_match_loose;
+  nx_put_entry;
+  nx_put_header;
+  nx_put_match;
+  nxm_execute_stack_pop;
+  nxm_execute_stack_push;
+  nxm_format_reg_move;
+  nxm_format_stack_pop;
+  nxm_format_stack_push;
+  nxm_parse_reg_move;
+  nxm_parse_stack_action;
+  nxm_put__;
+  nxm_reg_load;
+  nxm_reg_move_check;
+  nxm_stack_pop_check;
+  nxm_stack_push_check;
+  object_collection_add;
+  object_collection_destroy;
+  object_collection_detach;
+  object_collection_init;
+  object_collection_move;
+  object_collection_remove;
+  odp_actions_from_string;
+  odp_execute_actions;
+  odp_flow_format;
+  odp_flow_from_string;
+  odp_flow_key_format;
+  odp_flow_key_from_flow;
+  odp_flow_key_from_mask;
+  odp_flow_key_hash;
+  odp_flow_key_to_flow;
+  odp_flow_key_to_flow_udpif;
+  odp_flow_key_to_mask;
+  odp_flow_key_to_mask_udpif;
+  odp_format_ufid;
+  odp_key_fitness_to_string;
+  odp_key_from_pkt_metadata;
+  odp_key_to_pkt_metadata;
+  odp_portno_names_destroy;
+  odp_portno_names_set;
+  odp_put_tnl_push_action;
+  odp_put_tunnel_action;
+  odp_put_userspace_action;
+  odp_tun_key_from_attr;
+  odp_ufid_from_string;
+  ofp10_match_print;
+  ofp10_match_to_string;
+  ofp_packet_to_string;
+  ofp_print;
+  ofp_print_flow_stats;
+  ofp_print_packet;
+  ofp_print_table_features;
+  ofp_print_version;
+  ofp_to_string;
+  ofp_version_usage;
+  ofpact_bitmap_format;
+  ofpact_bitmap_from_openflow;
+  ofpact_bitmap_to_openflow;
+  ofpact_check_output_port;
+  ofpact_dummy_enable;
+  ofpact_finish;
+  ofpact_get_mf_dst;
+  ofpact_init;
+  ofpact_name;
+  ofpact_next_flattened;
+  ofpact_put;
+  ofpact_put_reg_load;
+  ofpact_put_reg_load2;
+  ofpact_put_set_field;
+  ofpacts_check;
+  ofpacts_check_consistency;
+  ofpacts_equal;
+  ofpacts_execute_action_set;
+  ofpacts_format;
+  ofpacts_get_meter;
+  ofpacts_output_to_group;
+  ofpacts_output_to_port;
+  ofpacts_parse_actions;
+  ofpacts_parse_instructions;
+  ofpacts_pull_openflow_actions;
+  ofpacts_pull_openflow_instructions;
+  ofpacts_put_openflow_actions;
+  ofpacts_put_openflow_instructions;
+  ofpbuf_clone;
+  ofpbuf_clone_data;
+  ofpbuf_clone_data_with_headroom;
+  ofpbuf_clone_with_headroom;
+  ofpbuf_init;
+  ofpbuf_list_delete;
+  ofpbuf_new;
+  ofpbuf_new_with_headroom;
+  ofpbuf_padto;
+  ofpbuf_prealloc_headroom;
+  ofpbuf_prealloc_tailroom;
+  ofpbuf_push;
+  ofpbuf_push_uninit;
+  ofpbuf_push_zeros;
+  ofpbuf_put;
+  ofpbuf_put_hex;
+  ofpbuf_put_uninit;
+  ofpbuf_put_zeros;
+  ofpbuf_reinit;
+  ofpbuf_reserve;
+  ofpbuf_shift;
+  ofpbuf_steal_data;
+  ofpbuf_to_string;
+  ofpbuf_trim;
+  ofpbuf_uninit;
+  ofpbuf_use_const;
+  ofpbuf_use_ds;
+  ofpbuf_use_stack;
+  ofpbuf_use_stub;
+  ofperr_decode_msg;
+  ofperr_domain_get_name;
+  ofperr_encode_hello;
+  ofperr_encode_reply;
+  ofperr_from_name;
+  ofperr_get_code;
+  ofperr_get_description;
+  ofperr_get_name;
+  ofperr_get_type;
+  ofperr_get_vendor;
+  ofperr_is_valid;
+  ofperr_to_string;
+  ofphdrs_len;
+  ofpmp_append;
+  ofpmp_decode_raw;
+  ofpmp_flags;
+  ofpmp_init;
+  ofpmp_more;
+  ofpmp_postappend;
+  ofpmp_reserve;
+  ofpmp_version;
+  ofpmsg_body;
+  ofpmsg_is_stat_request;
+  ofpmsg_update_length;
+  ofpprop_end;
+  ofpprop_parse_be16;
+  ofpprop_parse_be32;
+  ofpprop_parse_be64;
+  ofpprop_parse_nested;
+  ofpprop_parse_u16;
+  ofpprop_parse_u32;
+  ofpprop_parse_u64;
+  ofpprop_parse_u8;
+  ofpprop_parse_uuid;
+  ofpprop_pull;
+  ofpprop_pull__;
+  ofpprop_put;
+  ofpprop_put_be16;
+  ofpprop_put_be32;
+  ofpprop_put_be64;
+  ofpprop_put_bitmap;
+  ofpprop_put_flag;
+  ofpprop_put_nested;
+  ofpprop_put_u16;
+  ofpprop_put_u32;
+  ofpprop_put_u64;
+  ofpprop_put_u8;
+  ofpprop_put_uuid;
+  ofpprop_put_zeros;
+  ofpprop_start;
+  ofpprop_start_nested;
+  ofpprop_unknown;
+  ofpraw_alloc;
+  ofpraw_alloc_reply;
+  ofpraw_alloc_stats_reply;
+  ofpraw_alloc_xid;
+  ofpraw_decode;
+  ofpraw_decode_assert;
+  ofpraw_decode_partial;
+  ofpraw_get_name;
+  ofpraw_pull;
+  ofpraw_pull_assert;
+  ofpraw_put;
+  ofpraw_put_reply;
+  ofpraw_put_stats_reply;
+  ofpraw_put_xid;
+  ofpraw_stats_request_to_reply;
+  ofptype_decode;
+  ofptype_from_ofpraw;
+  ofptype_get_name;
+  ofptype_pull;
+  ofputil_append_flow_monitor_request;
+  ofputil_append_flow_stats_reply;
+  ofputil_append_flow_update;
+  ofputil_append_group_desc_reply;
+  ofputil_append_group_stats;
+  ofputil_append_ipfix_stat;
+  ofputil_append_meter_config;
+  ofputil_append_meter_stats;
+  ofputil_append_port_desc_stats_reply;
+  ofputil_append_port_stat;
+  ofputil_append_queue_get_config_reply;
+  ofputil_append_queue_stat;
+  ofputil_append_table_desc_reply;
+  ofputil_append_table_features_reply;
+  ofputil_append_table_stats_reply;
+  ofputil_async_cfg_default;
+  ofputil_async_msg_type_to_string;
+  ofputil_bucket_check_duplicate_id;
+  ofputil_bucket_clone_list;
+  ofputil_bucket_find;
+  ofputil_bucket_list_back;
+  ofputil_bucket_list_destroy;
+  ofputil_bucket_list_front;
+  ofputil_count_ipfix_stats;
+  ofputil_count_port_stats;
+  ofputil_count_queue_stats;
+  ofputil_decode_aggregate_stats_reply;
+  ofputil_decode_bundle_add;
+  ofputil_decode_bundle_ctrl;
+  ofputil_decode_flow_mod;
+  ofputil_decode_flow_monitor_cancel;
+  ofputil_decode_flow_monitor_request;
+  ofputil_decode_flow_removed;
+  ofputil_decode_flow_stats_reply;
+  ofputil_decode_flow_stats_request;
+  ofputil_decode_flow_update;
+  ofputil_decode_get_config_reply;
+  ofputil_decode_group_desc_reply;
+  ofputil_decode_group_desc_request;
+  ofputil_decode_group_features_reply;
+  ofputil_decode_group_mod;
+  ofputil_decode_group_stats_reply;
+  ofputil_decode_group_stats_request;
+  ofputil_decode_hello;
+  ofputil_decode_meter_config;
+  ofputil_decode_meter_features;
+  ofputil_decode_meter_mod;
+  ofputil_decode_meter_request;
+  ofputil_decode_meter_stats;
+  ofputil_decode_packet_in;
+  ofputil_decode_packet_in_private;
+  ofputil_decode_packet_out;
+  ofputil_decode_port_desc_stats_request;
+  ofputil_decode_port_mod;
+  ofputil_decode_port_stats;
+  ofputil_decode_port_stats_request;
+  ofputil_decode_port_status;
+  ofputil_decode_queue_get_config_request;
+  ofputil_decode_queue_stats;
+  ofputil_decode_queue_stats_request;
+  ofputil_decode_requestforward;
+  ofputil_decode_role_message;
+  ofputil_decode_role_status;
+  ofputil_decode_set_async_config;
+  ofputil_decode_set_config;
+  ofputil_decode_table_desc;
+  ofputil_decode_table_features;
+  ofputil_decode_table_mod;
+  ofputil_decode_table_stats_reply;
+  ofputil_decode_table_status;
+  ofputil_decode_tlv_table_mod;
+  ofputil_decode_tlv_table_reply;
+  ofputil_destroy_requestforward;
+  ofputil_dl_type_from_openflow;
+  ofputil_dl_type_to_openflow;
+  ofputil_encode_aggregate_stats_reply;
+  ofputil_encode_barrier_request;
+  ofputil_encode_bundle_add;
+  ofputil_encode_bundle_ctrl_reply;
+  ofputil_encode_bundle_ctrl_request;
+  ofputil_encode_bundle_msgs;
+  ofputil_encode_dump_ports_request;
+  ofputil_encode_flow_mod;
+  ofputil_encode_flow_monitor_cancel;
+  ofputil_encode_flow_removed;
+  ofputil_encode_flow_stats_request;
+  ofputil_encode_get_async_reply;
+  ofputil_encode_get_config_reply;
+  ofputil_encode_group_desc_request;
+  ofputil_encode_group_features_reply;
+  ofputil_encode_group_features_request;
+  ofputil_encode_group_mod;
+  ofputil_encode_group_stats_request;
+  ofputil_encode_hello;
+  ofputil_encode_meter_features_reply;
+  ofputil_encode_meter_mod;
+  ofputil_encode_meter_request;
+  ofputil_encode_nx_set_flow_format;
+  ofputil_encode_packet_in_private;
+  ofputil_encode_packet_out;
+  ofputil_encode_port_desc_stats_request;
+  ofputil_encode_port_mod;
+  ofputil_encode_port_status;
+  ofputil_encode_queue_get_config_request;
+  ofputil_encode_queue_stats_request;
+  ofputil_encode_requestforward;
+  ofputil_encode_resume;
+  ofputil_encode_role_reply;
+  ofputil_encode_role_status;
+  ofputil_encode_set_async_config;
+  ofputil_encode_set_config;
+  ofputil_encode_set_protocol;
+  ofputil_encode_switch_features;
+  ofputil_encode_table_desc_request;
+  ofputil_encode_table_features_request;
+  ofputil_encode_table_mod;
+  ofputil_encode_table_stats_reply;
+  ofputil_encode_table_status;
+  ofputil_encode_tlv_table_mod;
+  ofputil_encode_tlv_table_reply;
+  ofputil_flow_dump_protocols;
+  ofputil_format_group;
+  ofputil_format_port;
+  ofputil_format_version;
+  ofputil_format_version_bitmap;
+  ofputil_format_version_bitmap_names;
+  ofputil_format_version_name;
+  ofputil_frag_handling_from_string;
+  ofputil_frag_handling_to_string;
+  ofputil_group_from_string;
+  ofputil_group_properties_copy;
+  ofputil_group_properties_destroy;
+  ofputil_group_to_string;
+  ofputil_make_flow_mod_table_id;
+  ofputil_make_set_packet_in_format;
+  ofputil_match_from_ofp10_match;
+  ofputil_match_from_ofp11_match;
+  ofputil_match_to_ofp10_match;
+  ofputil_match_to_ofp11_match;
+  ofputil_match_typical_len;
+  ofputil_netmask_to_wcbits;
+  ofputil_normalize_match;
+  ofputil_normalize_match_quiet;
+  ofputil_nx_flow_format_is_valid;
+  ofputil_nx_flow_format_to_protocol;
+  ofputil_nx_flow_format_to_string;
+  ofputil_n_flow_dump_protocols;
+  ofputil_packet_in_format_from_string;
+  ofputil_packet_in_format_is_valid;
+  ofputil_packet_in_format_to_string;
+  ofputil_packet_in_private_destroy;
+  ofputil_packet_in_reason_from_string;
+  ofputil_packet_in_reason_to_string;
+  ofputil_parse_key_value;
+  ofputil_port_from_ofp11;
+  ofputil_port_from_string;
+  ofputil_port_to_ofp11;
+  ofputil_port_to_string;
+  ofputil_protocol_from_ofp_version;
+  ofputil_protocol_is_valid;
+  ofputil_protocol_set_base;
+  ofputil_protocol_set_tid;
+  ofputil_protocol_to_base;
+  ofputil_protocol_to_ofp_version;
+  ofputil_protocol_to_string;
+  ofputil_protocols_from_ofp_version;
+  ofputil_protocols_from_string;
+  ofputil_protocols_from_version_bitmap;
+  ofputil_protocols_to_string;
+  ofputil_protocols_to_version_bitmap;
+  ofputil_pull_ipfix_stats;
+  ofputil_pull_ofp11_match;
+  ofputil_pull_phy_port;
+  ofputil_pull_queue_get_config_reply;
+  ofputil_pull_switch_features;
+  ofputil_put_ofp11_match;
+  ofputil_put_switch_features_port;
+  ofputil_start_flow_update;
+  ofputil_start_queue_get_config_reply;
+  ofputil_switch_features_has_ports;
+  ofputil_uninit_group_desc;
+  ofputil_uninit_group_mod;
+  ofputil_uninit_tlv_table;
+  ofputil_version_from_string;
+  ofputil_version_to_string;
+  ofputil_versions_from_string;
+  ofputil_versions_from_strings;
+  ofputil_wcbits_to_netmask;
+  ofputil_wildcard_from_ofpfw10;
+  out_of_memory;
+  ovs_abort;
+  ovs_abort_valist;
+  ovs_assert_failure;
+  ovs_barrier_block;
+  ovs_barrier_destroy;
+  ovs_barrier_init;
+  ovs_bindir;
+  ovs_cmdl_long_options_to_short_options;
+  ovs_cmdl_print_commands;
+  ovs_cmdl_print_options;
+  ovs_cmdl_proctitle_init;
+  ovs_cmdl_proctitle_restore;
+  ovs_cmdl_proctitle_set;
+  ovs_cmdl_run_command;
+  ovs_cmdl_run_command_read_only;
+  ovs_dbdir;
+  ovs_error;
+  ovs_error_valist;
+  ovs_fatal;
+  ovs_fatal_valist;
+  ovs_get_program_name;
+  ovs_get_program_version;
+  ovs_hex_dump;
+  ovs_instruction_name_from_type;
+  ovs_instruction_type_from_inst_type;
+  ovs_instruction_type_from_name;
+  ovs_instruction_type_from_ofpact_type;
+  ovs_logdir;
+  ovs_mutex_cond_wait;
+  ovs_mutex_destroy;
+  ovs_mutex_init;
+  ovs_mutex_init_adaptive;
+  ovs_mutex_init_recursive;
+  ovs_mutex_lock_at;
+  ovs_mutex_trylock_at;
+  ovs_mutex_unlock;
+  ovs_numa_core_id_is_valid;
+  ovs_numa_core_is_pinned;
+  ovs_numa_dump_cores_on_numa;
+  ovs_numa_dump_destroy;
+  ovs_numa_get_n_cores;
+  ovs_numa_get_n_cores_on_numa;
+  ovs_numa_get_n_numas;
+  ovs_numa_get_n_unpinned_cores_on_numa;
+  ovs_numa_get_numa_id;
+  ovs_numa_get_unpinned_core_any;
+  ovs_numa_get_unpinned_core_on_numa;
+  ovs_numa_init;
+  ovs_numa_numa_id_is_valid;
+  ovs_numa_set_cpu_mask;
+  ovs_numa_set_dummy;
+  ovs_numa_thread_setaffinity_core;
+  ovs_numa_try_pin_core_specific;
+  ovs_numa_unpin_core;
+  ovs_pcap_open;
+  ovs_pcap_read;
+  ovs_pcap_read_header;
+  ovs_pcap_write;
+  ovs_pcap_write_header;
+  ovs_pkgdatadir;
+  ovs_print_version;
+  ovs_retval_to_string;
+  ovs_router_flush;
+  ovs_router_init;
+  ovs_router_insert;
+  ovs_router_lookup;
+  ovs_rundir;
+  ovs_rwlock_destroy;
+  ovs_rwlock_init;
+  ovs_rwlock_rdlock_at;
+  ovs_rwlock_tryrdlock_at;
+  ovs_rwlock_trywrlock_at;
+  ovs_rwlock_unlock;
+  ovs_rwlock_wrlock_at;
+  ovs_scan;
+  ovs_scan_len;
+  ovs_set_program_name;
+  ovs_strerror;
+  ovs_strlcpy;
+  ovs_strzcpy;
+  ovs_sysconfdir;
+  ovs_thread_create;
+  ovs_thread_stats_next_bucket;
+  ovsdb_atom_check_constraints;
+  ovsdb_atom_clone;
+  ovsdb_atom_compare_3way;
+  ovsdb_atom_default;
+  ovsdb_atom_from_json;
+  ovsdb_atom_from_string;
+  ovsdb_atom_hash;
+  ovsdb_atom_init_default;
+  ovsdb_atom_is_default;
+  ovsdb_atom_swap;
+  ovsdb_atom_to_bare;
+  ovsdb_atom_to_json;
+  ovsdb_atom_to_string;
+  ovsdb_atomic_type_from_json;
+  ovsdb_atomic_type_from_string;
+  ovsdb_atomic_type_to_json;
+  ovsdb_atomic_type_to_string;
+  ovsdb_base_type_clear_constraints;
+  ovsdb_base_type_clone;
+  ovsdb_base_type_destroy;
+  ovsdb_base_type_from_json;
+  ovsdb_base_type_get_enum_type;
+  ovsdb_base_type_has_constraints;
+  ovsdb_base_type_init;
+  ovsdb_base_type_is_valid;
+  ovsdb_base_type_to_json;
+  ovsdb_datum_add_unsafe;
+  ovsdb_datum_apply_diff;
+  ovsdb_datum_check_constraints;
+  ovsdb_datum_clone;
+  ovsdb_datum_compare_3way;
+  ovsdb_datum_default;
+  ovsdb_datum_destroy;
+  ovsdb_datum_diff;
+  ovsdb_datum_equals;
+  ovsdb_datum_excludes_all;
+  ovsdb_datum_find_key;
+  ovsdb_datum_find_key_value;
+  ovsdb_datum_from_json;
+  ovsdb_datum_from_smap;
+  ovsdb_datum_from_string;
+  ovsdb_datum_hash;
+  ovsdb_datum_includes_all;
+  ovsdb_datum_init_default;
+  ovsdb_datum_init_empty;
+  ovsdb_datum_is_default;
+  ovsdb_datum_remove_unsafe;
+  ovsdb_datum_sort;
+  ovsdb_datum_sort_assert;
+  ovsdb_datum_sort_unique;
+  ovsdb_datum_subtract;
+  ovsdb_datum_swap;
+  ovsdb_datum_to_bare;
+  ovsdb_datum_to_json;
+  ovsdb_datum_to_string;
+  ovsdb_datum_union;
+  ovsdb_error;
+  ovsdb_error_assert;
+  ovsdb_error_clone;
+  ovsdb_error_destroy;
+  ovsdb_error_get_tag;
+  ovsdb_error_to_json;
+  ovsdb_error_to_string;
+  ovsdb_function_from_string;
+  ovsdb_function_to_string;
+  ovsdb_idl_add_column;
+  ovsdb_idl_add_table;
+  ovsdb_idl_condition_add_clause;
+  ovsdb_idl_condition_remove_clause;
+  ovsdb_idl_condition_reset;
+  ovsdb_idl_create;
+  ovsdb_idl_destroy;
+  ovsdb_idl_enable_reconnect;
+  ovsdb_idl_first_row;
+  ovsdb_idl_force_reconnect;
+  ovsdb_idl_get;
+  ovsdb_idl_get_initial_snapshot;
+  ovsdb_idl_get_last_error;
+  ovsdb_idl_get_row_arc;
+  ovsdb_idl_get_row_for_uuid;
+  ovsdb_idl_get_seqno;
+  ovsdb_idl_has_ever_connected;
+  ovsdb_idl_has_lock;
+  ovsdb_idl_is_alive;
+  ovsdb_idl_is_lock_contended;
+  ovsdb_idl_is_mutable;
+  ovsdb_idl_loop_commit_and_wait;
+  ovsdb_idl_loop_destroy;
+  ovsdb_idl_loop_run;
+  ovsdb_idl_next_row;
+  ovsdb_idl_omit;
+  ovsdb_idl_omit_alert;
+  ovsdb_idl_read;
+  ovsdb_idl_row_get_seqno;
+  ovsdb_idl_row_is_synthetic;
+  ovsdb_idl_run;
+  ovsdb_idl_set_lock;
+  ovsdb_idl_set_probe_interval;
+  ovsdb_idl_set_remote;
+  ovsdb_idl_table_get_seqno;
+  ovsdb_idl_track_add_all;
+  ovsdb_idl_track_add_column;
+  ovsdb_idl_track_clear;
+  ovsdb_idl_track_get_first;
+  ovsdb_idl_track_get_next;
+  ovsdb_idl_track_is_updated;
+  ovsdb_idl_txn_abort;
+  ovsdb_idl_txn_add_comment;
+  ovsdb_idl_txn_commit;
+  ovsdb_idl_txn_commit_block;
+  ovsdb_idl_txn_create;
+  ovsdb_idl_txn_delete;
+  ovsdb_idl_txn_delete_partial_map;
+  ovsdb_idl_txn_delete_partial_set;
+  ovsdb_idl_txn_destroy;
+  ovsdb_idl_txn_get;
+  ovsdb_idl_txn_get_error;
+  ovsdb_idl_txn_get_idl;
+  ovsdb_idl_txn_get_increment_new_value;
+  ovsdb_idl_txn_get_insert_uuid;
+  ovsdb_idl_txn_increment;
+  ovsdb_idl_txn_insert;
+  ovsdb_idl_txn_set_dry_run;
+  ovsdb_idl_txn_status_to_string;
+  ovsdb_idl_txn_verify;
+  ovsdb_idl_txn_wait;
+  ovsdb_idl_txn_write;
+  ovsdb_idl_txn_write_clone;
+  ovsdb_idl_txn_write_partial_map;
+  ovsdb_idl_txn_write_partial_set;
+  ovsdb_idl_verify_write_only;
+  ovsdb_idl_wait;
+  ovsdb_internal_error;
+  ovsdb_io_error;
+  ovsdb_parser_destroy;
+  ovsdb_parser_finish;
+  ovsdb_parser_get_error;
+  ovsdb_parser_has_error;
+  ovsdb_parser_init;
+  ovsdb_parser_is_id;
+  ovsdb_parser_member;
+  ovsdb_parser_raise_error;
+  ovsdb_symbol_table_create;
+  ovsdb_symbol_table_destroy;
+  ovsdb_symbol_table_get;
+  ovsdb_symbol_table_insert;
+  ovsdb_symbol_table_put;
+  ovsdb_syntax_error;
+  ovsdb_token_is_delim;
+  ovsdb_token_parse;
+  ovsdb_transient_datum_from_json;
+  ovsdb_type_clone;
+  ovsdb_type_destroy;
+  ovsdb_type_from_json;
+  ovsdb_type_is_valid;
+  ovsdb_type_to_english;
+  ovsdb_type_to_json;
+  ovsdb_type_uuid;
+  ovsdb_wrap_error;
+  ovsinst_bitmap_from_openflow;
+  ovsinst_bitmap_to_openflow;
+  ovsrcu_is_quiescent;
+  ovsrcu_postpone__;
+  ovsrcu_quiesce;
+  ovsrcu_quiesce_end;
+  ovsrcu_quiesce_start;
+  ovsrcu_synchronize;
+  ovsrcu_try_quiesce;
+  ovsrec_autoattach_add_clause_false;
+  ovsrec_autoattach_add_clause_mappings;
+  ovsrec_autoattach_add_clause_system_description;
+  ovsrec_autoattach_add_clause_system_name;
+  ovsrec_autoattach_add_clause_true;
+  ovsrec_autoattach_columns;
+  ovsrec_autoattach_delete;
+  ovsrec_autoattach_first;
+  ovsrec_autoattach_get_for_uuid;
+  ovsrec_autoattach_get_mappings;
+  ovsrec_autoattach_get_seqno;
+  ovsrec_autoattach_get_system_description;
+  ovsrec_autoattach_get_system_name;
+  ovsrec_autoattach_init;
+  ovsrec_autoattach_insert;
+  ovsrec_autoattach_is_updated;
+  ovsrec_autoattach_next;
+  ovsrec_autoattach_remove_clause_false;
+  ovsrec_autoattach_remove_clause_mappings;
+  ovsrec_autoattach_remove_clause_system_description;
+  ovsrec_autoattach_remove_clause_system_name;
+  ovsrec_autoattach_remove_clause_true;
+  ovsrec_autoattach_row_get_seqno;
+  ovsrec_autoattach_set_mappings;
+  ovsrec_autoattach_set_system_description;
+  ovsrec_autoattach_set_system_name;
+  ovsrec_autoattach_track_get_first;
+  ovsrec_autoattach_track_get_next;
+  ovsrec_autoattach_update_mappings_delkey;
+  ovsrec_autoattach_update_mappings_setkey;
+  ovsrec_autoattach_verify_mappings;
+  ovsrec_autoattach_verify_system_description;
+  ovsrec_autoattach_verify_system_name;
+  ovsrec_bridge_add_clause_auto_attach;
+  ovsrec_bridge_add_clause_controller;
+  ovsrec_bridge_add_clause_datapath_id;
+  ovsrec_bridge_add_clause_datapath_type;
+  ovsrec_bridge_add_clause_datapath_version;
+  ovsrec_bridge_add_clause_external_ids;
+  ovsrec_bridge_add_clause_fail_mode;
+  ovsrec_bridge_add_clause_false;
+  ovsrec_bridge_add_clause_flood_vlans;
+  ovsrec_bridge_add_clause_flow_tables;
+  ovsrec_bridge_add_clause_ipfix;
+  ovsrec_bridge_add_clause_mcast_snooping_enable;
+  ovsrec_bridge_add_clause_mirrors;
+  ovsrec_bridge_add_clause_name;
+  ovsrec_bridge_add_clause_netflow;
+  ovsrec_bridge_add_clause_other_config;
+  ovsrec_bridge_add_clause_ports;
+  ovsrec_bridge_add_clause_protocols;
+  ovsrec_bridge_add_clause_rstp_enable;
+  ovsrec_bridge_add_clause_rstp_status;
+  ovsrec_bridge_add_clause_sflow;
+  ovsrec_bridge_add_clause_status;
+  ovsrec_bridge_add_clause_stp_enable;
+  ovsrec_bridge_add_clause_true;
+  ovsrec_bridge_columns;
+  ovsrec_bridge_delete;
+  ovsrec_bridge_first;
+  ovsrec_bridge_get_auto_attach;
+  ovsrec_bridge_get_controller;
+  ovsrec_bridge_get_datapath_id;
+  ovsrec_bridge_get_datapath_type;
+  ovsrec_bridge_get_datapath_version;
+  ovsrec_bridge_get_external_ids;
+  ovsrec_bridge_get_fail_mode;
+  ovsrec_bridge_get_flood_vlans;
+  ovsrec_bridge_get_flow_tables;
+  ovsrec_bridge_get_for_uuid;
+  ovsrec_bridge_get_ipfix;
+  ovsrec_bridge_get_mcast_snooping_enable;
+  ovsrec_bridge_get_mirrors;
+  ovsrec_bridge_get_name;
+  ovsrec_bridge_get_netflow;
+  ovsrec_bridge_get_other_config;
+  ovsrec_bridge_get_ports;
+  ovsrec_bridge_get_protocols;
+  ovsrec_bridge_get_rstp_enable;
+  ovsrec_bridge_get_rstp_status;
+  ovsrec_bridge_get_seqno;
+  ovsrec_bridge_get_sflow;
+  ovsrec_bridge_get_status;
+  ovsrec_bridge_get_stp_enable;
+  ovsrec_bridge_init;
+  ovsrec_bridge_insert;
+  ovsrec_bridge_is_updated;
+  ovsrec_bridge_next;
+  ovsrec_bridge_remove_clause_auto_attach;
+  ovsrec_bridge_remove_clause_controller;
+  ovsrec_bridge_remove_clause_datapath_id;
+  ovsrec_bridge_remove_clause_datapath_type;
+  ovsrec_bridge_remove_clause_datapath_version;
+  ovsrec_bridge_remove_clause_external_ids;
+  ovsrec_bridge_remove_clause_fail_mode;
+  ovsrec_bridge_remove_clause_false;
+  ovsrec_bridge_remove_clause_flood_vlans;
+  ovsrec_bridge_remove_clause_flow_tables;
+  ovsrec_bridge_remove_clause_ipfix;
+  ovsrec_bridge_remove_clause_mcast_snooping_enable;
+  ovsrec_bridge_remove_clause_mirrors;
+  ovsrec_bridge_remove_clause_name;
+  ovsrec_bridge_remove_clause_netflow;
+  ovsrec_bridge_remove_clause_other_config;
+  ovsrec_bridge_remove_clause_ports;
+  ovsrec_bridge_remove_clause_protocols;
+  ovsrec_bridge_remove_clause_rstp_enable;
+  ovsrec_bridge_remove_clause_rstp_status;
+  ovsrec_bridge_remove_clause_sflow;
+  ovsrec_bridge_remove_clause_status;
+  ovsrec_bridge_remove_clause_stp_enable;
+  ovsrec_bridge_remove_clause_true;
+  ovsrec_bridge_row_get_seqno;
+  ovsrec_bridge_set_auto_attach;
+  ovsrec_bridge_set_controller;
+  ovsrec_bridge_set_datapath_id;
+  ovsrec_bridge_set_datapath_type;
+  ovsrec_bridge_set_datapath_version;
+  ovsrec_bridge_set_external_ids;
+  ovsrec_bridge_set_fail_mode;
+  ovsrec_bridge_set_flood_vlans;
+  ovsrec_bridge_set_flow_tables;
+  ovsrec_bridge_set_ipfix;
+  ovsrec_bridge_set_mcast_snooping_enable;
+  ovsrec_bridge_set_mirrors;
+  ovsrec_bridge_set_name;
+  ovsrec_bridge_set_netflow;
+  ovsrec_bridge_set_other_config;
+  ovsrec_bridge_set_ports;
+  ovsrec_bridge_set_protocols;
+  ovsrec_bridge_set_rstp_enable;
+  ovsrec_bridge_set_rstp_status;
+  ovsrec_bridge_set_sflow;
+  ovsrec_bridge_set_status;
+  ovsrec_bridge_set_stp_enable;
+  ovsrec_bridge_track_get_first;
+  ovsrec_bridge_track_get_next;
+  ovsrec_bridge_update_auto_attach_addvalue;
+  ovsrec_bridge_update_auto_attach_delvalue;
+  ovsrec_bridge_update_controller_addvalue;
+  ovsrec_bridge_update_controller_delvalue;
+  ovsrec_bridge_update_datapath_id_addvalue;
+  ovsrec_bridge_update_datapath_id_delvalue;
+  ovsrec_bridge_update_external_ids_delkey;
+  ovsrec_bridge_update_external_ids_setkey;
+  ovsrec_bridge_update_fail_mode_addvalue;
+  ovsrec_bridge_update_fail_mode_delvalue;
+  ovsrec_bridge_update_flood_vlans_addvalue;
+  ovsrec_bridge_update_flood_vlans_delvalue;
+  ovsrec_bridge_update_flow_tables_delkey;
+  ovsrec_bridge_update_flow_tables_setkey;
+  ovsrec_bridge_update_ipfix_addvalue;
+  ovsrec_bridge_update_ipfix_delvalue;
+  ovsrec_bridge_update_mirrors_addvalue;
+  ovsrec_bridge_update_mirrors_delvalue;
+  ovsrec_bridge_update_netflow_addvalue;
+  ovsrec_bridge_update_netflow_delvalue;
+  ovsrec_bridge_update_other_config_delkey;
+  ovsrec_bridge_update_other_config_setkey;
+  ovsrec_bridge_update_ports_addvalue;
+  ovsrec_bridge_update_ports_delvalue;
+  ovsrec_bridge_update_protocols_addvalue;
+  ovsrec_bridge_update_protocols_delvalue;
+  ovsrec_bridge_update_rstp_status_delkey;
+  ovsrec_bridge_update_rstp_status_setkey;
+  ovsrec_bridge_update_sflow_addvalue;
+  ovsrec_bridge_update_sflow_delvalue;
+  ovsrec_bridge_update_status_delkey;
+  ovsrec_bridge_update_status_setkey;
+  ovsrec_bridge_verify_auto_attach;
+  ovsrec_bridge_verify_controller;
+  ovsrec_bridge_verify_datapath_id;
+  ovsrec_bridge_verify_datapath_type;
+  ovsrec_bridge_verify_datapath_version;
+  ovsrec_bridge_verify_external_ids;
+  ovsrec_bridge_verify_fail_mode;
+  ovsrec_bridge_verify_flood_vlans;
+  ovsrec_bridge_verify_flow_tables;
+  ovsrec_bridge_verify_ipfix;
+  ovsrec_bridge_verify_mcast_snooping_enable;
+  ovsrec_bridge_verify_mirrors;
+  ovsrec_bridge_verify_name;
+  ovsrec_bridge_verify_netflow;
+  ovsrec_bridge_verify_other_config;
+  ovsrec_bridge_verify_ports;
+  ovsrec_bridge_verify_protocols;
+  ovsrec_bridge_verify_rstp_enable;
+  ovsrec_bridge_verify_rstp_status;
+  ovsrec_bridge_verify_sflow;
+  ovsrec_bridge_verify_status;
+  ovsrec_bridge_verify_stp_enable;
+  ovsrec_controller_add_clause_connection_mode;
+  ovsrec_controller_add_clause_controller_burst_limit;
+  ovsrec_controller_add_clause_controller_rate_limit;
+  ovsrec_controller_add_clause_enable_async_messages;
+  ovsrec_controller_add_clause_external_ids;
+  ovsrec_controller_add_clause_false;
+  ovsrec_controller_add_clause_inactivity_probe;
+  ovsrec_controller_add_clause_is_connected;
+  ovsrec_controller_add_clause_local_gateway;
+  ovsrec_controller_add_clause_local_ip;
+  ovsrec_controller_add_clause_local_netmask;
+  ovsrec_controller_add_clause_max_backoff;
+  ovsrec_controller_add_clause_other_config;
+  ovsrec_controller_add_clause_role;
+  ovsrec_controller_add_clause_status;
+  ovsrec_controller_add_clause_target;
+  ovsrec_controller_add_clause_true;
+  ovsrec_controller_columns;
+  ovsrec_controller_delete;
+  ovsrec_controller_first;
+  ovsrec_controller_get_connection_mode;
+  ovsrec_controller_get_controller_burst_limit;
+  ovsrec_controller_get_controller_rate_limit;
+  ovsrec_controller_get_enable_async_messages;
+  ovsrec_controller_get_external_ids;
+  ovsrec_controller_get_for_uuid;
+  ovsrec_controller_get_inactivity_probe;
+  ovsrec_controller_get_is_connected;
+  ovsrec_controller_get_local_gateway;
+  ovsrec_controller_get_local_ip;
+  ovsrec_controller_get_local_netmask;
+  ovsrec_controller_get_max_backoff;
+  ovsrec_controller_get_other_config;
+  ovsrec_controller_get_role;
+  ovsrec_controller_get_seqno;
+  ovsrec_controller_get_status;
+  ovsrec_controller_get_target;
+  ovsrec_controller_init;
+  ovsrec_controller_insert;
+  ovsrec_controller_is_updated;
+  ovsrec_controller_next;
+  ovsrec_controller_remove_clause_connection_mode;
+  ovsrec_controller_remove_clause_controller_burst_limit;
+  ovsrec_controller_remove_clause_controller_rate_limit;
+  ovsrec_controller_remove_clause_enable_async_messages;
+  ovsrec_controller_remove_clause_external_ids;
+  ovsrec_controller_remove_clause_false;
+  ovsrec_controller_remove_clause_inactivity_probe;
+  ovsrec_controller_remove_clause_is_connected;
+  ovsrec_controller_remove_clause_local_gateway;
+  ovsrec_controller_remove_clause_local_ip;
+  ovsrec_controller_remove_clause_local_netmask;
+  ovsrec_controller_remove_clause_max_backoff;
+  ovsrec_controller_remove_clause_other_config;
+  ovsrec_controller_remove_clause_role;
+  ovsrec_controller_remove_clause_status;
+  ovsrec_controller_remove_clause_target;
+  ovsrec_controller_remove_clause_true;
+  ovsrec_controller_row_get_seqno;
+  ovsrec_controller_set_connection_mode;
+  ovsrec_controller_set_controller_burst_limit;
+  ovsrec_controller_set_controller_rate_limit;
+  ovsrec_controller_set_enable_async_messages;
+  ovsrec_controller_set_external_ids;
+  ovsrec_controller_set_inactivity_probe;
+  ovsrec_controller_set_is_connected;
+  ovsrec_controller_set_local_gateway;
+  ovsrec_controller_set_local_ip;
+  ovsrec_controller_set_local_netmask;
+  ovsrec_controller_set_max_backoff;
+  ovsrec_controller_set_other_config;
+  ovsrec_controller_set_role;
+  ovsrec_controller_set_status;
+  ovsrec_controller_set_target;
+  ovsrec_controller_track_get_first;
+  ovsrec_controller_track_get_next;
+  ovsrec_controller_update_connection_mode_addvalue;
+  ovsrec_controller_update_connection_mode_delvalue;
+  ovsrec_controller_update_controller_burst_limit_addvalue;
+  ovsrec_controller_update_controller_burst_limit_delvalue;
+  ovsrec_controller_update_controller_rate_limit_addvalue;
+  ovsrec_controller_update_controller_rate_limit_delvalue;
+  ovsrec_controller_update_enable_async_messages_addvalue;
+  ovsrec_controller_update_enable_async_messages_delvalue;
+  ovsrec_controller_update_external_ids_delkey;
+  ovsrec_controller_update_external_ids_setkey;
+  ovsrec_controller_update_inactivity_probe_addvalue;
+  ovsrec_controller_update_inactivity_probe_delvalue;
+  ovsrec_controller_update_local_gateway_addvalue;
+  ovsrec_controller_update_local_gateway_delvalue;
+  ovsrec_controller_update_local_ip_addvalue;
+  ovsrec_controller_update_local_ip_delvalue;
+  ovsrec_controller_update_local_netmask_addvalue;
+  ovsrec_controller_update_local_netmask_delvalue;
+  ovsrec_controller_update_max_backoff_addvalue;
+  ovsrec_controller_update_max_backoff_delvalue;
+  ovsrec_controller_update_other_config_delkey;
+  ovsrec_controller_update_other_config_setkey;
+  ovsrec_controller_update_role_addvalue;
+  ovsrec_controller_update_role_delvalue;
+  ovsrec_controller_update_status_delkey;
+  ovsrec_controller_update_status_setkey;
+  ovsrec_controller_verify_connection_mode;
+  ovsrec_controller_verify_controller_burst_limit;
+  ovsrec_controller_verify_controller_rate_limit;
+  ovsrec_controller_verify_enable_async_messages;
+  ovsrec_controller_verify_external_ids;
+  ovsrec_controller_verify_inactivity_probe;
+  ovsrec_controller_verify_is_connected;
+  ovsrec_controller_verify_local_gateway;
+  ovsrec_controller_verify_local_ip;
+  ovsrec_controller_verify_local_netmask;
+  ovsrec_controller_verify_max_backoff;
+  ovsrec_controller_verify_other_config;
+  ovsrec_controller_verify_role;
+  ovsrec_controller_verify_status;
+  ovsrec_controller_verify_target;
+  ovsrec_flow_sample_collector_set_add_clause_bridge;
+  ovsrec_flow_sample_collector_set_add_clause_external_ids;
+  ovsrec_flow_sample_collector_set_add_clause_false;
+  ovsrec_flow_sample_collector_set_add_clause_id;
+  ovsrec_flow_sample_collector_set_add_clause_ipfix;
+  ovsrec_flow_sample_collector_set_add_clause_true;
+  ovsrec_flow_sample_collector_set_columns;
+  ovsrec_flow_sample_collector_set_delete;
+  ovsrec_flow_sample_collector_set_first;
+  ovsrec_flow_sample_collector_set_get_bridge;
+  ovsrec_flow_sample_collector_set_get_external_ids;
+  ovsrec_flow_sample_collector_set_get_for_uuid;
+  ovsrec_flow_sample_collector_set_get_id;
+  ovsrec_flow_sample_collector_set_get_ipfix;
+  ovsrec_flow_sample_collector_set_get_seqno;
+  ovsrec_flow_sample_collector_set_init;
+  ovsrec_flow_sample_collector_set_insert;
+  ovsrec_flow_sample_collector_set_is_updated;
+  ovsrec_flow_sample_collector_set_next;
+  ovsrec_flow_sample_collector_set_remove_clause_bridge;
+  ovsrec_flow_sample_collector_set_remove_clause_external_ids;
+  ovsrec_flow_sample_collector_set_remove_clause_false;
+  ovsrec_flow_sample_collector_set_remove_clause_id;
+  ovsrec_flow_sample_collector_set_remove_clause_ipfix;
+  ovsrec_flow_sample_collector_set_remove_clause_true;
+  ovsrec_flow_sample_collector_set_row_get_seqno;
+  ovsrec_flow_sample_collector_set_set_bridge;
+  ovsrec_flow_sample_collector_set_set_external_ids;
+  ovsrec_flow_sample_collector_set_set_id;
+  ovsrec_flow_sample_collector_set_set_ipfix;
+  ovsrec_flow_sample_collector_set_track_get_first;
+  ovsrec_flow_sample_collector_set_track_get_next;
+  ovsrec_flow_sample_collector_set_update_external_ids_delkey;
+  ovsrec_flow_sample_collector_set_update_external_ids_setkey;
+  ovsrec_flow_sample_collector_set_update_ipfix_addvalue;
+  ovsrec_flow_sample_collector_set_update_ipfix_delvalue;
+  ovsrec_flow_sample_collector_set_verify_bridge;
+  ovsrec_flow_sample_collector_set_verify_external_ids;
+  ovsrec_flow_sample_collector_set_verify_id;
+  ovsrec_flow_sample_collector_set_verify_ipfix;
+  ovsrec_flow_table_add_clause_external_ids;
+  ovsrec_flow_table_add_clause_false;
+  ovsrec_flow_table_add_clause_flow_limit;
+  ovsrec_flow_table_add_clause_groups;
+  ovsrec_flow_table_add_clause_name;
+  ovsrec_flow_table_add_clause_overflow_policy;
+  ovsrec_flow_table_add_clause_prefixes;
+  ovsrec_flow_table_add_clause_true;
+  ovsrec_flow_table_columns;
+  ovsrec_flow_table_delete;
+  ovsrec_flow_table_first;
+  ovsrec_flow_table_get_external_ids;
+  ovsrec_flow_table_get_flow_limit;
+  ovsrec_flow_table_get_for_uuid;
+  ovsrec_flow_table_get_groups;
+  ovsrec_flow_table_get_name;
+  ovsrec_flow_table_get_overflow_policy;
+  ovsrec_flow_table_get_prefixes;
+  ovsrec_flow_table_get_seqno;
+  ovsrec_flow_table_init;
+  ovsrec_flow_table_insert;
+  ovsrec_flow_table_is_updated;
+  ovsrec_flow_table_next;
+  ovsrec_flow_table_remove_clause_external_ids;
+  ovsrec_flow_table_remove_clause_false;
+  ovsrec_flow_table_remove_clause_flow_limit;
+  ovsrec_flow_table_remove_clause_groups;
+  ovsrec_flow_table_remove_clause_name;
+  ovsrec_flow_table_remove_clause_overflow_policy;
+  ovsrec_flow_table_remove_clause_prefixes;
+  ovsrec_flow_table_remove_clause_true;
+  ovsrec_flow_table_row_get_seqno;
+  ovsrec_flow_table_set_external_ids;
+  ovsrec_flow_table_set_flow_limit;
+  ovsrec_flow_table_set_groups;
+  ovsrec_flow_table_set_name;
+  ovsrec_flow_table_set_overflow_policy;
+  ovsrec_flow_table_set_prefixes;
+  ovsrec_flow_table_track_get_first;
+  ovsrec_flow_table_track_get_next;
+  ovsrec_flow_table_update_external_ids_delkey;
+  ovsrec_flow_table_update_external_ids_setkey;
+  ovsrec_flow_table_update_flow_limit_addvalue;
+  ovsrec_flow_table_update_flow_limit_delvalue;
+  ovsrec_flow_table_update_groups_addvalue;
+  ovsrec_flow_table_update_groups_delvalue;
+  ovsrec_flow_table_update_name_addvalue;
+  ovsrec_flow_table_update_name_delvalue;
+  ovsrec_flow_table_update_overflow_policy_addvalue;
+  ovsrec_flow_table_update_overflow_policy_delvalue;
+  ovsrec_flow_table_update_prefixes_addvalue;
+  ovsrec_flow_table_update_prefixes_delvalue;
+  ovsrec_flow_table_verify_external_ids;
+  ovsrec_flow_table_verify_flow_limit;
+  ovsrec_flow_table_verify_groups;
+  ovsrec_flow_table_verify_name;
+  ovsrec_flow_table_verify_overflow_policy;
+  ovsrec_flow_table_verify_prefixes;
+  ovsrec_get_db_version;
+  ovsrec_idl_class;
+  ovsrec_init;
+  ovsrec_interface_add_clause_admin_state;
+  ovsrec_interface_add_clause_bfd;
+  ovsrec_interface_add_clause_bfd_status;
+  ovsrec_interface_add_clause_cfm_fault;
+  ovsrec_interface_add_clause_cfm_fault_status;
+  ovsrec_interface_add_clause_cfm_flap_count;
+  ovsrec_interface_add_clause_cfm_health;
+  ovsrec_interface_add_clause_cfm_mpid;
+  ovsrec_interface_add_clause_cfm_remote_mpids;
+  ovsrec_interface_add_clause_cfm_remote_opstate;
+  ovsrec_interface_add_clause_duplex;
+  ovsrec_interface_add_clause_error;
+  ovsrec_interface_add_clause_external_ids;
+  ovsrec_interface_add_clause_false;
+  ovsrec_interface_add_clause_ifindex;
+  ovsrec_interface_add_clause_ingress_policing_burst;
+  ovsrec_interface_add_clause_ingress_policing_rate;
+  ovsrec_interface_add_clause_lacp_current;
+  ovsrec_interface_add_clause_link_resets;
+  ovsrec_interface_add_clause_link_speed;
+  ovsrec_interface_add_clause_link_state;
+  ovsrec_interface_add_clause_lldp;
+  ovsrec_interface_add_clause_mac;
+  ovsrec_interface_add_clause_mac_in_use;
+  ovsrec_interface_add_clause_mtu;
+  ovsrec_interface_add_clause_mtu_request;
+  ovsrec_interface_add_clause_name;
+  ovsrec_interface_add_clause_ofport;
+  ovsrec_interface_add_clause_ofport_request;
+  ovsrec_interface_add_clause_options;
+  ovsrec_interface_add_clause_other_config;
+  ovsrec_interface_add_clause_statistics;
+  ovsrec_interface_add_clause_status;
+  ovsrec_interface_add_clause_true;
+  ovsrec_interface_add_clause_type;
+  ovsrec_interface_columns;
+  ovsrec_interface_delete;
+  ovsrec_interface_first;
+  ovsrec_interface_get_admin_state;
+  ovsrec_interface_get_bfd;
+  ovsrec_interface_get_bfd_status;
+  ovsrec_interface_get_cfm_fault;
+  ovsrec_interface_get_cfm_fault_status;
+  ovsrec_interface_get_cfm_flap_count;
+  ovsrec_interface_get_cfm_health;
+  ovsrec_interface_get_cfm_mpid;
+  ovsrec_interface_get_cfm_remote_mpids;
+  ovsrec_interface_get_cfm_remote_opstate;
+  ovsrec_interface_get_duplex;
+  ovsrec_interface_get_error;
+  ovsrec_interface_get_external_ids;
+  ovsrec_interface_get_for_uuid;
+  ovsrec_interface_get_ifindex;
+  ovsrec_interface_get_ingress_policing_burst;
+  ovsrec_interface_get_ingress_policing_rate;
+  ovsrec_interface_get_lacp_current;
+  ovsrec_interface_get_link_resets;
+  ovsrec_interface_get_link_speed;
+  ovsrec_interface_get_link_state;
+  ovsrec_interface_get_lldp;
+  ovsrec_interface_get_mac;
+  ovsrec_interface_get_mac_in_use;
+  ovsrec_interface_get_mtu;
+  ovsrec_interface_get_mtu_request;
+  ovsrec_interface_get_name;
+  ovsrec_interface_get_ofport;
+  ovsrec_interface_get_ofport_request;
+  ovsrec_interface_get_options;
+  ovsrec_interface_get_other_config;
+  ovsrec_interface_get_seqno;
+  ovsrec_interface_get_statistics;
+  ovsrec_interface_get_status;
+  ovsrec_interface_get_type;
+  ovsrec_interface_init;
+  ovsrec_interface_insert;
+  ovsrec_interface_is_updated;
+  ovsrec_interface_next;
+  ovsrec_interface_remove_clause_admin_state;
+  ovsrec_interface_remove_clause_bfd;
+  ovsrec_interface_remove_clause_bfd_status;
+  ovsrec_interface_remove_clause_cfm_fault;
+  ovsrec_interface_remove_clause_cfm_fault_status;
+  ovsrec_interface_remove_clause_cfm_flap_count;
+  ovsrec_interface_remove_clause_cfm_health;
+  ovsrec_interface_remove_clause_cfm_mpid;
+  ovsrec_interface_remove_clause_cfm_remote_mpids;
+  ovsrec_interface_remove_clause_cfm_remote_opstate;
+  ovsrec_interface_remove_clause_duplex;
+  ovsrec_interface_remove_clause_error;
+  ovsrec_interface_remove_clause_external_ids;
+  ovsrec_interface_remove_clause_false;
+  ovsrec_interface_remove_clause_ifindex;
+  ovsrec_interface_remove_clause_ingress_policing_burst;
+  ovsrec_interface_remove_clause_ingress_policing_rate;
+  ovsrec_interface_remove_clause_lacp_current;
+  ovsrec_interface_remove_clause_link_resets;
+  ovsrec_interface_remove_clause_link_speed;
+  ovsrec_interface_remove_clause_link_state;
+  ovsrec_interface_remove_clause_lldp;
+  ovsrec_interface_remove_clause_mac;
+  ovsrec_interface_remove_clause_mac_in_use;
+  ovsrec_interface_remove_clause_mtu;
+  ovsrec_interface_remove_clause_mtu_request;
+  ovsrec_interface_remove_clause_name;
+  ovsrec_interface_remove_clause_ofport;
+  ovsrec_interface_remove_clause_ofport_request;
+  ovsrec_interface_remove_clause_options;
+  ovsrec_interface_remove_clause_other_config;
+  ovsrec_interface_remove_clause_statistics;
+  ovsrec_interface_remove_clause_status;
+  ovsrec_interface_remove_clause_true;
+  ovsrec_interface_remove_clause_type;
+  ovsrec_interface_row_get_seqno;
+  ovsrec_interface_set_admin_state;
+  ovsrec_interface_set_bfd;
+  ovsrec_interface_set_bfd_status;
+  ovsrec_interface_set_cfm_fault;
+  ovsrec_interface_set_cfm_fault_status;
+  ovsrec_interface_set_cfm_flap_count;
+  ovsrec_interface_set_cfm_health;
+  ovsrec_interface_set_cfm_mpid;
+  ovsrec_interface_set_cfm_remote_mpids;
+  ovsrec_interface_set_cfm_remote_opstate;
+  ovsrec_interface_set_duplex;
+  ovsrec_interface_set_error;
+  ovsrec_interface_set_external_ids;
+  ovsrec_interface_set_ifindex;
+  ovsrec_interface_set_ingress_policing_burst;
+  ovsrec_interface_set_ingress_policing_rate;
+  ovsrec_interface_set_lacp_current;
+  ovsrec_interface_set_link_resets;
+  ovsrec_interface_set_link_speed;
+  ovsrec_interface_set_link_state;
+  ovsrec_interface_set_lldp;
+  ovsrec_interface_set_mac;
+  ovsrec_interface_set_mac_in_use;
+  ovsrec_interface_set_mtu;
+  ovsrec_interface_set_mtu_request;
+  ovsrec_interface_set_name;
+  ovsrec_interface_set_ofport;
+  ovsrec_interface_set_ofport_request;
+  ovsrec_interface_set_options;
+  ovsrec_interface_set_other_config;
+  ovsrec_interface_set_statistics;
+  ovsrec_interface_set_status;
+  ovsrec_interface_set_type;
+  ovsrec_interface_track_get_first;
+  ovsrec_interface_track_get_next;
+  ovsrec_interface_update_admin_state_addvalue;
+  ovsrec_interface_update_admin_state_delvalue;
+  ovsrec_interface_update_bfd_delkey;
+  ovsrec_interface_update_bfd_setkey;
+  ovsrec_interface_update_bfd_status_delkey;
+  ovsrec_interface_update_bfd_status_setkey;
+  ovsrec_interface_update_cfm_fault_addvalue;
+  ovsrec_interface_update_cfm_fault_delvalue;
+  ovsrec_interface_update_cfm_fault_status_addvalue;
+  ovsrec_interface_update_cfm_fault_status_delvalue;
+  ovsrec_interface_update_cfm_flap_count_addvalue;
+  ovsrec_interface_update_cfm_flap_count_delvalue;
+  ovsrec_interface_update_cfm_health_addvalue;
+  ovsrec_interface_update_cfm_health_delvalue;
+  ovsrec_interface_update_cfm_mpid_addvalue;
+  ovsrec_interface_update_cfm_mpid_delvalue;
+  ovsrec_interface_update_cfm_remote_mpids_addvalue;
+  ovsrec_interface_update_cfm_remote_mpids_delvalue;
+  ovsrec_interface_update_cfm_remote_opstate_addvalue;
+  ovsrec_interface_update_cfm_remote_opstate_delvalue;
+  ovsrec_interface_update_duplex_addvalue;
+  ovsrec_interface_update_duplex_delvalue;
+  ovsrec_interface_update_error_addvalue;
+  ovsrec_interface_update_error_delvalue;
+  ovsrec_interface_update_external_ids_delkey;
+  ovsrec_interface_update_external_ids_setkey;
+  ovsrec_interface_update_ifindex_addvalue;
+  ovsrec_interface_update_ifindex_delvalue;
+  ovsrec_interface_update_lacp_current_addvalue;
+  ovsrec_interface_update_lacp_current_delvalue;
+  ovsrec_interface_update_link_resets_addvalue;
+  ovsrec_interface_update_link_resets_delvalue;
+  ovsrec_interface_update_link_speed_addvalue;
+  ovsrec_interface_update_link_speed_delvalue;
+  ovsrec_interface_update_link_state_addvalue;
+  ovsrec_interface_update_link_state_delvalue;
+  ovsrec_interface_update_lldp_delkey;
+  ovsrec_interface_update_lldp_setkey;
+  ovsrec_interface_update_mac_addvalue;
+  ovsrec_interface_update_mac_delvalue;
+  ovsrec_interface_update_mac_in_use_addvalue;
+  ovsrec_interface_update_mac_in_use_delvalue;
+  ovsrec_interface_update_mtu_addvalue;
+  ovsrec_interface_update_mtu_delvalue;
+  ovsrec_interface_update_mtu_request_addvalue;
+  ovsrec_interface_update_mtu_request_delvalue;
+  ovsrec_interface_update_ofport_addvalue;
+  ovsrec_interface_update_ofport_delvalue;
+  ovsrec_interface_update_ofport_request_addvalue;
+  ovsrec_interface_update_ofport_request_delvalue;
+  ovsrec_interface_update_options_delkey;
+  ovsrec_interface_update_options_setkey;
+  ovsrec_interface_update_other_config_delkey;
+  ovsrec_interface_update_other_config_setkey;
+  ovsrec_interface_update_statistics_delkey;
+  ovsrec_interface_update_statistics_setkey;
+  ovsrec_interface_update_status_delkey;
+  ovsrec_interface_update_status_setkey;
+  ovsrec_interface_verify_admin_state;
+  ovsrec_interface_verify_bfd;
+  ovsrec_interface_verify_bfd_status;
+  ovsrec_interface_verify_cfm_fault;
+  ovsrec_interface_verify_cfm_fault_status;
+  ovsrec_interface_verify_cfm_flap_count;
+  ovsrec_interface_verify_cfm_health;
+  ovsrec_interface_verify_cfm_mpid;
+  ovsrec_interface_verify_cfm_remote_mpids;
+  ovsrec_interface_verify_cfm_remote_opstate;
+  ovsrec_interface_verify_duplex;
+  ovsrec_interface_verify_error;
+  ovsrec_interface_verify_external_ids;
+  ovsrec_interface_verify_ifindex;
+  ovsrec_interface_verify_ingress_policing_burst;
+  ovsrec_interface_verify_ingress_policing_rate;
+  ovsrec_interface_verify_lacp_current;
+  ovsrec_interface_verify_link_resets;
+  ovsrec_interface_verify_link_speed;
+  ovsrec_interface_verify_link_state;
+  ovsrec_interface_verify_lldp;
+  ovsrec_interface_verify_mac;
+  ovsrec_interface_verify_mac_in_use;
+  ovsrec_interface_verify_mtu;
+  ovsrec_interface_verify_mtu_request;
+  ovsrec_interface_verify_name;
+  ovsrec_interface_verify_ofport;
+  ovsrec_interface_verify_ofport_request;
+  ovsrec_interface_verify_options;
+  ovsrec_interface_verify_other_config;
+  ovsrec_interface_verify_statistics;
+  ovsrec_interface_verify_status;
+  ovsrec_interface_verify_type;
+  ovsrec_ipfix_add_clause_cache_active_timeout;
+  ovsrec_ipfix_add_clause_cache_max_flows;
+  ovsrec_ipfix_add_clause_external_ids;
+  ovsrec_ipfix_add_clause_false;
+  ovsrec_ipfix_add_clause_obs_domain_id;
+  ovsrec_ipfix_add_clause_obs_point_id;
+  ovsrec_ipfix_add_clause_other_config;
+  ovsrec_ipfix_add_clause_sampling;
+  ovsrec_ipfix_add_clause_targets;
+  ovsrec_ipfix_add_clause_true;
+  ovsrec_ipfix_columns;
+  ovsrec_ipfix_delete;
+  ovsrec_ipfix_first;
+  ovsrec_ipfix_get_cache_active_timeout;
+  ovsrec_ipfix_get_cache_max_flows;
+  ovsrec_ipfix_get_external_ids;
+  ovsrec_ipfix_get_for_uuid;
+  ovsrec_ipfix_get_obs_domain_id;
+  ovsrec_ipfix_get_obs_point_id;
+  ovsrec_ipfix_get_other_config;
+  ovsrec_ipfix_get_sampling;
+  ovsrec_ipfix_get_seqno;
+  ovsrec_ipfix_get_targets;
+  ovsrec_ipfix_init;
+  ovsrec_ipfix_insert;
+  ovsrec_ipfix_is_updated;
+  ovsrec_ipfix_next;
+  ovsrec_ipfix_remove_clause_cache_active_timeout;
+  ovsrec_ipfix_remove_clause_cache_max_flows;
+  ovsrec_ipfix_remove_clause_external_ids;
+  ovsrec_ipfix_remove_clause_false;
+  ovsrec_ipfix_remove_clause_obs_domain_id;
+  ovsrec_ipfix_remove_clause_obs_point_id;
+  ovsrec_ipfix_remove_clause_other_config;
+  ovsrec_ipfix_remove_clause_sampling;
+  ovsrec_ipfix_remove_clause_targets;
+  ovsrec_ipfix_remove_clause_true;
+  ovsrec_ipfix_row_get_seqno;
+  ovsrec_ipfix_set_cache_active_timeout;
+  ovsrec_ipfix_set_cache_max_flows;
+  ovsrec_ipfix_set_external_ids;
+  ovsrec_ipfix_set_obs_domain_id;
+  ovsrec_ipfix_set_obs_point_id;
+  ovsrec_ipfix_set_other_config;
+  ovsrec_ipfix_set_sampling;
+  ovsrec_ipfix_set_targets;
+  ovsrec_ipfix_track_get_first;
+  ovsrec_ipfix_track_get_next;
+  ovsrec_ipfix_update_cache_active_timeout_addvalue;
+  ovsrec_ipfix_update_cache_active_timeout_delvalue;
+  ovsrec_ipfix_update_cache_max_flows_addvalue;
+  ovsrec_ipfix_update_cache_max_flows_delvalue;
+  ovsrec_ipfix_update_external_ids_delkey;
+  ovsrec_ipfix_update_external_ids_setkey;
+  ovsrec_ipfix_update_obs_domain_id_addvalue;
+  ovsrec_ipfix_update_obs_domain_id_delvalue;
+  ovsrec_ipfix_update_obs_point_id_addvalue;
+  ovsrec_ipfix_update_obs_point_id_delvalue;
+  ovsrec_ipfix_update_other_config_delkey;
+  ovsrec_ipfix_update_other_config_setkey;
+  ovsrec_ipfix_update_sampling_addvalue;
+  ovsrec_ipfix_update_sampling_delvalue;
+  ovsrec_ipfix_update_targets_addvalue;
+  ovsrec_ipfix_update_targets_delvalue;
+  ovsrec_ipfix_verify_cache_active_timeout;
+  ovsrec_ipfix_verify_cache_max_flows;
+  ovsrec_ipfix_verify_external_ids;
+  ovsrec_ipfix_verify_obs_domain_id;
+  ovsrec_ipfix_verify_obs_point_id;
+  ovsrec_ipfix_verify_other_config;
+  ovsrec_ipfix_verify_sampling;
+  ovsrec_ipfix_verify_targets;
+  ovsrec_manager_add_clause_connection_mode;
+  ovsrec_manager_add_clause_external_ids;
+  ovsrec_manager_add_clause_false;
+  ovsrec_manager_add_clause_inactivity_probe;
+  ovsrec_manager_add_clause_is_connected;
+  ovsrec_manager_add_clause_max_backoff;
+  ovsrec_manager_add_clause_other_config;
+  ovsrec_manager_add_clause_status;
+  ovsrec_manager_add_clause_target;
+  ovsrec_manager_add_clause_true;
+  ovsrec_manager_columns;
+  ovsrec_manager_delete;
+  ovsrec_manager_first;
+  ovsrec_manager_get_connection_mode;
+  ovsrec_manager_get_external_ids;
+  ovsrec_manager_get_for_uuid;
+  ovsrec_manager_get_inactivity_probe;
+  ovsrec_manager_get_is_connected;
+  ovsrec_manager_get_max_backoff;
+  ovsrec_manager_get_other_config;
+  ovsrec_manager_get_seqno;
+  ovsrec_manager_get_status;
+  ovsrec_manager_get_target;
+  ovsrec_manager_init;
+  ovsrec_manager_insert;
+  ovsrec_manager_is_updated;
+  ovsrec_manager_next;
+  ovsrec_manager_remove_clause_connection_mode;
+  ovsrec_manager_remove_clause_external_ids;
+  ovsrec_manager_remove_clause_false;
+  ovsrec_manager_remove_clause_inactivity_probe;
+  ovsrec_manager_remove_clause_is_connected;
+  ovsrec_manager_remove_clause_max_backoff;
+  ovsrec_manager_remove_clause_other_config;
+  ovsrec_manager_remove_clause_status;
+  ovsrec_manager_remove_clause_target;
+  ovsrec_manager_remove_clause_true;
+  ovsrec_manager_row_get_seqno;
+  ovsrec_manager_set_connection_mode;
+  ovsrec_manager_set_external_ids;
+  ovsrec_manager_set_inactivity_probe;
+  ovsrec_manager_set_is_connected;
+  ovsrec_manager_set_max_backoff;
+  ovsrec_manager_set_other_config;
+  ovsrec_manager_set_status;
+  ovsrec_manager_set_target;
+  ovsrec_manager_track_get_first;
+  ovsrec_manager_track_get_next;
+  ovsrec_manager_update_connection_mode_addvalue;
+  ovsrec_manager_update_connection_mode_delvalue;
+  ovsrec_manager_update_external_ids_delkey;
+  ovsrec_manager_update_external_ids_setkey;
+  ovsrec_manager_update_inactivity_probe_addvalue;
+  ovsrec_manager_update_inactivity_probe_delvalue;
+  ovsrec_manager_update_max_backoff_addvalue;
+  ovsrec_manager_update_max_backoff_delvalue;
+  ovsrec_manager_update_other_config_delkey;
+  ovsrec_manager_update_other_config_setkey;
+  ovsrec_manager_update_status_delkey;
+  ovsrec_manager_update_status_setkey;
+  ovsrec_manager_verify_connection_mode;
+  ovsrec_manager_verify_external_ids;
+  ovsrec_manager_verify_inactivity_probe;
+  ovsrec_manager_verify_is_connected;
+  ovsrec_manager_verify_max_backoff;
+  ovsrec_manager_verify_other_config;
+  ovsrec_manager_verify_status;
+  ovsrec_manager_verify_target;
+  ovsrec_mirror_add_clause_external_ids;
+  ovsrec_mirror_add_clause_false;
+  ovsrec_mirror_add_clause_name;
+  ovsrec_mirror_add_clause_output_port;
+  ovsrec_mirror_add_clause_output_vlan;
+  ovsrec_mirror_add_clause_select_all;
+  ovsrec_mirror_add_clause_select_dst_port;
+  ovsrec_mirror_add_clause_select_src_port;
+  ovsrec_mirror_add_clause_select_vlan;
+  ovsrec_mirror_add_clause_snaplen;
+  ovsrec_mirror_add_clause_statistics;
+  ovsrec_mirror_add_clause_true;
+  ovsrec_mirror_columns;
+  ovsrec_mirror_delete;
+  ovsrec_mirror_first;
+  ovsrec_mirror_get_external_ids;
+  ovsrec_mirror_get_for_uuid;
+  ovsrec_mirror_get_name;
+  ovsrec_mirror_get_output_port;
+  ovsrec_mirror_get_output_vlan;
+  ovsrec_mirror_get_select_all;
+  ovsrec_mirror_get_select_dst_port;
+  ovsrec_mirror_get_select_src_port;
+  ovsrec_mirror_get_select_vlan;
+  ovsrec_mirror_get_seqno;
+  ovsrec_mirror_get_snaplen;
+  ovsrec_mirror_get_statistics;
+  ovsrec_mirror_init;
+  ovsrec_mirror_insert;
+  ovsrec_mirror_is_updated;
+  ovsrec_mirror_next;
+  ovsrec_mirror_remove_clause_external_ids;
+  ovsrec_mirror_remove_clause_false;
+  ovsrec_mirror_remove_clause_name;
+  ovsrec_mirror_remove_clause_output_port;
+  ovsrec_mirror_remove_clause_output_vlan;
+  ovsrec_mirror_remove_clause_select_all;
+  ovsrec_mirror_remove_clause_select_dst_port;
+  ovsrec_mirror_remove_clause_select_src_port;
+  ovsrec_mirror_remove_clause_select_vlan;
+  ovsrec_mirror_remove_clause_snaplen;
+  ovsrec_mirror_remove_clause_statistics;
+  ovsrec_mirror_remove_clause_true;
+  ovsrec_mirror_row_get_seqno;
+  ovsrec_mirror_set_external_ids;
+  ovsrec_mirror_set_name;
+  ovsrec_mirror_set_output_port;
+  ovsrec_mirror_set_output_vlan;
+  ovsrec_mirror_set_select_all;
+  ovsrec_mirror_set_select_dst_port;
+  ovsrec_mirror_set_select_src_port;
+  ovsrec_mirror_set_select_vlan;
+  ovsrec_mirror_set_snaplen;
+  ovsrec_mirror_set_statistics;
+  ovsrec_mirror_track_get_first;
+  ovsrec_mirror_track_get_next;
+  ovsrec_mirror_update_external_ids_delkey;
+  ovsrec_mirror_update_external_ids_setkey;
+  ovsrec_mirror_update_output_port_addvalue;
+  ovsrec_mirror_update_output_port_delvalue;
+  ovsrec_mirror_update_output_vlan_addvalue;
+  ovsrec_mirror_update_output_vlan_delvalue;
+  ovsrec_mirror_update_select_dst_port_addvalue;
+  ovsrec_mirror_update_select_dst_port_delvalue;
+  ovsrec_mirror_update_select_src_port_addvalue;
+  ovsrec_mirror_update_select_src_port_delvalue;
+  ovsrec_mirror_update_select_vlan_addvalue;
+  ovsrec_mirror_update_select_vlan_delvalue;
+  ovsrec_mirror_update_snaplen_addvalue;
+  ovsrec_mirror_update_snaplen_delvalue;
+  ovsrec_mirror_update_statistics_delkey;
+  ovsrec_mirror_update_statistics_setkey;
+  ovsrec_mirror_verify_external_ids;
+  ovsrec_mirror_verify_name;
+  ovsrec_mirror_verify_output_port;
+  ovsrec_mirror_verify_output_vlan;
+  ovsrec_mirror_verify_select_all;
+  ovsrec_mirror_verify_select_dst_port;
+  ovsrec_mirror_verify_select_src_port;
+  ovsrec_mirror_verify_select_vlan;
+  ovsrec_mirror_verify_snaplen;
+  ovsrec_mirror_verify_statistics;
+  ovsrec_netflow_add_clause_active_timeout;
+  ovsrec_netflow_add_clause_add_id_to_interface;
+  ovsrec_netflow_add_clause_engine_id;
+  ovsrec_netflow_add_clause_engine_type;
+  ovsrec_netflow_add_clause_external_ids;
+  ovsrec_netflow_add_clause_false;
+  ovsrec_netflow_add_clause_targets;
+  ovsrec_netflow_add_clause_true;
+  ovsrec_netflow_columns;
+  ovsrec_netflow_delete;
+  ovsrec_netflow_first;
+  ovsrec_netflow_get_active_timeout;
+  ovsrec_netflow_get_add_id_to_interface;
+  ovsrec_netflow_get_engine_id;
+  ovsrec_netflow_get_engine_type;
+  ovsrec_netflow_get_external_ids;
+  ovsrec_netflow_get_for_uuid;
+  ovsrec_netflow_get_seqno;
+  ovsrec_netflow_get_targets;
+  ovsrec_netflow_init;
+  ovsrec_netflow_insert;
+  ovsrec_netflow_is_updated;
+  ovsrec_netflow_next;
+  ovsrec_netflow_remove_clause_active_timeout;
+  ovsrec_netflow_remove_clause_add_id_to_interface;
+  ovsrec_netflow_remove_clause_engine_id;
+  ovsrec_netflow_remove_clause_engine_type;
+  ovsrec_netflow_remove_clause_external_ids;
+  ovsrec_netflow_remove_clause_false;
+  ovsrec_netflow_remove_clause_targets;
+  ovsrec_netflow_remove_clause_true;
+  ovsrec_netflow_row_get_seqno;
+  ovsrec_netflow_set_active_timeout;
+  ovsrec_netflow_set_add_id_to_interface;
+  ovsrec_netflow_set_engine_id;
+  ovsrec_netflow_set_engine_type;
+  ovsrec_netflow_set_external_ids;
+  ovsrec_netflow_set_targets;
+  ovsrec_netflow_track_get_first;
+  ovsrec_netflow_track_get_next;
+  ovsrec_netflow_update_engine_id_addvalue;
+  ovsrec_netflow_update_engine_id_delvalue;
+  ovsrec_netflow_update_engine_type_addvalue;
+  ovsrec_netflow_update_engine_type_delvalue;
+  ovsrec_netflow_update_external_ids_delkey;
+  ovsrec_netflow_update_external_ids_setkey;
+  ovsrec_netflow_update_targets_addvalue;
+  ovsrec_netflow_update_targets_delvalue;
+  ovsrec_netflow_verify_active_timeout;
+  ovsrec_netflow_verify_add_id_to_interface;
+  ovsrec_netflow_verify_engine_id;
+  ovsrec_netflow_verify_engine_type;
+  ovsrec_netflow_verify_external_ids;
+  ovsrec_netflow_verify_targets;
+  ovsrec_open_vswitch_add_clause_bridges;
+  ovsrec_open_vswitch_add_clause_cur_cfg;
+  ovsrec_open_vswitch_add_clause_datapath_types;
+  ovsrec_open_vswitch_add_clause_db_version;
+  ovsrec_open_vswitch_add_clause_external_ids;
+  ovsrec_open_vswitch_add_clause_false;
+  ovsrec_open_vswitch_add_clause_iface_types;
+  ovsrec_open_vswitch_add_clause_manager_options;
+  ovsrec_open_vswitch_add_clause_next_cfg;
+  ovsrec_open_vswitch_add_clause_other_config;
+  ovsrec_open_vswitch_add_clause_ovs_version;
+  ovsrec_open_vswitch_add_clause_ssl;
+  ovsrec_open_vswitch_add_clause_statistics;
+  ovsrec_open_vswitch_add_clause_system_type;
+  ovsrec_open_vswitch_add_clause_system_version;
+  ovsrec_open_vswitch_add_clause_true;
+  ovsrec_open_vswitch_columns;
+  ovsrec_open_vswitch_delete;
+  ovsrec_open_vswitch_first;
+  ovsrec_open_vswitch_get_bridges;
+  ovsrec_open_vswitch_get_cur_cfg;
+  ovsrec_open_vswitch_get_datapath_types;
+  ovsrec_open_vswitch_get_db_version;
+  ovsrec_open_vswitch_get_external_ids;
+  ovsrec_open_vswitch_get_for_uuid;
+  ovsrec_open_vswitch_get_iface_types;
+  ovsrec_open_vswitch_get_manager_options;
+  ovsrec_open_vswitch_get_next_cfg;
+  ovsrec_open_vswitch_get_other_config;
+  ovsrec_open_vswitch_get_ovs_version;
+  ovsrec_open_vswitch_get_seqno;
+  ovsrec_open_vswitch_get_ssl;
+  ovsrec_open_vswitch_get_statistics;
+  ovsrec_open_vswitch_get_system_type;
+  ovsrec_open_vswitch_get_system_version;
+  ovsrec_open_vswitch_init;
+  ovsrec_open_vswitch_insert;
+  ovsrec_open_vswitch_is_updated;
+  ovsrec_open_vswitch_next;
+  ovsrec_open_vswitch_remove_clause_bridges;
+  ovsrec_open_vswitch_remove_clause_cur_cfg;
+  ovsrec_open_vswitch_remove_clause_datapath_types;
+  ovsrec_open_vswitch_remove_clause_db_version;
+  ovsrec_open_vswitch_remove_clause_external_ids;
+  ovsrec_open_vswitch_remove_clause_false;
+  ovsrec_open_vswitch_remove_clause_iface_types;
+  ovsrec_open_vswitch_remove_clause_manager_options;
+  ovsrec_open_vswitch_remove_clause_next_cfg;
+  ovsrec_open_vswitch_remove_clause_other_config;
+  ovsrec_open_vswitch_remove_clause_ovs_version;
+  ovsrec_open_vswitch_remove_clause_ssl;
+  ovsrec_open_vswitch_remove_clause_statistics;
+  ovsrec_open_vswitch_remove_clause_system_type;
+  ovsrec_open_vswitch_remove_clause_system_version;
+  ovsrec_open_vswitch_remove_clause_true;
+  ovsrec_open_vswitch_row_get_seqno;
+  ovsrec_open_vswitch_set_bridges;
+  ovsrec_open_vswitch_set_cur_cfg;
+  ovsrec_open_vswitch_set_datapath_types;
+  ovsrec_open_vswitch_set_db_version;
+  ovsrec_open_vswitch_set_external_ids;
+  ovsrec_open_vswitch_set_iface_types;
+  ovsrec_open_vswitch_set_manager_options;
+  ovsrec_open_vswitch_set_next_cfg;
+  ovsrec_open_vswitch_set_other_config;
+  ovsrec_open_vswitch_set_ovs_version;
+  ovsrec_open_vswitch_set_ssl;
+  ovsrec_open_vswitch_set_statistics;
+  ovsrec_open_vswitch_set_system_type;
+  ovsrec_open_vswitch_set_system_version;
+  ovsrec_open_vswitch_track_get_first;
+  ovsrec_open_vswitch_track_get_next;
+  ovsrec_open_vswitch_update_bridges_addvalue;
+  ovsrec_open_vswitch_update_bridges_delvalue;
+  ovsrec_open_vswitch_update_datapath_types_addvalue;
+  ovsrec_open_vswitch_update_datapath_types_delvalue;
+  ovsrec_open_vswitch_update_db_version_addvalue;
+  ovsrec_open_vswitch_update_db_version_delvalue;
+  ovsrec_open_vswitch_update_external_ids_delkey;
+  ovsrec_open_vswitch_update_external_ids_setkey;
+  ovsrec_open_vswitch_update_iface_types_addvalue;
+  ovsrec_open_vswitch_update_iface_types_delvalue;
+  ovsrec_open_vswitch_update_manager_options_addvalue;
+  ovsrec_open_vswitch_update_manager_options_delvalue;
+  ovsrec_open_vswitch_update_other_config_delkey;
+  ovsrec_open_vswitch_update_other_config_setkey;
+  ovsrec_open_vswitch_update_ovs_version_addvalue;
+  ovsrec_open_vswitch_update_ovs_version_delvalue;
+  ovsrec_open_vswitch_update_ssl_addvalue;
+  ovsrec_open_vswitch_update_ssl_delvalue;
+  ovsrec_open_vswitch_update_statistics_delkey;
+  ovsrec_open_vswitch_update_statistics_setkey;
+  ovsrec_open_vswitch_update_system_type_addvalue;
+  ovsrec_open_vswitch_update_system_type_delvalue;
+  ovsrec_open_vswitch_update_system_version_addvalue;
+  ovsrec_open_vswitch_update_system_version_delvalue;
+  ovsrec_open_vswitch_verify_bridges;
+  ovsrec_open_vswitch_verify_cur_cfg;
+  ovsrec_open_vswitch_verify_datapath_types;
+  ovsrec_open_vswitch_verify_db_version;
+  ovsrec_open_vswitch_verify_external_ids;
+  ovsrec_open_vswitch_verify_iface_types;
+  ovsrec_open_vswitch_verify_manager_options;
+  ovsrec_open_vswitch_verify_next_cfg;
+  ovsrec_open_vswitch_verify_other_config;
+  ovsrec_open_vswitch_verify_ovs_version;
+  ovsrec_open_vswitch_verify_ssl;
+  ovsrec_open_vswitch_verify_statistics;
+  ovsrec_open_vswitch_verify_system_type;
+  ovsrec_open_vswitch_verify_system_version;
+  ovsrec_port_add_clause_bond_active_slave;
+  ovsrec_port_add_clause_bond_downdelay;
+  ovsrec_port_add_clause_bond_fake_iface;
+  ovsrec_port_add_clause_bond_mode;
+  ovsrec_port_add_clause_bond_updelay;
+  ovsrec_port_add_clause_external_ids;
+  ovsrec_port_add_clause_fake_bridge;
+  ovsrec_port_add_clause_false;
+  ovsrec_port_add_clause_interfaces;
+  ovsrec_port_add_clause_lacp;
+  ovsrec_port_add_clause_mac;
+  ovsrec_port_add_clause_name;
+  ovsrec_port_add_clause_other_config;
+  ovsrec_port_add_clause_qos;
+  ovsrec_port_add_clause_rstp_statistics;
+  ovsrec_port_add_clause_rstp_status;
+  ovsrec_port_add_clause_statistics;
+  ovsrec_port_add_clause_status;
+  ovsrec_port_add_clause_tag;
+  ovsrec_port_add_clause_true;
+  ovsrec_port_add_clause_trunks;
+  ovsrec_port_add_clause_vlan_mode;
+  ovsrec_port_columns;
+  ovsrec_port_delete;
+  ovsrec_port_first;
+  ovsrec_port_get_bond_active_slave;
+  ovsrec_port_get_bond_downdelay;
+  ovsrec_port_get_bond_fake_iface;
+  ovsrec_port_get_bond_mode;
+  ovsrec_port_get_bond_updelay;
+  ovsrec_port_get_external_ids;
+  ovsrec_port_get_fake_bridge;
+  ovsrec_port_get_for_uuid;
+  ovsrec_port_get_interfaces;
+  ovsrec_port_get_lacp;
+  ovsrec_port_get_mac;
+  ovsrec_port_get_name;
+  ovsrec_port_get_other_config;
+  ovsrec_port_get_qos;
+  ovsrec_port_get_rstp_statistics;
+  ovsrec_port_get_rstp_status;
+  ovsrec_port_get_seqno;
+  ovsrec_port_get_statistics;
+  ovsrec_port_get_status;
+  ovsrec_port_get_tag;
+  ovsrec_port_get_trunks;
+  ovsrec_port_get_vlan_mode;
+  ovsrec_port_init;
+  ovsrec_port_insert;
+  ovsrec_port_is_updated;
+  ovsrec_port_next;
+  ovsrec_port_remove_clause_bond_active_slave;
+  ovsrec_port_remove_clause_bond_downdelay;
+  ovsrec_port_remove_clause_bond_fake_iface;
+  ovsrec_port_remove_clause_bond_mode;
+  ovsrec_port_remove_clause_bond_updelay;
+  ovsrec_port_remove_clause_external_ids;
+  ovsrec_port_remove_clause_fake_bridge;
+  ovsrec_port_remove_clause_false;
+  ovsrec_port_remove_clause_interfaces;
+  ovsrec_port_remove_clause_lacp;
+  ovsrec_port_remove_clause_mac;
+  ovsrec_port_remove_clause_name;
+  ovsrec_port_remove_clause_other_config;
+  ovsrec_port_remove_clause_qos;
+  ovsrec_port_remove_clause_rstp_statistics;
+  ovsrec_port_remove_clause_rstp_status;
+  ovsrec_port_remove_clause_statistics;
+  ovsrec_port_remove_clause_status;
+  ovsrec_port_remove_clause_tag;
+  ovsrec_port_remove_clause_true;
+  ovsrec_port_remove_clause_trunks;
+  ovsrec_port_remove_clause_vlan_mode;
+  ovsrec_port_row_get_seqno;
+  ovsrec_port_set_bond_active_slave;
+  ovsrec_port_set_bond_downdelay;
+  ovsrec_port_set_bond_fake_iface;
+  ovsrec_port_set_bond_mode;
+  ovsrec_port_set_bond_updelay;
+  ovsrec_port_set_external_ids;
+  ovsrec_port_set_fake_bridge;
+  ovsrec_port_set_interfaces;
+  ovsrec_port_set_lacp;
+  ovsrec_port_set_mac;
+  ovsrec_port_set_name;
+  ovsrec_port_set_other_config;
+  ovsrec_port_set_qos;
+  ovsrec_port_set_rstp_statistics;
+  ovsrec_port_set_rstp_status;
+  ovsrec_port_set_statistics;
+  ovsrec_port_set_status;
+  ovsrec_port_set_tag;
+  ovsrec_port_set_trunks;
+  ovsrec_port_set_vlan_mode;
+  ovsrec_port_track_get_first;
+  ovsrec_port_track_get_next;
+  ovsrec_port_update_bond_active_slave_addvalue;
+  ovsrec_port_update_bond_active_slave_delvalue;
+  ovsrec_port_update_bond_mode_addvalue;
+  ovsrec_port_update_bond_mode_delvalue;
+  ovsrec_port_update_external_ids_delkey;
+  ovsrec_port_update_external_ids_setkey;
+  ovsrec_port_update_interfaces_addvalue;
+  ovsrec_port_update_interfaces_delvalue;
+  ovsrec_port_update_lacp_addvalue;
+  ovsrec_port_update_lacp_delvalue;
+  ovsrec_port_update_mac_addvalue;
+  ovsrec_port_update_mac_delvalue;
+  ovsrec_port_update_other_config_delkey;
+  ovsrec_port_update_other_config_setkey;
+  ovsrec_port_update_qos_addvalue;
+  ovsrec_port_update_qos_delvalue;
+  ovsrec_port_update_rstp_statistics_delkey;
+  ovsrec_port_update_rstp_statistics_setkey;
+  ovsrec_port_update_rstp_status_delkey;
+  ovsrec_port_update_rstp_status_setkey;
+  ovsrec_port_update_statistics_delkey;
+  ovsrec_port_update_statistics_setkey;
+  ovsrec_port_update_status_delkey;
+  ovsrec_port_update_status_setkey;
+  ovsrec_port_update_tag_addvalue;
+  ovsrec_port_update_tag_delvalue;
+  ovsrec_port_update_trunks_addvalue;
+  ovsrec_port_update_trunks_delvalue;
+  ovsrec_port_update_vlan_mode_addvalue;
+  ovsrec_port_update_vlan_mode_delvalue;
+  ovsrec_port_verify_bond_active_slave;
+  ovsrec_port_verify_bond_downdelay;
+  ovsrec_port_verify_bond_fake_iface;
+  ovsrec_port_verify_bond_mode;
+  ovsrec_port_verify_bond_updelay;
+  ovsrec_port_verify_external_ids;
+  ovsrec_port_verify_fake_bridge;
+  ovsrec_port_verify_interfaces;
+  ovsrec_port_verify_lacp;
+  ovsrec_port_verify_mac;
+  ovsrec_port_verify_name;
+  ovsrec_port_verify_other_config;
+  ovsrec_port_verify_qos;
+  ovsrec_port_verify_rstp_statistics;
+  ovsrec_port_verify_rstp_status;
+  ovsrec_port_verify_statistics;
+  ovsrec_port_verify_status;
+  ovsrec_port_verify_tag;
+  ovsrec_port_verify_trunks;
+  ovsrec_port_verify_vlan_mode;
+  ovsrec_qos_add_clause_external_ids;
+  ovsrec_qos_add_clause_false;
+  ovsrec_qos_add_clause_other_config;
+  ovsrec_qos_add_clause_queues;
+  ovsrec_qos_add_clause_true;
+  ovsrec_qos_add_clause_type;
+  ovsrec_qos_columns;
+  ovsrec_qos_delete;
+  ovsrec_qos_first;
+  ovsrec_qos_get_external_ids;
+  ovsrec_qos_get_for_uuid;
+  ovsrec_qos_get_other_config;
+  ovsrec_qos_get_queues;
+  ovsrec_qos_get_seqno;
+  ovsrec_qos_get_type;
+  ovsrec_qos_init;
+  ovsrec_qos_insert;
+  ovsrec_qos_is_updated;
+  ovsrec_qos_next;
+  ovsrec_qos_remove_clause_external_ids;
+  ovsrec_qos_remove_clause_false;
+  ovsrec_qos_remove_clause_other_config;
+  ovsrec_qos_remove_clause_queues;
+  ovsrec_qos_remove_clause_true;
+  ovsrec_qos_remove_clause_type;
+  ovsrec_qos_row_get_seqno;
+  ovsrec_qos_set_external_ids;
+  ovsrec_qos_set_other_config;
+  ovsrec_qos_set_queues;
+  ovsrec_qos_set_type;
+  ovsrec_qos_track_get_first;
+  ovsrec_qos_track_get_next;
+  ovsrec_qos_update_external_ids_delkey;
+  ovsrec_qos_update_external_ids_setkey;
+  ovsrec_qos_update_other_config_delkey;
+  ovsrec_qos_update_other_config_setkey;
+  ovsrec_qos_update_queues_delkey;
+  ovsrec_qos_update_queues_setkey;
+  ovsrec_qos_verify_external_ids;
+  ovsrec_qos_verify_other_config;
+  ovsrec_qos_verify_queues;
+  ovsrec_qos_verify_type;
+  ovsrec_queue_add_clause_dscp;
+  ovsrec_queue_add_clause_external_ids;
+  ovsrec_queue_add_clause_false;
+  ovsrec_queue_add_clause_other_config;
+  ovsrec_queue_add_clause_true;
+  ovsrec_queue_columns;
+  ovsrec_queue_delete;
+  ovsrec_queue_first;
+  ovsrec_queue_get_dscp;
+  ovsrec_queue_get_external_ids;
+  ovsrec_queue_get_for_uuid;
+  ovsrec_queue_get_other_config;
+  ovsrec_queue_get_seqno;
+  ovsrec_queue_init;
+  ovsrec_queue_insert;
+  ovsrec_queue_is_updated;
+  ovsrec_queue_next;
+  ovsrec_queue_remove_clause_dscp;
+  ovsrec_queue_remove_clause_external_ids;
+  ovsrec_queue_remove_clause_false;
+  ovsrec_queue_remove_clause_other_config;
+  ovsrec_queue_remove_clause_true;
+  ovsrec_queue_row_get_seqno;
+  ovsrec_queue_set_dscp;
+  ovsrec_queue_set_external_ids;
+  ovsrec_queue_set_other_config;
+  ovsrec_queue_track_get_first;
+  ovsrec_queue_track_get_next;
+  ovsrec_queue_update_dscp_addvalue;
+  ovsrec_queue_update_dscp_delvalue;
+  ovsrec_queue_update_external_ids_delkey;
+  ovsrec_queue_update_external_ids_setkey;
+  ovsrec_queue_update_other_config_delkey;
+  ovsrec_queue_update_other_config_setkey;
+  ovsrec_queue_verify_dscp;
+  ovsrec_queue_verify_external_ids;
+  ovsrec_queue_verify_other_config;
+  ovsrec_sflow_add_clause_agent;
+  ovsrec_sflow_add_clause_external_ids;
+  ovsrec_sflow_add_clause_false;
+  ovsrec_sflow_add_clause_header;
+  ovsrec_sflow_add_clause_polling;
+  ovsrec_sflow_add_clause_sampling;
+  ovsrec_sflow_add_clause_targets;
+  ovsrec_sflow_add_clause_true;
+  ovsrec_sflow_columns;
+  ovsrec_sflow_delete;
+  ovsrec_sflow_first;
+  ovsrec_sflow_get_agent;
+  ovsrec_sflow_get_external_ids;
+  ovsrec_sflow_get_for_uuid;
+  ovsrec_sflow_get_header;
+  ovsrec_sflow_get_polling;
+  ovsrec_sflow_get_sampling;
+  ovsrec_sflow_get_seqno;
+  ovsrec_sflow_get_targets;
+  ovsrec_sflow_init;
+  ovsrec_sflow_insert;
+  ovsrec_sflow_is_updated;
+  ovsrec_sflow_next;
+  ovsrec_sflow_remove_clause_agent;
+  ovsrec_sflow_remove_clause_external_ids;
+  ovsrec_sflow_remove_clause_false;
+  ovsrec_sflow_remove_clause_header;
+  ovsrec_sflow_remove_clause_polling;
+  ovsrec_sflow_remove_clause_sampling;
+  ovsrec_sflow_remove_clause_targets;
+  ovsrec_sflow_remove_clause_true;
+  ovsrec_sflow_row_get_seqno;
+  ovsrec_sflow_set_agent;
+  ovsrec_sflow_set_external_ids;
+  ovsrec_sflow_set_header;
+  ovsrec_sflow_set_polling;
+  ovsrec_sflow_set_sampling;
+  ovsrec_sflow_set_targets;
+  ovsrec_sflow_track_get_first;
+  ovsrec_sflow_track_get_next;
+  ovsrec_sflow_update_agent_addvalue;
+  ovsrec_sflow_update_agent_delvalue;
+  ovsrec_sflow_update_external_ids_delkey;
+  ovsrec_sflow_update_external_ids_setkey;
+  ovsrec_sflow_update_header_addvalue;
+  ovsrec_sflow_update_header_delvalue;
+  ovsrec_sflow_update_polling_addvalue;
+  ovsrec_sflow_update_polling_delvalue;
+  ovsrec_sflow_update_sampling_addvalue;
+  ovsrec_sflow_update_sampling_delvalue;
+  ovsrec_sflow_update_targets_addvalue;
+  ovsrec_sflow_update_targets_delvalue;
+  ovsrec_sflow_verify_agent;
+  ovsrec_sflow_verify_external_ids;
+  ovsrec_sflow_verify_header;
+  ovsrec_sflow_verify_polling;
+  ovsrec_sflow_verify_sampling;
+  ovsrec_sflow_verify_targets;
+  ovsrec_ssl_add_clause_bootstrap_ca_cert;
+  ovsrec_ssl_add_clause_ca_cert;
+  ovsrec_ssl_add_clause_certificate;
+  ovsrec_ssl_add_clause_external_ids;
+  ovsrec_ssl_add_clause_false;
+  ovsrec_ssl_add_clause_private_key;
+  ovsrec_ssl_add_clause_true;
+  ovsrec_ssl_columns;
+  ovsrec_ssl_delete;
+  ovsrec_ssl_first;
+  ovsrec_ssl_get_bootstrap_ca_cert;
+  ovsrec_ssl_get_ca_cert;
+  ovsrec_ssl_get_certificate;
+  ovsrec_ssl_get_external_ids;
+  ovsrec_ssl_get_for_uuid;
+  ovsrec_ssl_get_private_key;
+  ovsrec_ssl_get_seqno;
+  ovsrec_ssl_init;
+  ovsrec_ssl_insert;
+  ovsrec_ssl_is_updated;
+  ovsrec_ssl_next;
+  ovsrec_ssl_remove_clause_bootstrap_ca_cert;
+  ovsrec_ssl_remove_clause_ca_cert;
+  ovsrec_ssl_remove_clause_certificate;
+  ovsrec_ssl_remove_clause_external_ids;
+  ovsrec_ssl_remove_clause_false;
+  ovsrec_ssl_remove_clause_private_key;
+  ovsrec_ssl_remove_clause_true;
+  ovsrec_ssl_row_get_seqno;
+  ovsrec_ssl_set_bootstrap_ca_cert;
+  ovsrec_ssl_set_ca_cert;
+  ovsrec_ssl_set_certificate;
+  ovsrec_ssl_set_external_ids;
+  ovsrec_ssl_set_private_key;
+  ovsrec_ssl_track_get_first;
+  ovsrec_ssl_track_get_next;
+  ovsrec_ssl_update_external_ids_delkey;
+  ovsrec_ssl_update_external_ids_setkey;
+  ovsrec_ssl_verify_bootstrap_ca_cert;
+  ovsrec_ssl_verify_ca_cert;
+  ovsrec_ssl_verify_certificate;
+  ovsrec_ssl_verify_external_ids;
+  ovsrec_ssl_verify_private_key;
+  ovsrec_table_classes;
+  ovsthread_getspecific;
+  ovsthread_id_var;
+  ovsthread_key_create;
+  ovsthread_key_delete;
+  ovsthread_once_done;
+  ovsthread_once_start__;
+  ovsthread_setspecific;
+  ovsthread_stats_bucket_get;
+  ovsthread_stats_destroy;
+  ovsthread_stats_init;
+  oxm_bitmap_from_mf_bitmap;
+  oxm_bitmap_to_mf_bitmap;
+  oxm_decode_match;
+  oxm_format_field_array;
+  oxm_maskable_fields;
+  oxm_match_from_string;
+  oxm_match_to_string;
+  oxm_matchable_fields;
+  oxm_pull_field_array;
+  oxm_pull_match;
+  oxm_pull_match_loose;
+  oxm_put_field_array;
+  oxm_put_match;
+  oxm_put_raw;
+  oxm_writable_fields;
+  packet_csum_pseudoheader;
+  packet_csum_pseudoheader6;
+  packet_format_tcp_flags;
+  packet_set_icmp;
+  packet_set_ipv4;
+  packet_set_ipv6;
+  packet_set_nd;
+  packet_set_sctp_port;
+  packet_set_tcp_port;
+  packet_set_udp_port;
+  packet_tcp_flag_to_string;
+  parse_dl_type;
+  parse_flags;
+  parse_flow_monitor_request;
+  parse_int_string;
+  parse_ipv6_ext_hdrs;
+  parse_ofp_bundle_file;
+  parse_ofp_exact_flow;
+  parse_ofp_flow_mod_file;
+  parse_ofp_flow_mod_str;
+  parse_ofp_flow_stats_request_str;
+  parse_ofp_group_mod_file;
+  parse_ofp_group_mod_str;
+  parse_ofp_meter_mod_str;
+  parse_ofp_str;
+  parse_ofp_table_mod;
+  parse_ofp_table_vacancy;
+  parse_ofp_tlv_table_mod_str;
+  pktbuf_capacity;
+  pktbuf_count_packets;
+  pktbuf_create;
+  pktbuf_destroy;
+  pktbuf_discard;
+  pktbuf_retrieve;
+  pktbuf_save;
+  poll_block;
+  poll_fd_wait_at;
+  poll_immediate_wake_at;
+  poll_timer_wait_at;
+  poll_timer_wait_until_at;
+  pop_mpls;
+  process_destroy;
+  process_escape_args;
+  process_exited;
+  process_init;
+  process_kill;
+  process_name;
+  process_pid;
+  process_received_bpdu__;
+  process_run;
+  process_search_path;
+  process_start;
+  process_status;
+  process_status_msg;
+  process_wait;
+  program_name;
+  pstream_accept;
+  pstream_accept_block;
+  pstream_close;
+  pstream_get_bound_port;
+  pstream_get_name;
+  pstream_init;
+  pstream_open;
+  pstream_open_with_default_port;
+  pstream_set_bound_port;
+  pstream_verify_name;
+  pstream_wait;
+  push_mpls;
+  pvconn_accept;
+  pvconn_close;
+  pvconn_get_name;
+  pvconn_init;
+  pvconn_open;
+  pvconn_verify_name;
+  pvconn_wait;
+  pvector_change_priority;
+  pvector_destroy;
+  pvector_init;
+  pvector_insert;
+  pvector_publish__;
+  pvector_remove;
+  random_bytes;
+  random_init;
+  random_set_seed;
+  random_uint32;
+  random_uint64;
+  rconn_add_monitor;
+  rconn_connect;
+  rconn_connect_unreliably;
+  rconn_count_txqlen;
+  rconn_create;
+  rconn_destroy;
+  rconn_disconnect;
+  rconn_failure_duration;
+  rconn_get_allowed_versions;
+  rconn_get_connection_seqno;
+  rconn_get_dscp;
+  rconn_get_last_connection;
+  rconn_get_last_disconnect;
+  rconn_get_last_error;
+  rconn_get_max_backoff;
+  rconn_get_name;
+  rconn_get_probe_interval;
+  rconn_get_state;
+  rconn_get_target;
+  rconn_get_version;
+  rconn_is_admitted;
+  rconn_is_alive;
+  rconn_is_connected;
+  rconn_packet_counter_create;
+  rconn_packet_counter_dec;
+  rconn_packet_counter_destroy;
+  rconn_packet_counter_inc;
+  rconn_packet_counter_n_bytes;
+  rconn_packet_counter_n_packets;
+  rconn_reconnect;
+  rconn_recv;
+  rconn_recv_wait;
+  rconn_run;
+  rconn_run_wait;
+  rconn_send;
+  rconn_send_with_limit;
+  rconn_set_dscp;
+  rconn_set_max_backoff;
+  rconn_set_name;
+  rconn_set_probe_interval;
+  read_fully;
+  read_pidfile;
+  recalc_csum128;
+  recalc_csum16;
+  recalc_csum32;
+  recalc_csum48;
+  reconnect_activity;
+  reconnect_connect_failed;
+  reconnect_connected;
+  reconnect_connecting;
+  reconnect_create;
+  reconnect_destroy;
+  reconnect_disable;
+  reconnect_disconnected;
+  reconnect_enable;
+  reconnect_force_reconnect;
+  reconnect_get_last_connect_elapsed;
+  reconnect_get_last_disconnect_elapsed;
+  reconnect_get_max_backoff;
+  reconnect_get_max_tries;
+  reconnect_get_min_backoff;
+  reconnect_get_name;
+  reconnect_get_probe_interval;
+  reconnect_get_stats;
+  reconnect_is_connected;
+  reconnect_is_enabled;
+  reconnect_is_passive;
+  reconnect_listen_error;
+  reconnect_listening;
+  reconnect_run;
+  reconnect_set_backoff;
+  reconnect_set_max_tries;
+  reconnect_set_name;
+  reconnect_set_passive;
+  reconnect_set_probe_interval;
+  reconnect_set_quiet;
+  reconnect_timeout;
+  reconnect_wait;
+  reinitialize_port;
+  route_table_fallback_lookup;
+  route_table_get_change_seq;
+  route_table_init;
+  route_table_run;
+  route_table_wait;
+  rstp_add_port;
+  rstp_check_and_reset_fdb_flush;
+  rstp_convert_speed_to_cost;
+  rstp_create;
+  rstp_get_bridge_id;
+  rstp_get_bridge_port_id;
+  rstp_get_designated_id;
+  rstp_get_designated_port_id;
+  rstp_get_designated_root;
+  rstp_get_name;
+  rstp_get_new_root_aux;
+  rstp_get_next_changed_port_aux;
+  rstp_get_old_root_aux;
+  rstp_get_port;
+  rstp_get_port_aux__;
+  rstp_get_root_id;
+  rstp_get_root_path_cost;
+  rstp_get_root_port;
+  rstp_init;
+  rstp_is_root_bridge;
+  rstp_port_get_number;
+  rstp_port_get_state;
+  rstp_port_get_status;
+  rstp_port_received_bpdu;
+  rstp_port_ref;
+  rstp_port_role_name;
+  rstp_port_set;
+  rstp_port_set_aux;
+  rstp_port_set_mac_operational;
+  rstp_port_set_path_cost;
+  rstp_port_set_priority;
+  rstp_port_set_state;
+  rstp_port_set_state__;
+  rstp_port_unref;
+  rstp_ref;
+  rstp_reset_root_changed;
+  rstp_set_bridge_address;
+  rstp_set_bridge_ageing_time;
+  rstp_set_bridge_force_protocol_version;
+  rstp_set_bridge_forward_delay;
+  rstp_set_bridge_max_age;
+  rstp_set_bridge_priority;
+  rstp_set_bridge_transmit_hold_count;
+  rstp_shift_root_learned_address;
+  rstp_state_name;
+  rstp_tick_timers;
+  rstp_unref;
+  seq_change;
+  seq_change_protected;
+  seq_create;
+  seq_destroy;
+  seq_lock;
+  seq_read;
+  seq_read_protected;
+  seq_try_lock;
+  seq_unlock;
+  seq_wait_at;
+  seq_woke;
+  service_start;
+  service_stop;
+  set_allowed_ofp_versions;
+  set_detach;
+  set_dscp;
+  set_mpls_lse;
+  set_mpls_lse_bos;
+  set_mpls_lse_label;
+  set_mpls_lse_tc;
+  set_mpls_lse_ttl;
+  set_mpls_lse_values;
+  set_no_chdir;
+  set_nonblocking;
+  set_op_create;
+  set_op_datum;
+  set_op_destroy;
+  set_op_list_add;
+  set_op_list_create;
+  set_op_list_destroy;
+  set_op_list_first;
+  set_op_list_next;
+  set_op_type;
+  set_pidfile;
+  set_subprogram_name;
+  setsockopt_tcp_nodelay;
+  sha1_bytes;
+  sha1_final;
+  sha1_from_hex;
+  sha1_init;
+  sha1_to_hex;
+  sha1_update;
+  shash_add;
+  shash_add_assert;
+  shash_add_nocopy;
+  shash_add_once;
+  shash_clear;
+  shash_clear_free_data;
+  shash_count;
+  shash_delete;
+  shash_destroy;
+  shash_destroy_free_data;
+  shash_equal_keys;
+  shash_find;
+  shash_find_and_delete;
+  shash_find_and_delete_assert;
+  shash_find_data;
+  shash_find_len;
+  shash_first;
+  shash_init;
+  shash_is_empty;
+  shash_moved;
+  shash_random_node;
+  shash_replace;
+  shash_sort;
+  shash_steal;
+  shash_swap;
+  should_service_stop;
+  signal_name;
+  simap_clear;
+  simap_contains;
+  simap_count;
+  simap_delete;
+  simap_destroy;
+  simap_find;
+  simap_find_and_delete;
+  simap_find_len;
+  simap_get;
+  simap_increase;
+  simap_init;
+  simap_is_empty;
+  simap_moved;
+  simap_put;
+  simap_sort;
+  simap_swap;
+  single_threaded;
+  slow_path_reason_to_explanation;
+  slowpath_to_actions;
+  smap_add;
+  smap_add_format;
+  smap_add_ipv6;
+  smap_add_nocopy;
+  smap_add_once;
+  smap_clear;
+  smap_clone;
+  smap_count;
+  smap_destroy;
+  smap_equal;
+  smap_from_json;
+  smap_get;
+  smap_get_bool;
+  smap_get_def;
+  smap_get_int;
+  smap_get_node;
+  smap_get_ullong;
+  smap_get_uuid;
+  smap_init;
+  smap_is_empty;
+  smap_remove;
+  smap_remove_node;
+  smap_replace;
+  smap_sort;
+  smap_steal;
+  smap_to_json;
+  sock_strerror;
+  solaris_create_etherstub;
+  solaris_create_vnic;
+  solaris_delete_etherstub;
+  solaris_delete_vnic;
+  solaris_dladm_status2error;
+  solaris_dlparse_zonelinkname;
+  solaris_get_devname;
+  solaris_get_dlclass;
+  solaris_get_dllower;
+  solaris_get_dlprop;
+  solaris_if_enabled;
+  solaris_init_dladm;
+  solaris_is_uplink_class;
+  solaris_modify_vnic;
+  solaris_parse_cpuinfo;
+  solaris_plumb_if;
+  solaris_set_dlprop_boolean;
+  solaris_set_dlprop_string;
+  solaris_set_dlprop_ulong;
+  solaris_unplumb_if;
+  sort;
+  ss_format_address;
+  ss_get_port;
+  ss_length;
+  sset_add;
+  sset_add_and_free;
+  sset_add_array;
+  sset_add_assert;
+  sset_array;
+  sset_at_position;
+  sset_clear;
+  sset_clone;
+  sset_contains;
+  sset_count;
+  sset_delete;
+  sset_destroy;
+  sset_equals;
+  sset_find;
+  sset_find_and_delete;
+  sset_find_and_delete_assert;
+  sset_from_delimited_string;
+  sset_init;
+  sset_intersect;
+  sset_is_empty;
+  sset_moved;
+  sset_pop;
+  sset_sort;
+  sset_swap;
+  stp_check_and_reset_fdb_flush;
+  stp_convert_speed_to_cost;
+  stp_create;
+  stp_forward_in_state;
+  stp_get_bridge_id;
+  stp_get_changed_port;
+  stp_get_designated_root;
+  stp_get_forward_delay;
+  stp_get_hello_time;
+  stp_get_max_age;
+  stp_get_name;
+  stp_get_port;
+  stp_get_root_path_cost;
+  stp_get_root_port;
+  stp_init;
+  stp_is_root_bridge;
+  stp_learn_in_state;
+  stp_port_disable;
+  stp_port_disable_change_detection;
+  stp_port_enable;
+  stp_port_enable_change_detection;
+  stp_port_get_aux;
+  stp_port_get_counts;
+  stp_port_get_id;
+  stp_port_get_role;
+  stp_port_get_state;
+  stp_port_get_stp;
+  stp_port_no;
+  stp_port_set_aux;
+  stp_port_set_name;
+  stp_port_set_path_cost;
+  stp_port_set_priority;
+  stp_port_set_speed;
+  stp_received_bpdu;
+  stp_ref;
+  stp_role_name;
+  stp_set_bridge_id;
+  stp_set_bridge_priority;
+  stp_set_forward_delay;
+  stp_set_hello_time;
+  stp_set_max_age;
+  stp_should_forward_bpdu;
+  stp_state_name;
+  stp_tick;
+  stp_unref;
+  str_to_be64;
+  str_to_connhelper;
+  str_to_double;
+  str_to_int;
+  str_to_ip;
+  str_to_llong;
+  str_to_long;
+  str_to_mac;
+  str_to_u16;
+  str_to_u32;
+  str_to_u64;
+  str_to_u8;
+  str_to_uint;
+  stream_close;
+  stream_connect;
+  stream_connect_wait;
+  stream_get_name;
+  stream_init;
+  stream_open;
+  stream_open_block;
+  stream_open_with_default_port;
+  stream_or_pstream_needs_probes;
+  stream_parse_target_with_default_port;
+  stream_recv;
+  stream_recv_wait;
+  stream_report_content;
+  stream_run;
+  stream_run_wait;
+  stream_send;
+  stream_send_wait;
+  stream_ssl_is_configured;
+  stream_ssl_set_ca_cert_file;
+  stream_ssl_set_certificate_file;
+  stream_ssl_set_key_and_cert;
+  stream_ssl_set_peer_ca_cert_file;
+  stream_ssl_set_private_key_file;
+  stream_usage;
+  stream_verify_name;
+  stream_wait;
+  strftime_msec;
+  svec_add;
+  svec_add_nocopy;
+  svec_append;
+  svec_back;
+  svec_clear;
+  svec_clone;
+  svec_compact;
+  svec_contains;
+  svec_del;
+  svec_destroy;
+  svec_diff;
+  svec_equal;
+  svec_find;
+  svec_get_duplicate;
+  svec_init;
+  svec_is_empty;
+  svec_is_sorted;
+  svec_is_unique;
+  svec_join;
+  svec_parse_words;
+  svec_pop_back;
+  svec_print;
+  svec_sort;
+  svec_sort_unique;
+  svec_swap;
+  svec_terminate;
+  svec_unique;
+  syslog_direct_create;
+  syslog_libc_create;
+  table_add_cell;
+  table_add_column;
+  table_add_row;
+  table_destroy;
+  table_init;
+  table_parse_cell_format;
+  table_parse_format;
+  table_print;
+  table_set_caption;
+  table_set_timestamp;
+  tcp_reader_close;
+  tcp_reader_open;
+  tcp_reader_run;
+  thread_is_pmd;
+  time_alarm;
+  time_boot_msec;
+  time_msec;
+  time_now;
+  time_poll;
+  time_timespec;
+  time_wall;
+  time_wall_msec;
+  time_wall_timespec;
+  timer_msecs_until_expired;
+  timer_wait_at;
+  timespec_to_msec;
+  timeval_dummy_register;
+  timeval_to_msec;
+  timewarp_run;
+  tnl_neigh_cache_init;
+  tnl_neigh_cache_run;
+  tnl_neigh_lookup;
+  tnl_neigh_snoop;
+  tnl_port_map_delete;
+  tnl_port_map_delete_ipdev;
+  tnl_port_map_init;
+  tnl_port_map_insert;
+  tnl_port_map_insert_ipdev;
+  tnl_port_map_lookup;
+  tnl_port_map_run;
+  token_bucket_init;
+  token_bucket_set;
+  token_bucket_wait_at;
+  token_bucket_withdraw;
+  tun_metadata_from_geneve_nlattr;
+  tun_metadata_from_geneve_udpif;
+  tun_metadata_get_fmd;
+  tun_metadata_init;
+  tun_metadata_match_format;
+  tun_metadata_read;
+  tun_metadata_set_match;
+  tun_metadata_table_mod;
+  tun_metadata_table_request;
+  tun_metadata_to_geneve_header;
+  tun_metadata_to_geneve_nlattr;
+  tun_metadata_to_geneve_udpif_mask;
+  tun_metadata_to_nx_match;
+  tun_metadata_write;
+  unixctl_client_create;
+  unixctl_client_transact;
+  unixctl_command_register;
+  unixctl_command_reply;
+  unixctl_command_reply_error;
+  unixctl_server_create;
+  unixctl_server_destroy;
+  unixctl_server_run;
+  unixctl_server_wait;
+  updt_roles_tree__;
+  utf16_decode_surrogate_pair;
+  utf8_length;
+  utf8_validate;
+  uuid_compare_3way;
+  uuid_from_string;
+  uuid_from_string_prefix;
+  uuid_generate;
+  uuid_init;
+  uuid_is_zero;
+  uuid_set_bits_v4;
+  uuid_zero;
+  vconn_bundle_transact;
+  vconn_close;
+  vconn_connect;
+  vconn_connect_block;
+  vconn_connect_wait;
+  vconn_get_allowed_versions;
+  vconn_get_name;
+  vconn_get_status;
+  vconn_get_version;
+  vconn_init;
+  vconn_open;
+  vconn_open_block;
+  vconn_recv;
+  vconn_recv_block;
+  vconn_recv_wait;
+  vconn_recv_xid;
+  vconn_run;
+  vconn_run_wait;
+  vconn_send;
+  vconn_send_block;
+  vconn_send_wait;
+  vconn_set_allowed_versions;
+  vconn_set_recv_any_version;
+  vconn_transact;
+  vconn_transact_multiple_noreply;
+  vconn_transact_noreply;
+  vconn_usage;
+  vconn_verify_name;
+  vconn_wait;
+  vlan_bitmap_equal;
+  vlan_bitmap_from_array;
+  vlan_bitmap_from_array__;
+  vlog;
+  vlog_abort;
+  vlog_abort_valist;
+  vlog_change_owner_unix;
+  vlog_enable_async;
+  vlog_fatal;
+  vlog_fatal_valist;
+  vlog_get_destination_name;
+  vlog_get_destination_val;
+  vlog_get_level;
+  vlog_get_level_name;
+  vlog_get_level_val;
+  vlog_get_levels;
+  vlog_get_module_name;
+  vlog_get_patterns;
+  vlog_init;
+  vlog_insert_module;
+  vlog_is_enabled;
+  vlog_module_from_name;
+  vlog_rate_limit;
+  vlog_reopen_log_file;
+  vlog_set_levels;
+  vlog_set_levels_from_string;
+  vlog_set_levels_from_string_assert;
+  vlog_set_log_file;
+  vlog_set_pattern;
+  vlog_set_syslog_method;
+  vlog_set_syslog_target;
+  vlog_set_verbosity;
+  vlog_should_drop;
+  vlog_usage;
+  vlog_valist;
+  write_fully;
+  x2nrealloc;
+  xasprintf;
+  xastrftime_msec;
+  xcalloc;
+  xclock_gettime;
+  xfork_at;
+  xgettimeofday;
+  xmalloc;
+  xmalloc_cacheline;
+  xmemdup;
+  xmemdup0;
+  xpipe;
+  xpipe_nonblocking;
+  xpthread_cond_broadcast;
+  xpthread_cond_destroy;
+  xpthread_cond_init;
+  xpthread_cond_signal;
+  xpthread_join;
+  xpthread_key_create;
+  xpthread_key_delete;
+  xpthread_mutex_lock;
+  xpthread_mutex_unlock;
+  xpthread_mutexattr_destroy;
+  xpthread_mutexattr_gettype;
+  xpthread_mutexattr_init;
+  xpthread_mutexattr_settype;
+  xpthread_rwlockattr_destroy;
+  xpthread_rwlockattr_init;
+  xpthread_setspecific;
+  xpthread_sigmask;
+  xrealloc;
+  xset_nonblocking;
+  xsigaction;
+  xsleep;
+  xstrdup;
+  xvasprintf;
+  xzalloc;
+  xzalloc_cacheline;
+local:
+    *;
 };
diff --git a/lib/libsflow.sym.in b/lib/libsflow.sym.in
index 88b9cc13c..f3ba5d64a 100644
--- a/lib/libsflow.sym.in
+++ b/lib/libsflow.sym.in
@@ -1,4 +1,64 @@
 libsflow_@LT_CURRENT@ {
 global:
-        *;
+  sfl_agent_addPoller;
+  sfl_agent_addReceiver;
+  sfl_agent_addSampler;
+  sfl_agent_error;
+  sfl_agent_getNextPoller;
+  sfl_agent_getNextReceiver;
+  sfl_agent_getNextSampler;
+  sfl_agent_getPoller;
+  sfl_agent_getPollerByBridgePort;
+  sfl_agent_getReceiver;
+  sfl_agent_getSampler;
+  sfl_agent_getSamplerByIfIndex;
+  sfl_agent_init;
+  sfl_agent_release;
+  sfl_agent_removePoller;
+  sfl_agent_removeSampler;
+  sfl_agent_resetReceiver;
+  sfl_agent_set_agentAddress;
+  sfl_agent_set_agentSubId;
+  sfl_agent_sysError;
+  sfl_agent_tick;
+  sfl_poller_get_bridgePort;
+  sfl_poller_get_sFlowCpInterval;
+  sfl_poller_get_sFlowCpReceiver;
+  sfl_poller_init;
+  sfl_poller_resetCountersSeqNo;
+  sfl_poller_set_bridgePort;
+  sfl_poller_set_sFlowCpInterval;
+  sfl_poller_set_sFlowCpReceiver;
+  sfl_poller_tick;
+  sfl_poller_writeCountersSample;
+  sfl_receiver_get_sFlowRcvrAddress;
+  sfl_receiver_get_sFlowRcvrMaximumDatagramSize;
+  sfl_receiver_get_sFlowRcvrOwner;
+  sfl_receiver_get_sFlowRcvrPort;
+  sfl_receiver_get_sFlowRcvrTimeout;
+  sfl_receiver_init;
+  sfl_receiver_samplePacketsSent;
+  sfl_receiver_set_sFlowRcvrAddress;
+  sfl_receiver_set_sFlowRcvrMaximumDatagramSize;
+  sfl_receiver_set_sFlowRcvrOwner;
+  sfl_receiver_set_sFlowRcvrPort;
+  sfl_receiver_set_sFlowRcvrTimeout;
+  sfl_receiver_tick;
+  sfl_receiver_writeCountersSample;
+  sfl_receiver_writeFlowSample;
+  sfl_sampler_get_backoffThreshold;
+  sfl_sampler_get_sFlowFsMaximumHeaderSize;
+  sfl_sampler_get_sFlowFsPacketSamplingRate;
+  sfl_sampler_get_sFlowFsReceiver;
+  sfl_sampler_get_samplesLastTick;
+  sfl_sampler_init;
+  sfl_sampler_resetFlowSeqNo;
+  sfl_sampler_set_backoffThreshold;
+  sfl_sampler_set_sFlowFsMaximumHeaderSize;
+  sfl_sampler_set_sFlowFsPacketSamplingRate;
+  sfl_sampler_set_sFlowFsReceiver;
+  sfl_sampler_tick;
+  sfl_sampler_writeFlowSample;
+local:
+    *;
 };
diff --git a/lib/odp-util.c b/lib/odp-util.c
index 6d29b67d5..502e4a47a 100644
--- a/lib/odp-util.c
+++ b/lib/odp-util.c
@@ -25,6 +25,9 @@
 #include <netinet/ip6.h>
 #include <stdlib.h>
 #include <string.h>
+#ifdef __sun
+#include <strings.h>
+#endif
 
 #include "byte-order.h"
 #include "coverage.h"
@@ -542,8 +545,16 @@ static void
 format_odp_tnl_push_action(struct ds *ds, const struct nlattr *attr)
 {
     struct ovs_action_push_tnl *data;
+#ifdef __sun
+    struct ovs_action_push_tnl tmp_data;
+    const void *tmp_datap = nl_attr_get(attr);
+
+    bcopy(tmp_datap, &tmp_data, sizeof (struct ovs_action_push_tnl));
+    data = &tmp_data;
+#else
 
     data = (struct ovs_action_push_tnl *) nl_attr_get(attr);
+#endif
 
     ds_put_format(ds, "tnl_push(tnl_port(%"PRIu32"),", data->tnl_port);
     format_odp_tnl_push_header(ds, data);
@@ -2142,14 +2153,32 @@ static void
 format_be64(struct ds *ds, const char *name, ovs_be64 key,
             const ovs_be64 *mask, bool verbose)
 {
+#ifdef __sun
+    /* Need this because of alignment issue on SPARC */
+    ovs_be64 tmp, *maskp = NULL;
+    if (mask != NULL) {
+        bcopy(mask, &tmp, sizeof (ovs_be64));
+        maskp = &tmp;
+    }
+    bool mask_empty = maskp && !*maskp;
+#else
     bool mask_empty = mask && !*mask;
+#endif
 
     if (verbose || !mask_empty) {
+#ifdef __sun
+        bool mask_full = !maskp || *maskp == OVS_BE64_MAX;
+#else
         bool mask_full = !mask || *mask == OVS_BE64_MAX;
+#endif
 
         ds_put_format(ds, "%s=0x%"PRIx64, name, ntohll(key));
         if (!mask_full) { /* Partially masked. */
+#ifdef __sun
+            ds_put_format(ds, "/%#"PRIx64, ntohll(*maskp));
+#else
             ds_put_format(ds, "/%#"PRIx64, ntohll(*mask));
+#endif
         }
         ds_put_char(ds, ',');
     }
@@ -2159,14 +2188,34 @@ static void
 format_ipv4(struct ds *ds, const char *name, ovs_be32 key,
             const ovs_be32 *mask, bool verbose)
 {
+#ifdef __sun
+    /* Need this because of alignment issue on SPARC */
+    ovs_be32 tmp, *maskp = NULL;
+
+    if (mask != NULL) {
+        bcopy(mask, &tmp, sizeof (ovs_be32));
+        maskp = &tmp;
+    }
+
+    bool mask_empty = maskp && !*maskp;
+#else
     bool mask_empty = mask && !*mask;
+#endif
 
     if (verbose || !mask_empty) {
+#ifdef __sun
+        bool mask_full = !maskp || *maskp == OVS_BE32_MAX;
+#else
         bool mask_full = !mask || *mask == OVS_BE32_MAX;
+#endif
 
         ds_put_format(ds, "%s="IP_FMT, name, IP_ARGS(key));
         if (!mask_full) { /* Partially masked. */
+#ifdef __sun
+            ds_put_format(ds, "/"IP_FMT, IP_ARGS(*maskp));
+#else
             ds_put_format(ds, "/"IP_FMT, IP_ARGS(*mask));
+#endif
         }
         ds_put_char(ds, ',');
     }
@@ -2260,14 +2309,33 @@ static void
 format_be16(struct ds *ds, const char *name, ovs_be16 key,
             const ovs_be16 *mask, bool verbose)
 {
+#ifdef __sun
+    /* Need this because of alignment issue on SPARC */
+    ovs_be16 tmp, *maskp = NULL;
+
+    if (mask != NULL) {
+        bcopy(mask, &tmp, sizeof (ovs_be16));
+        maskp = &tmp;
+    }
+    bool mask_empty = maskp && !*maskp;
+#else
     bool mask_empty = mask && !*mask;
+#endif
 
     if (verbose || !mask_empty) {
+#ifdef __sun
+        bool mask_full = !maskp || *maskp == OVS_BE16_MAX;
+#else
         bool mask_full = !mask || *mask == OVS_BE16_MAX;
+#endif
 
         ds_put_format(ds, "%s=%"PRIu16, name, ntohs(key));
         if (!mask_full) { /* Partially masked. */
+#ifdef __sun
+            ds_put_format(ds, "/%#"PRIx16, ntohs(*maskp));
+#else
             ds_put_format(ds, "/%#"PRIx16, ntohs(*mask));
+#endif
         }
         ds_put_char(ds, ',');
     }
@@ -2980,13 +3048,30 @@ static void
 format_u128(struct ds *ds, const ovs_u128 *key, const ovs_u128 *mask,
             bool verbose)
 {
+#ifdef __sun
+    /* Need this because of alignment issue on SPARC */
+    ovs_u128 tmp_mask, *maskp = NULL;
+    if (mask != NULL) {
+        bcopy(mask, &tmp_mask, sizeof (ovs_u128));
+        maskp = &tmp_mask;
+    }
+    if (verbose || (maskp && !ovs_u128_is_zero(*maskp))) {
+        ovs_be128 value;
+	ovs_u128 tmp_value;
+	bcopy(key, &(tmp_value), sizeof (ovs_u128));
+	value.be64.hi = htonll(tmp_value.u64.hi);
+	value.be64.lo = htonll(tmp_value.u64.lo);
+        ds_put_hex(ds, &value, sizeof value);
+        if (maskp && !(ovs_u128_is_ones(*maskp))) {
+            value = hton128(*maskp);
+#else
     if (verbose || (mask && !ovs_u128_is_zero(*mask))) {
         ovs_be128 value;
-
         value = hton128(*key);
         ds_put_hex(ds, &value, sizeof value);
         if (mask && !(ovs_u128_is_ones(*mask))) {
             value = hton128(*mask);
+#endif
             ds_put_char(ds, '/');
             ds_put_hex(ds, &value, sizeof value);
         }
@@ -5141,9 +5226,15 @@ odp_flow_key_to_flow__(const struct nlattr *key, size_t key_len,
         expected_attrs |= UINT64_C(1) << OVS_KEY_ATTR_CT_MARK;
     }
     if (present_attrs & (UINT64_C(1) << OVS_KEY_ATTR_CT_LABELS)) {
+#ifdef __sun
+	/* Fixes sparc alignment issue */
+        const void *cl = nl_attr_get(attrs[OVS_KEY_ATTR_CT_LABELS]);
+        bcopy(cl, &(flow->ct_label), sizeof (ovs_u128));
+#else
         const ovs_u128 *cl = nl_attr_get(attrs[OVS_KEY_ATTR_CT_LABELS]);
 
         flow->ct_label = *cl;
+#endif
         expected_attrs |= UINT64_C(1) << OVS_KEY_ATTR_CT_LABELS;
     }
 
diff --git a/lib/packets.h b/lib/packets.h
index dcfcd04b2..62516d969 100644
--- a/lib/packets.h
+++ b/lib/packets.h
@@ -673,10 +673,20 @@ struct igmpv3_record {
 };
 BUILD_ASSERT_DECL(IGMPV3_RECORD_LEN == sizeof(struct igmpv3_record));
 
+#ifndef	IGMP_HOST_MEMBERSHIP_QUERY
 #define IGMP_HOST_MEMBERSHIP_QUERY    0x11 /* From RFC1112 */
+#endif	/* !IGMP_HOST_MEMBERSHIP_QUERY */
+
+#ifndef	IGMP_HOST_MEMBERSHIP_REPORT
 #define IGMP_HOST_MEMBERSHIP_REPORT   0x12 /* Ditto */
+#endif	/* !IGMP_HOST_MEMBERSHIP_REPORT */
+
 #define IGMPV2_HOST_MEMBERSHIP_REPORT 0x16 /* V2 version of 0x12 */
+
+#ifndef	IGMP_HOST_LEAVE_MESSAGE
 #define IGMP_HOST_LEAVE_MESSAGE       0x17
+#endif	/* !IGMP_HOST_LEAVE_MESSAGE */
+
 #define IGMPV3_HOST_MEMBERSHIP_REPORT 0x22 /* V3 version of 0x12 */
 
 /*
diff --git a/lib/sflow.h b/lib/sflow.h
index 95bedd968..29a7e54e4 100644
--- a/lib/sflow.h
+++ b/lib/sflow.h
@@ -12,6 +12,10 @@
 #include "windefs.h"
 #endif
 
+#ifdef __sun
+#include "solaris/solarisdefs.h"
+#endif /* __sun */
+
 #include "openvswitch/types.h"
 
 typedef enum {
diff --git a/lib/socket-util-unix.c b/lib/socket-util-unix.c
index 59f63fcce..8001072be 100644
--- a/lib/socket-util-unix.c
+++ b/lib/socket-util-unix.c
@@ -32,6 +32,7 @@
 
 VLOG_DEFINE_THIS_MODULE(socket_util_unix);
 
+/* Changed sun to addr to fix compilation error for __sun */
 /* #ifdefs make it a pain to maintain code: you have to try to build both ways.
  * Thus, this file compiles all of the code regardless of the target, by
  * writing "if (LINUX)" instead of "#ifdef __linux__". */
@@ -259,7 +260,7 @@ free_sockaddr_un(int dirfd, const char *linkname)
 }
 
 /* Binds Unix domain socket 'fd' to a file with permissions 0700. */
-static int bind_unix_socket(int fd, struct sockaddr *sun, socklen_t sun_len)
+static int bind_unix_socket(int fd, struct sockaddr *addr, socklen_t addr_len)
 {
     const mode_t mode = 0770;    /* Allow both user and group access. */
 
@@ -271,7 +272,7 @@ static int bind_unix_socket(int fd, struct sockaddr *sun, socklen_t sun_len)
         }
 
         /* Must be after fchmod(). */
-        if (bind(fd, sun, sun_len)) {
+        if (bind(fd, addr, addr_len)) {
             return errno;
         }
         return 0;
@@ -283,7 +284,7 @@ static int bind_unix_socket(int fd, struct sockaddr *sun, socklen_t sun_len)
 
         if (!pid) {
             umask(mode ^ 0777);
-            _exit(bind(fd, sun, sun_len) ? errno : 0);
+            _exit(bind(fd, addr, addr_len) ? errno : 0);
         } else if (pid > 0) {
             int status;
             int error;
@@ -387,10 +388,10 @@ error:
 }
 
 int
-get_unix_name_len(const struct sockaddr_un *sun, socklen_t sun_len)
+get_unix_name_len(const struct sockaddr_un *addr, socklen_t sun_len)
 {
     return (sun_len > offsetof(struct sockaddr_un, sun_path) &&
-            sun->sun_path[0] != 0
+            addr->sun_path[0] != 0
             ? sun_len - offsetof(struct sockaddr_un, sun_path)
             : 0);
 }
diff --git a/lib/socket-util.c b/lib/socket-util.c
index 5a36f3beb..16e4ebf4f 100644
--- a/lib/socket-util.c
+++ b/lib/socket-util.c
@@ -799,15 +799,16 @@ describe_sockaddr(struct ds *string, int fd,
                           ss_get_port(&ss));
 #ifndef _WIN32
         } else if (ss.ss_family == AF_UNIX) {
-            struct sockaddr_un sun;
+	    /* Fix compilation error for __sun */
+            struct sockaddr_un addr;
             const char *null;
             size_t maxlen;
 
-            memcpy(&sun, &ss, sizeof sun);
+            memcpy(&addr, &ss, sizeof addr);
             maxlen = len - offsetof(struct sockaddr_un, sun_path);
-            null = memchr(sun.sun_path, '\0', maxlen);
-            ds_put_buffer(string, sun.sun_path,
-                          null ? null - sun.sun_path : maxlen);
+            null = memchr(addr.sun_path, '\0', maxlen);
+            ds_put_buffer(string, addr.sun_path,
+                          null ? null - addr.sun_path : maxlen);
 #endif
         }
 #ifdef HAVE_NETLINK
@@ -823,10 +824,11 @@ describe_sockaddr(struct ds *string, int fd,
             if (!getsockopt_int(fd, SOL_SOCKET, SO_PROTOCOL, "SO_PROTOCOL",
                                 &protocol)) {
                 switch (protocol) {
+#ifndef __sun
                 case NETLINK_ROUTE:
                     ds_put_cstr(string, "NETLINK_ROUTE");
                     break;
-
+#endif
                 case NETLINK_GENERIC:
                     ds_put_cstr(string, "NETLINK_GENERIC");
                     break;
diff --git a/lib/socket-util.h b/lib/socket-util.h
index 5bf76a40e..289e51281 100644
--- a/lib/socket-util.h
+++ b/lib/socket-util.h
@@ -85,7 +85,8 @@ int drain_rcvbuf(int fd);
 
 int make_unix_socket(int style, bool nonblock,
                      const char *bind_path, const char *connect_path);
-int get_unix_name_len(const struct sockaddr_un *sun, socklen_t sun_len);
+/* Fix compilation for __sun */
+int get_unix_name_len(const struct sockaddr_un *addr, socklen_t addr_len);
 
 /* Helpers for calling ioctl() on an AF_INET socket. */
 struct ifreq;
diff --git a/lib/stream-unix.c b/lib/stream-unix.c
index 6424d3e4a..7f18e40f7 100644
--- a/lib/stream-unix.c
+++ b/lib/stream-unix.c
@@ -37,6 +37,7 @@
 
 VLOG_DEFINE_THIS_MODULE(stream_unix);
 
+/* Changed sun to addr to fix compilation error for __sun */
 /* Active UNIX socket. */
 
 static int
@@ -109,12 +110,12 @@ static int
 punix_accept(int fd, const struct sockaddr_storage *ss, size_t ss_len,
              struct stream **streamp)
 {
-    const struct sockaddr_un *sun = (const struct sockaddr_un *) ss;
-    int name_len = get_unix_name_len(sun, ss_len);
+    const struct sockaddr_un *addr = (const struct sockaddr_un *) ss;
+    int name_len = get_unix_name_len(addr, ss_len);
     char name[128];
 
     if (name_len > 0) {
-        snprintf(name, sizeof name, "unix:%.*s", name_len, sun->sun_path);
+        snprintf(name, sizeof name, "unix:%.*s", name_len, addr->sun_path);
     } else {
         strcpy(name, "unix");
     }
diff --git a/lib/tnl-ports.c b/lib/tnl-ports.c
index ffa13899a..441a7ee2c 100644
--- a/lib/tnl-ports.c
+++ b/lib/tnl-ports.c
@@ -34,6 +34,13 @@
 #include "unixctl.h"
 #include "util.h"
 
+#ifdef __sun
+#ifdef IFNAMSIZ
+#undef IFNAMSIZ
+#define IFNAMSIZ MAXLINKNAMESPECIFIER
+#endif
+#endif
+
 static struct ovs_mutex mutex = OVS_MUTEX_INITIALIZER;
 static struct classifier cls;   /* Tunnel ports. */
 
@@ -170,9 +177,11 @@ tnl_type_to_nw_proto(const char type[])
     if (!strcmp(type, "stt")) {
         return IPPROTO_TCP;
     }
+#ifndef __sun
     if (!strcmp(type, "gre")) {
         return IPPROTO_GRE;
     }
+#endif /* __sun */
     if (!strcmp(type, "vxlan")) {
         return IPPROTO_UDP;
     }
diff --git a/lib/vlog.c b/lib/vlog.c
index 333337b10..43e8d9843 100644
--- a/lib/vlog.c
+++ b/lib/vlog.c
@@ -135,7 +135,9 @@ static struct vlog_facility vlog_facilities[] = {
     {"news", LOG_NEWS},
     {"uucp", LOG_UUCP},
     {"clock", LOG_CRON},
+#ifndef __sun
     {"ftp", LOG_FTP},
+#endif /* __sun */
     {"ntp", 12<<3},
     {"audit", 13<<3},
     {"alert", 14<<3},
diff --git a/m4/openvswitch.m4 b/m4/openvswitch.m4
index a44822319..b74937c7d 100644
--- a/m4/openvswitch.m4
+++ b/m4/openvswitch.m4
@@ -148,6 +148,22 @@ AC_DEFUN([OVS_CHECK_WIN32],
 #endif])
    fi])
 
+dnl OVS_CHECK_SOLARIS - Checks for Solaris.
+dnl
+dnl Update LDFLAGS to include libopenvswitch.la dependency
+dnl
+AC_DEFUN([OVS_CHECK_SOLARIS],
+  [AC_CHECK_HEADER([zone.h],
+                   [SOLARIS=yes],
+                   [SOLARIS=no])
+   AM_CONDITIONAL([SOLARIS], [test "$SOLARIS" = yes])
+   if test "$SOLARIS" = yes; then
+      AC_DEFINE([SOLARIS], [1], [Define to 1 if building on SOLARIS.])
+      AH_BOTTOM([#ifdef SOLARIS
+#include "include/solaris/solarisdefs.h"
+#endif])
+   fi])
+
 dnl OVS_CHECK_WINDOWS
 dnl
 dnl Configure Visual Studio solution build
@@ -175,16 +191,9 @@ AC_ARG_WITH([vstudiotarget],
 
 dnl Checks for Netlink support.
 AC_DEFUN([OVS_CHECK_NETLINK],
-  [AC_CHECK_HEADER([linux/netlink.h],
-                   [HAVE_NETLINK=yes],
-                   [HAVE_NETLINK=no],
-                   [#include <sys/socket.h>
-   ])
-   AM_CONDITIONAL([HAVE_NETLINK], [test "$HAVE_NETLINK" = yes])
-   if test "$HAVE_NETLINK" = yes; then
-      AC_DEFINE([HAVE_NETLINK], [1],
-                [Define to 1 if Netlink protocol is available.])
-   fi])
+  AC_DEFINE([HAVE_NETLINK], [1],
+                [Use Netlink protocol on Solaris.])
+  )
 
 dnl Checks for libcap-ng.
 AC_DEFUN([OVS_CHECK_LIBCAPNG],
diff --git a/ofproto/libofproto.sym.in b/ofproto/libofproto.sym.in
index cdd432740..a6d301751 100644
--- a/ofproto/libofproto.sym.in
+++ b/ofproto/libofproto.sym.in
@@ -1,4 +1,379 @@
 libofproto_@LT_CURRENT@ {
 global:
-        *;
+  bond_account;
+  bond_check_admissibility;
+  bond_choose_output_slave;
+  bond_compose_learning_packet;
+  bond_create;
+  bond_get_changed_active_slave;
+  bond_init;
+  bond_may_recirc;
+  bond_mode_from_string;
+  bond_mode_to_string;
+  bond_rebalance;
+  bond_reconfigure;
+  bond_ref;
+  bond_run;
+  bond_should_send_learning_packets;
+  bond_slave_register;
+  bond_slave_set_may_enable;
+  bond_slave_set_netdev;
+  bond_slave_unregister;
+  bond_unref;
+  bond_update_post_recirc_rules;
+  bond_wait;
+  collectors_count;
+  collectors_create;
+  collectors_destroy;
+  collectors_send;
+  connmgr_count_hidden_rules;
+  connmgr_create;
+  connmgr_destroy;
+  connmgr_failure_duration;
+  connmgr_flushed;
+  connmgr_free_controller_info;
+  connmgr_get_controller_info;
+  connmgr_get_fail_mode;
+  connmgr_get_max_probe_interval;
+  connmgr_get_memory_usage;
+  connmgr_get_snoops;
+  connmgr_has_controllers;
+  connmgr_has_in_band;
+  connmgr_has_snoops;
+  connmgr_is_any_controller_admitted;
+  connmgr_is_any_controller_connected;
+  connmgr_reconnect;
+  connmgr_run;
+  connmgr_send_async_msg;
+  connmgr_send_flow_removed;
+  connmgr_send_port_status;
+  connmgr_send_requestforward;
+  connmgr_send_table_status;
+  connmgr_set_controllers;
+  connmgr_set_extra_in_band_remotes;
+  connmgr_set_fail_mode;
+  connmgr_set_in_band_queue;
+  connmgr_set_snoops;
+  connmgr_wait;
+  connmgr_wants_packet_in_on_miss;
+  default_prefix_fields;
+  dpif_ipfix_add_tunnel_port;
+  dpif_ipfix_bridge_sample;
+  dpif_ipfix_create;
+  dpif_ipfix_del_tunnel_port;
+  dpif_ipfix_flow_sample;
+  dpif_ipfix_get_bridge_exporter_input_sampling;
+  dpif_ipfix_get_bridge_exporter_output_sampling;
+  dpif_ipfix_get_bridge_exporter_probability;
+  dpif_ipfix_get_bridge_exporter_tunnel_sampling;
+  dpif_ipfix_get_flow_exporter_tunnel_sampling;
+  dpif_ipfix_get_stats;
+  dpif_ipfix_get_tunnel_port;
+  dpif_ipfix_ref;
+  dpif_ipfix_run;
+  dpif_ipfix_set_options;
+  dpif_ipfix_unref;
+  dpif_ipfix_wait;
+  dpif_sflow_add_port;
+  dpif_sflow_clear;
+  dpif_sflow_create;
+  dpif_sflow_del_port;
+  dpif_sflow_get_probability;
+  dpif_sflow_is_enabled;
+  dpif_sflow_odp_port_to_ifindex;
+  dpif_sflow_read_actions;
+  dpif_sflow_received;
+  dpif_sflow_ref;
+  dpif_sflow_run;
+  dpif_sflow_set_options;
+  dpif_sflow_unref;
+  dpif_sflow_wait;
+  fail_open_count_rules;
+  fail_open_create;
+  fail_open_destroy;
+  fail_open_flushed;
+  fail_open_is_active;
+  fail_open_maybe_recover;
+  fail_open_run;
+  fail_open_wait;
+  group_dpif_credit_stats;
+  group_dpif_get_buckets;
+  group_dpif_get_fields;
+  group_dpif_get_selection_method;
+  group_dpif_get_selection_method_param;
+  group_dpif_get_type;
+  group_dpif_lookup;
+  in_band_count_rules;
+  in_band_create;
+  in_band_destroy;
+  in_band_must_output_to_local_port;
+  in_band_run;
+  in_band_set_queue;
+  in_band_set_remotes;
+  in_band_wait;
+  mbridge_create;
+  mbridge_has_mirrors;
+  mbridge_need_revalidate;
+  mbridge_ref;
+  mbridge_register_bundle;
+  mbridge_unref;
+  mbridge_unregister_bundle;
+  mirror_bundle_dst;
+  mirror_bundle_out;
+  mirror_bundle_src;
+  mirror_destroy;
+  mirror_get;
+  mirror_get_stats;
+  mirror_set;
+  mirror_update_stats;
+  netflow_create;
+  netflow_exists;
+  netflow_flow_clear;
+  netflow_flow_update;
+  netflow_mask_wc;
+  netflow_ref;
+  netflow_run;
+  netflow_set_options;
+  netflow_unref;
+  netflow_wait;
+  odp_port_to_ofport;
+  ofconn_get_async_config;
+  ofconn_get_bundle;
+  ofconn_get_invalid_ttl_to_controller;
+  ofconn_get_master_election_id;
+  ofconn_get_miss_send_len;
+  ofconn_get_ofproto;
+  ofconn_get_packet_in_format;
+  ofconn_get_protocol;
+  ofconn_get_role;
+  ofconn_get_type;
+  ofconn_insert_bundle;
+  ofconn_pktbuf_retrieve;
+  ofconn_remove_bundle;
+  ofconn_report_flow_mod;
+  ofconn_send_error;
+  ofconn_send_replies;
+  ofconn_send_reply;
+  ofconn_send_role_status;
+  ofconn_set_async_config;
+  ofconn_set_controller_id;
+  ofconn_set_invalid_ttl_to_controller;
+  ofconn_set_master_election_id;
+  ofconn_set_miss_send_len;
+  ofconn_set_packet_in_format;
+  ofconn_set_protocol;
+  ofconn_set_role;
+  ofmonitor_collect_resume_rules;
+  ofmonitor_compose_refresh_updates;
+  ofmonitor_create;
+  ofmonitor_destroy;
+  ofmonitor_flush;
+  ofmonitor_lookup;
+  ofmonitor_report;
+  ofp_bundle_add_message;
+  ofp_bundle_close;
+  ofp_bundle_discard;
+  ofp_bundle_open;
+  ofp_bundle_remove__;
+  ofp_port_to_ofport;
+  ofproto_aa_mapping_register;
+  ofproto_aa_mapping_unregister;
+  ofproto_aa_vlan_get_queue_size;
+  ofproto_aa_vlan_get_queued;
+  ofproto_add_flow;
+  ofproto_async_msg_free;
+  ofproto_bundle_register;
+  ofproto_bundle_unregister;
+  ofproto_check_ofpacts;
+  ofproto_class_register;
+  ofproto_class_unregister;
+  ofproto_configure_table;
+  ofproto_create;
+  ofproto_delete;
+  ofproto_delete_flow;
+  ofproto_destroy;
+  ofproto_dpif_add_internal_flow;
+  ofproto_dpif_backer_enabled;
+  ofproto_dpif_delete_internal_flow;
+  ofproto_dpif_execute_actions;
+  ofproto_dpif_execute_actions__;
+  ofproto_dpif_flow_mod;
+  ofproto_dpif_get_enable_ufid;
+  ofproto_dpif_get_support;
+  ofproto_dpif_get_tables_version;
+  ofproto_dpif_get_uuid;
+  ofproto_dpif_monitor_port_send_soon;
+  ofproto_dpif_monitor_port_update;
+  ofproto_dpif_send_async_msg;
+  ofproto_dpif_send_packet;
+  ofproto_dpif_wants_packet_in_on_miss;
+  ofproto_enumerate_names;
+  ofproto_enumerate_types;
+  ofproto_flow_mod;
+  ofproto_flow_mod_uninit;
+  ofproto_flush_flows;
+  ofproto_free_ofproto_controller_info;
+  ofproto_get_all_flows;
+  ofproto_get_datapath_id;
+  ofproto_get_flow_restore_wait;
+  ofproto_get_memory_usage;
+  ofproto_get_n_tables;
+  ofproto_get_n_visible_tables;
+  ofproto_get_netflow_ids;
+  ofproto_get_ofproto_controller_info;
+  ofproto_get_port;
+  ofproto_get_rstp_status;
+  ofproto_get_snoops;
+  ofproto_get_stp_status;
+  ofproto_group_delete_all;
+  ofproto_group_lookup;
+  ofproto_group_ref;
+  ofproto_group_try_ref;
+  ofproto_group_unref;
+  ofproto_has_snoops;
+  ofproto_init;
+  ofproto_init_max_ports;
+  ofproto_init_tables;
+  ofproto_is_alive;
+  ofproto_is_mirror_output_bundle;
+  ofproto_lookup;
+  ofproto_mirror_get_stats;
+  ofproto_mirror_register;
+  ofproto_mirror_unregister;
+  ofproto_normalize_type;
+  ofproto_parse_name;
+  ofproto_port_add;
+  ofproto_port_bfd_status_changed;
+  ofproto_port_cfm_status_changed;
+  ofproto_port_clear_cfm;
+  ofproto_port_clone;
+  ofproto_port_del;
+  ofproto_port_destroy;
+  ofproto_port_dump_done;
+  ofproto_port_dump_next;
+  ofproto_port_dump_start;
+  ofproto_port_get_bfd_status;
+  ofproto_port_get_cfm_status;
+  ofproto_port_get_lacp_stats;
+  ofproto_port_get_rstp_status;
+  ofproto_port_get_stats;
+  ofproto_port_get_stp_stats;
+  ofproto_port_get_stp_status;
+  ofproto_port_is_lacp_current;
+  ofproto_port_open_type;
+  ofproto_port_query_by_name;
+  ofproto_port_set_bfd;
+  ofproto_port_set_cfm;
+  ofproto_port_set_config;
+  ofproto_port_set_lldp;
+  ofproto_port_set_mcast_snooping;
+  ofproto_port_set_queues;
+  ofproto_port_set_rstp;
+  ofproto_port_set_state;
+  ofproto_port_set_stp;
+  ofproto_port_unregister;
+  ofproto_reconnect_controllers;
+  ofproto_rule_delete;
+  ofproto_rule_expire;
+  ofproto_rule_has_out_port;
+  ofproto_rule_reduce_timeouts;
+  ofproto_rule_ref;
+  ofproto_rule_try_ref;
+  ofproto_rule_unref;
+  ofproto_run;
+  ofproto_set_aa;
+  ofproto_set_controllers;
+  ofproto_set_cpu_mask;
+  ofproto_set_datapath_id;
+  ofproto_set_dp_desc;
+  ofproto_set_extra_in_band_remotes;
+  ofproto_set_fail_mode;
+  ofproto_set_flood_vlans;
+  ofproto_set_flow_limit;
+  ofproto_set_flow_restore_wait;
+  ofproto_set_forward_bpdu;
+  ofproto_set_in_band_queue;
+  ofproto_set_ipfix;
+  ofproto_set_mac_table_config;
+  ofproto_set_max_idle;
+  ofproto_set_mcast_snooping;
+  ofproto_set_netflow;
+  ofproto_set_rstp;
+  ofproto_set_sflow;
+  ofproto_set_snoops;
+  ofproto_set_stp;
+  ofproto_set_threads;
+  ofproto_table_get_miss_config;
+  ofproto_tunnel_init;
+  ofproto_type_get_memory_usage;
+  ofproto_type_run;
+  ofproto_type_wait;
+  ofproto_wait;
+  ovs_native_tunneling_is_on;
+  pinsched_create;
+  pinsched_destroy;
+  pinsched_get_limits;
+  pinsched_get_stats;
+  pinsched_run;
+  pinsched_send;
+  pinsched_set_limits;
+  pinsched_wait;
+  recirc_alloc_id;
+  recirc_alloc_id_ctx;
+  recirc_find_id;
+  recirc_free_id;
+  recirc_free_ofproto;
+  recirc_id_node_find;
+  recirc_id_node_unref;
+  recirc_run;
+  rule_actions_create;
+  rule_actions_destroy;
+  rule_dpif_credit_stats;
+  rule_dpif_get_actions;
+  rule_dpif_get_flow_cookie;
+  rule_dpif_lookup_from_table;
+  rule_dpif_reduce_timeouts;
+  rule_set_recirc_id;
+  table_is_internal;
+  tnl_port_add;
+  tnl_port_build_header;
+  tnl_port_del;
+  tnl_port_receive;
+  tnl_port_reconfigure;
+  tnl_port_send;
+  tnl_process_ecn;
+  tnl_wc_init;
+  udpif_create;
+  udpif_destroy;
+  udpif_dump_seq;
+  udpif_flush;
+  udpif_get_memory_usage;
+  udpif_init;
+  udpif_revalidate;
+  udpif_run;
+  udpif_set_threads;
+  udpif_synchronize;
+  xlate_actions;
+  xlate_actions_for_side_effects;
+  xlate_bundle_remove;
+  xlate_bundle_set;
+  xlate_cache_clear;
+  xlate_cache_delete;
+  xlate_cache_new;
+  xlate_in_init;
+  xlate_lookup;
+  xlate_lookup_ofproto;
+  xlate_ofport_remove;
+  xlate_ofport_set;
+  xlate_ofproto_set;
+  xlate_out_uninit;
+  xlate_push_stats;
+  xlate_remove_ofproto;
+  xlate_resume;
+  xlate_send_packet;
+  xlate_strerror;
+  xlate_txn_commit;
+  xlate_txn_start;
+local:
+    *;
 };
diff --git a/ovn/lib/libovn.sym.in b/ovn/lib/libovn.sym.in
index 360de0fe8..058be559f 100644
--- a/ovn/lib/libovn.sym.in
+++ b/ovn/lib/libovn.sym.in
@@ -1,4 +1,1064 @@
 libovn_@LT_CURRENT@ {
 global:
-        *;
+  alloc_nat_zone_key;
+  default_nb_db;
+  default_sb_db;
+  destroy_lport_addresses;
+  expr_annotate;
+  expr_annotate__;
+  expr_clone;
+  expr_combine;
+  expr_constant_destroy;
+  expr_constant_format;
+  expr_constant_parse;
+  expr_constant_set_destroy;
+  expr_constant_set_format;
+  expr_constant_set_parse;
+  expr_create_andor;
+  expr_create_boolean;
+  expr_destroy;
+  expr_evaluate;
+  expr_field_format;
+  expr_field_parse;
+  expr_format;
+  expr_honors_invariants;
+  expr_is_normalized;
+  expr_level_to_string;
+  expr_macros_add;
+  expr_macros_destroy;
+  expr_macros_remove;
+  expr_matches_destroy;
+  expr_matches_print;
+  expr_normalize;
+  expr_parse;
+  expr_parse__;
+  expr_parse_microflow;
+  expr_parse_string;
+  expr_print;
+  expr_relop_from_token;
+  expr_relop_to_string;
+  expr_resolve_field;
+  expr_simplify;
+  expr_symbol_format;
+  expr_symtab_add_field;
+  expr_symtab_add_predicate;
+  expr_symtab_add_string;
+  expr_symtab_add_subfield;
+  expr_symtab_destroy;
+  expr_to_matches;
+  expr_type_check;
+  extract_lrp_networks;
+  extract_lsp_addresses;
+  lex_format_to_string;
+  lex_token_destroy;
+  lex_token_format;
+  lex_token_init;
+  lex_token_parse;
+  lex_token_strcpy;
+  lex_token_strset;
+  lex_token_swap;
+  lex_token_vsprintf;
+  lexer_destroy;
+  lexer_error;
+  lexer_force_end;
+  lexer_force_int;
+  lexer_force_match;
+  lexer_get;
+  lexer_get_int;
+  lexer_init;
+  lexer_is_int;
+  lexer_lookahead;
+  lexer_match;
+  lexer_match_id;
+  lexer_steal_error;
+  lexer_syntax_error;
+  nbrec_acl_add_clause_action;
+  nbrec_acl_add_clause_direction;
+  nbrec_acl_add_clause_external_ids;
+  nbrec_acl_add_clause_false;
+  nbrec_acl_add_clause_log;
+  nbrec_acl_add_clause_match;
+  nbrec_acl_add_clause_priority;
+  nbrec_acl_add_clause_true;
+  nbrec_acl_delete;
+  nbrec_acl_first;
+  nbrec_acl_get_action;
+  nbrec_acl_get_direction;
+  nbrec_acl_get_external_ids;
+  nbrec_acl_get_for_uuid;
+  nbrec_acl_get_log;
+  nbrec_acl_get_match;
+  nbrec_acl_get_priority;
+  nbrec_acl_get_seqno;
+  nbrec_acl_init;
+  nbrec_acl_insert;
+  nbrec_acl_is_updated;
+  nbrec_acl_next;
+  nbrec_acl_remove_clause_action;
+  nbrec_acl_remove_clause_direction;
+  nbrec_acl_remove_clause_external_ids;
+  nbrec_acl_remove_clause_false;
+  nbrec_acl_remove_clause_log;
+  nbrec_acl_remove_clause_match;
+  nbrec_acl_remove_clause_priority;
+  nbrec_acl_remove_clause_true;
+  nbrec_acl_row_get_seqno;
+  nbrec_acl_set_action;
+  nbrec_acl_set_direction;
+  nbrec_acl_set_external_ids;
+  nbrec_acl_set_log;
+  nbrec_acl_set_match;
+  nbrec_acl_set_priority;
+  nbrec_acl_track_get_first;
+  nbrec_acl_track_get_next;
+  nbrec_acl_update_external_ids_delkey;
+  nbrec_acl_update_external_ids_setkey;
+  nbrec_acl_verify_action;
+  nbrec_acl_verify_direction;
+  nbrec_acl_verify_external_ids;
+  nbrec_acl_verify_log;
+  nbrec_acl_verify_match;
+  nbrec_acl_verify_priority;
+  nbrec_address_set_add_clause_addresses;
+  nbrec_address_set_add_clause_external_ids;
+  nbrec_address_set_add_clause_false;
+  nbrec_address_set_add_clause_name;
+  nbrec_address_set_add_clause_true;
+  nbrec_address_set_columns;
+  nbrec_address_set_delete;
+  nbrec_address_set_first;
+  nbrec_address_set_get_addresses;
+  nbrec_address_set_get_external_ids;
+  nbrec_address_set_get_for_uuid;
+  nbrec_address_set_get_name;
+  nbrec_address_set_get_seqno;
+  nbrec_address_set_init;
+  nbrec_address_set_insert;
+  nbrec_address_set_is_updated;
+  nbrec_address_set_next;
+  nbrec_address_set_remove_clause_addresses;
+  nbrec_address_set_remove_clause_external_ids;
+  nbrec_address_set_remove_clause_false;
+  nbrec_address_set_remove_clause_name;
+  nbrec_address_set_remove_clause_true;
+  nbrec_address_set_row_get_seqno;
+  nbrec_address_set_set_addresses;
+  nbrec_address_set_set_external_ids;
+  nbrec_address_set_set_name;
+  nbrec_address_set_track_get_first;
+  nbrec_address_set_track_get_next;
+  nbrec_address_set_update_addresses_addvalue;
+  nbrec_address_set_update_addresses_delvalue;
+  nbrec_address_set_update_external_ids_delkey;
+  nbrec_address_set_update_external_ids_setkey;
+  nbrec_address_set_verify_addresses;
+  nbrec_address_set_verify_external_ids;
+  nbrec_address_set_verify_name;
+  nbrec_dhcp_options_add_clause_cidr;
+  nbrec_dhcp_options_add_clause_external_ids;
+  nbrec_dhcp_options_add_clause_false;
+  nbrec_dhcp_options_add_clause_options;
+  nbrec_dhcp_options_add_clause_true;
+  nbrec_dhcp_options_delete;
+  nbrec_dhcp_options_first;
+  nbrec_dhcp_options_get_cidr;
+  nbrec_dhcp_options_get_external_ids;
+  nbrec_dhcp_options_get_for_uuid;
+  nbrec_dhcp_options_get_options;
+  nbrec_dhcp_options_get_seqno;
+  nbrec_dhcp_options_init;
+  nbrec_dhcp_options_insert;
+  nbrec_dhcp_options_is_updated;
+  nbrec_dhcp_options_next;
+  nbrec_dhcp_options_remove_clause_cidr;
+  nbrec_dhcp_options_remove_clause_external_ids;
+  nbrec_dhcp_options_remove_clause_false;
+  nbrec_dhcp_options_remove_clause_options;
+  nbrec_dhcp_options_remove_clause_true;
+  nbrec_dhcp_options_row_get_seqno;
+  nbrec_dhcp_options_set_cidr;
+  nbrec_dhcp_options_set_external_ids;
+  nbrec_dhcp_options_set_options;
+  nbrec_dhcp_options_track_get_first;
+  nbrec_dhcp_options_track_get_next;
+  nbrec_dhcp_options_update_external_ids_delkey;
+  nbrec_dhcp_options_update_external_ids_setkey;
+  nbrec_dhcp_options_update_options_delkey;
+  nbrec_dhcp_options_update_options_setkey;
+  nbrec_dhcp_options_verify_cidr;
+  nbrec_dhcp_options_verify_external_ids;
+  nbrec_dhcp_options_verify_options;
+  nbrec_get_db_version;
+  nbrec_idl_class;
+  nbrec_init;
+  nbrec_load_balancer_add_clause_external_ids;
+  nbrec_load_balancer_add_clause_false;
+  nbrec_load_balancer_add_clause_protocol;
+  nbrec_load_balancer_add_clause_true;
+  nbrec_load_balancer_add_clause_vips;
+  nbrec_load_balancer_delete;
+  nbrec_load_balancer_first;
+  nbrec_load_balancer_get_external_ids;
+  nbrec_load_balancer_get_for_uuid;
+  nbrec_load_balancer_get_protocol;
+  nbrec_load_balancer_get_seqno;
+  nbrec_load_balancer_get_vips;
+  nbrec_load_balancer_init;
+  nbrec_load_balancer_insert;
+  nbrec_load_balancer_is_updated;
+  nbrec_load_balancer_next;
+  nbrec_load_balancer_remove_clause_external_ids;
+  nbrec_load_balancer_remove_clause_false;
+  nbrec_load_balancer_remove_clause_protocol;
+  nbrec_load_balancer_remove_clause_true;
+  nbrec_load_balancer_remove_clause_vips;
+  nbrec_load_balancer_row_get_seqno;
+  nbrec_load_balancer_set_external_ids;
+  nbrec_load_balancer_set_protocol;
+  nbrec_load_balancer_set_vips;
+  nbrec_load_balancer_track_get_first;
+  nbrec_load_balancer_track_get_next;
+  nbrec_load_balancer_update_external_ids_delkey;
+  nbrec_load_balancer_update_external_ids_setkey;
+  nbrec_load_balancer_update_protocol_addvalue;
+  nbrec_load_balancer_update_protocol_delvalue;
+  nbrec_load_balancer_update_vips_delkey;
+  nbrec_load_balancer_update_vips_setkey;
+  nbrec_load_balancer_verify_external_ids;
+  nbrec_load_balancer_verify_protocol;
+  nbrec_load_balancer_verify_vips;
+  nbrec_logical_router_add_clause_enabled;
+  nbrec_logical_router_add_clause_external_ids;
+  nbrec_logical_router_add_clause_false;
+  nbrec_logical_router_add_clause_load_balancer;
+  nbrec_logical_router_add_clause_name;
+  nbrec_logical_router_add_clause_nat;
+  nbrec_logical_router_add_clause_options;
+  nbrec_logical_router_add_clause_ports;
+  nbrec_logical_router_add_clause_static_routes;
+  nbrec_logical_router_add_clause_true;
+  nbrec_logical_router_columns;
+  nbrec_logical_router_delete;
+  nbrec_logical_router_first;
+  nbrec_logical_router_get_enabled;
+  nbrec_logical_router_get_external_ids;
+  nbrec_logical_router_get_for_uuid;
+  nbrec_logical_router_get_load_balancer;
+  nbrec_logical_router_get_name;
+  nbrec_logical_router_get_nat;
+  nbrec_logical_router_get_options;
+  nbrec_logical_router_get_ports;
+  nbrec_logical_router_get_seqno;
+  nbrec_logical_router_get_static_routes;
+  nbrec_logical_router_init;
+  nbrec_logical_router_insert;
+  nbrec_logical_router_is_updated;
+  nbrec_logical_router_next;
+  nbrec_logical_router_port_add_clause_enabled;
+  nbrec_logical_router_port_add_clause_external_ids;
+  nbrec_logical_router_port_add_clause_false;
+  nbrec_logical_router_port_add_clause_mac;
+  nbrec_logical_router_port_add_clause_name;
+  nbrec_logical_router_port_add_clause_networks;
+  nbrec_logical_router_port_add_clause_peer;
+  nbrec_logical_router_port_add_clause_true;
+  nbrec_logical_router_port_columns;
+  nbrec_logical_router_port_delete;
+  nbrec_logical_router_port_first;
+  nbrec_logical_router_port_get_enabled;
+  nbrec_logical_router_port_get_external_ids;
+  nbrec_logical_router_port_get_for_uuid;
+  nbrec_logical_router_port_get_mac;
+  nbrec_logical_router_port_get_name;
+  nbrec_logical_router_port_get_networks;
+  nbrec_logical_router_port_get_peer;
+  nbrec_logical_router_port_get_seqno;
+  nbrec_logical_router_port_init;
+  nbrec_logical_router_port_insert;
+  nbrec_logical_router_port_is_updated;
+  nbrec_logical_router_port_next;
+  nbrec_logical_router_port_remove_clause_enabled;
+  nbrec_logical_router_port_remove_clause_external_ids;
+  nbrec_logical_router_port_remove_clause_false;
+  nbrec_logical_router_port_remove_clause_mac;
+  nbrec_logical_router_port_remove_clause_name;
+  nbrec_logical_router_port_remove_clause_networks;
+  nbrec_logical_router_port_remove_clause_peer;
+  nbrec_logical_router_port_remove_clause_true;
+  nbrec_logical_router_port_row_get_seqno;
+  nbrec_logical_router_port_set_enabled;
+  nbrec_logical_router_port_set_external_ids;
+  nbrec_logical_router_port_set_mac;
+  nbrec_logical_router_port_set_name;
+  nbrec_logical_router_port_set_networks;
+  nbrec_logical_router_port_set_peer;
+  nbrec_logical_router_port_track_get_first;
+  nbrec_logical_router_port_track_get_next;
+  nbrec_logical_router_port_update_enabled_addvalue;
+  nbrec_logical_router_port_update_enabled_delvalue;
+  nbrec_logical_router_port_update_external_ids_delkey;
+  nbrec_logical_router_port_update_external_ids_setkey;
+  nbrec_logical_router_port_update_networks_addvalue;
+  nbrec_logical_router_port_update_networks_delvalue;
+  nbrec_logical_router_port_update_peer_addvalue;
+  nbrec_logical_router_port_update_peer_delvalue;
+  nbrec_logical_router_port_verify_enabled;
+  nbrec_logical_router_port_verify_external_ids;
+  nbrec_logical_router_port_verify_mac;
+  nbrec_logical_router_port_verify_name;
+  nbrec_logical_router_port_verify_networks;
+  nbrec_logical_router_port_verify_peer;
+  nbrec_logical_router_remove_clause_enabled;
+  nbrec_logical_router_remove_clause_external_ids;
+  nbrec_logical_router_remove_clause_false;
+  nbrec_logical_router_remove_clause_load_balancer;
+  nbrec_logical_router_remove_clause_name;
+  nbrec_logical_router_remove_clause_nat;
+  nbrec_logical_router_remove_clause_options;
+  nbrec_logical_router_remove_clause_ports;
+  nbrec_logical_router_remove_clause_static_routes;
+  nbrec_logical_router_remove_clause_true;
+  nbrec_logical_router_row_get_seqno;
+  nbrec_logical_router_set_enabled;
+  nbrec_logical_router_set_external_ids;
+  nbrec_logical_router_set_load_balancer;
+  nbrec_logical_router_set_name;
+  nbrec_logical_router_set_nat;
+  nbrec_logical_router_set_options;
+  nbrec_logical_router_set_ports;
+  nbrec_logical_router_set_static_routes;
+  nbrec_logical_router_static_route_add_clause_false;
+  nbrec_logical_router_static_route_add_clause_ip_prefix;
+  nbrec_logical_router_static_route_add_clause_nexthop;
+  nbrec_logical_router_static_route_add_clause_output_port;
+  nbrec_logical_router_static_route_add_clause_true;
+  nbrec_logical_router_static_route_delete;
+  nbrec_logical_router_static_route_first;
+  nbrec_logical_router_static_route_get_for_uuid;
+  nbrec_logical_router_static_route_get_ip_prefix;
+  nbrec_logical_router_static_route_get_nexthop;
+  nbrec_logical_router_static_route_get_output_port;
+  nbrec_logical_router_static_route_get_seqno;
+  nbrec_logical_router_static_route_init;
+  nbrec_logical_router_static_route_insert;
+  nbrec_logical_router_static_route_is_updated;
+  nbrec_logical_router_static_route_next;
+  nbrec_logical_router_static_route_remove_clause_false;
+  nbrec_logical_router_static_route_remove_clause_ip_prefix;
+  nbrec_logical_router_static_route_remove_clause_nexthop;
+  nbrec_logical_router_static_route_remove_clause_output_port;
+  nbrec_logical_router_static_route_remove_clause_true;
+  nbrec_logical_router_static_route_row_get_seqno;
+  nbrec_logical_router_static_route_set_ip_prefix;
+  nbrec_logical_router_static_route_set_nexthop;
+  nbrec_logical_router_static_route_set_output_port;
+  nbrec_logical_router_static_route_track_get_first;
+  nbrec_logical_router_static_route_track_get_next;
+  nbrec_logical_router_static_route_update_output_port_addvalue;
+  nbrec_logical_router_static_route_update_output_port_delvalue;
+  nbrec_logical_router_static_route_verify_ip_prefix;
+  nbrec_logical_router_static_route_verify_nexthop;
+  nbrec_logical_router_static_route_verify_output_port;
+  nbrec_logical_router_track_get_first;
+  nbrec_logical_router_track_get_next;
+  nbrec_logical_router_update_enabled_addvalue;
+  nbrec_logical_router_update_enabled_delvalue;
+  nbrec_logical_router_update_external_ids_delkey;
+  nbrec_logical_router_update_external_ids_setkey;
+  nbrec_logical_router_update_load_balancer_addvalue;
+  nbrec_logical_router_update_load_balancer_delvalue;
+  nbrec_logical_router_update_nat_addvalue;
+  nbrec_logical_router_update_nat_delvalue;
+  nbrec_logical_router_update_options_delkey;
+  nbrec_logical_router_update_options_setkey;
+  nbrec_logical_router_update_ports_addvalue;
+  nbrec_logical_router_update_ports_delvalue;
+  nbrec_logical_router_update_static_routes_addvalue;
+  nbrec_logical_router_update_static_routes_delvalue;
+  nbrec_logical_router_verify_enabled;
+  nbrec_logical_router_verify_external_ids;
+  nbrec_logical_router_verify_load_balancer;
+  nbrec_logical_router_verify_name;
+  nbrec_logical_router_verify_nat;
+  nbrec_logical_router_verify_options;
+  nbrec_logical_router_verify_ports;
+  nbrec_logical_router_verify_static_routes;
+  nbrec_logical_switch_add_clause_acls;
+  nbrec_logical_switch_add_clause_external_ids;
+  nbrec_logical_switch_add_clause_false;
+  nbrec_logical_switch_add_clause_load_balancer;
+  nbrec_logical_switch_add_clause_name;
+  nbrec_logical_switch_add_clause_other_config;
+  nbrec_logical_switch_add_clause_ports;
+  nbrec_logical_switch_add_clause_true;
+  nbrec_logical_switch_columns;
+  nbrec_logical_switch_delete;
+  nbrec_logical_switch_first;
+  nbrec_logical_switch_get_acls;
+  nbrec_logical_switch_get_external_ids;
+  nbrec_logical_switch_get_for_uuid;
+  nbrec_logical_switch_get_load_balancer;
+  nbrec_logical_switch_get_name;
+  nbrec_logical_switch_get_other_config;
+  nbrec_logical_switch_get_ports;
+  nbrec_logical_switch_get_seqno;
+  nbrec_logical_switch_init;
+  nbrec_logical_switch_insert;
+  nbrec_logical_switch_is_updated;
+  nbrec_logical_switch_next;
+  nbrec_logical_switch_port_add_clause_addresses;
+  nbrec_logical_switch_port_add_clause_dhcpv4_options;
+  nbrec_logical_switch_port_add_clause_dhcpv6_options;
+  nbrec_logical_switch_port_add_clause_dynamic_addresses;
+  nbrec_logical_switch_port_add_clause_enabled;
+  nbrec_logical_switch_port_add_clause_external_ids;
+  nbrec_logical_switch_port_add_clause_false;
+  nbrec_logical_switch_port_add_clause_name;
+  nbrec_logical_switch_port_add_clause_options;
+  nbrec_logical_switch_port_add_clause_parent_name;
+  nbrec_logical_switch_port_add_clause_port_security;
+  nbrec_logical_switch_port_add_clause_tag;
+  nbrec_logical_switch_port_add_clause_tag_request;
+  nbrec_logical_switch_port_add_clause_true;
+  nbrec_logical_switch_port_add_clause_type;
+  nbrec_logical_switch_port_add_clause_up;
+  nbrec_logical_switch_port_columns;
+  nbrec_logical_switch_port_delete;
+  nbrec_logical_switch_port_first;
+  nbrec_logical_switch_port_get_addresses;
+  nbrec_logical_switch_port_get_dhcpv4_options;
+  nbrec_logical_switch_port_get_dhcpv6_options;
+  nbrec_logical_switch_port_get_dynamic_addresses;
+  nbrec_logical_switch_port_get_enabled;
+  nbrec_logical_switch_port_get_external_ids;
+  nbrec_logical_switch_port_get_for_uuid;
+  nbrec_logical_switch_port_get_name;
+  nbrec_logical_switch_port_get_options;
+  nbrec_logical_switch_port_get_parent_name;
+  nbrec_logical_switch_port_get_port_security;
+  nbrec_logical_switch_port_get_seqno;
+  nbrec_logical_switch_port_get_tag;
+  nbrec_logical_switch_port_get_tag_request;
+  nbrec_logical_switch_port_get_type;
+  nbrec_logical_switch_port_get_up;
+  nbrec_logical_switch_port_init;
+  nbrec_logical_switch_port_insert;
+  nbrec_logical_switch_port_is_updated;
+  nbrec_logical_switch_port_next;
+  nbrec_logical_switch_port_remove_clause_addresses;
+  nbrec_logical_switch_port_remove_clause_dhcpv4_options;
+  nbrec_logical_switch_port_remove_clause_dhcpv6_options;
+  nbrec_logical_switch_port_remove_clause_dynamic_addresses;
+  nbrec_logical_switch_port_remove_clause_enabled;
+  nbrec_logical_switch_port_remove_clause_external_ids;
+  nbrec_logical_switch_port_remove_clause_false;
+  nbrec_logical_switch_port_remove_clause_name;
+  nbrec_logical_switch_port_remove_clause_options;
+  nbrec_logical_switch_port_remove_clause_parent_name;
+  nbrec_logical_switch_port_remove_clause_port_security;
+  nbrec_logical_switch_port_remove_clause_tag;
+  nbrec_logical_switch_port_remove_clause_tag_request;
+  nbrec_logical_switch_port_remove_clause_true;
+  nbrec_logical_switch_port_remove_clause_type;
+  nbrec_logical_switch_port_remove_clause_up;
+  nbrec_logical_switch_port_row_get_seqno;
+  nbrec_logical_switch_port_set_addresses;
+  nbrec_logical_switch_port_set_dhcpv4_options;
+  nbrec_logical_switch_port_set_dhcpv6_options;
+  nbrec_logical_switch_port_set_dynamic_addresses;
+  nbrec_logical_switch_port_set_enabled;
+  nbrec_logical_switch_port_set_external_ids;
+  nbrec_logical_switch_port_set_name;
+  nbrec_logical_switch_port_set_options;
+  nbrec_logical_switch_port_set_parent_name;
+  nbrec_logical_switch_port_set_port_security;
+  nbrec_logical_switch_port_set_tag;
+  nbrec_logical_switch_port_set_tag_request;
+  nbrec_logical_switch_port_set_type;
+  nbrec_logical_switch_port_set_up;
+  nbrec_logical_switch_port_track_get_first;
+  nbrec_logical_switch_port_track_get_next;
+  nbrec_logical_switch_port_update_addresses_addvalue;
+  nbrec_logical_switch_port_update_addresses_delvalue;
+  nbrec_logical_switch_port_update_dhcpv4_options_addvalue;
+  nbrec_logical_switch_port_update_dhcpv4_options_delvalue;
+  nbrec_logical_switch_port_update_dhcpv6_options_addvalue;
+  nbrec_logical_switch_port_update_dhcpv6_options_delvalue;
+  nbrec_logical_switch_port_update_dynamic_addresses_addvalue;
+  nbrec_logical_switch_port_update_dynamic_addresses_delvalue;
+  nbrec_logical_switch_port_update_enabled_addvalue;
+  nbrec_logical_switch_port_update_enabled_delvalue;
+  nbrec_logical_switch_port_update_external_ids_delkey;
+  nbrec_logical_switch_port_update_external_ids_setkey;
+  nbrec_logical_switch_port_update_options_delkey;
+  nbrec_logical_switch_port_update_options_setkey;
+  nbrec_logical_switch_port_update_parent_name_addvalue;
+  nbrec_logical_switch_port_update_parent_name_delvalue;
+  nbrec_logical_switch_port_update_port_security_addvalue;
+  nbrec_logical_switch_port_update_port_security_delvalue;
+  nbrec_logical_switch_port_update_tag_addvalue;
+  nbrec_logical_switch_port_update_tag_delvalue;
+  nbrec_logical_switch_port_update_tag_request_addvalue;
+  nbrec_logical_switch_port_update_tag_request_delvalue;
+  nbrec_logical_switch_port_update_up_addvalue;
+  nbrec_logical_switch_port_update_up_delvalue;
+  nbrec_logical_switch_port_verify_addresses;
+  nbrec_logical_switch_port_verify_dhcpv4_options;
+  nbrec_logical_switch_port_verify_dhcpv6_options;
+  nbrec_logical_switch_port_verify_dynamic_addresses;
+  nbrec_logical_switch_port_verify_enabled;
+  nbrec_logical_switch_port_verify_external_ids;
+  nbrec_logical_switch_port_verify_name;
+  nbrec_logical_switch_port_verify_options;
+  nbrec_logical_switch_port_verify_parent_name;
+  nbrec_logical_switch_port_verify_port_security;
+  nbrec_logical_switch_port_verify_tag;
+  nbrec_logical_switch_port_verify_tag_request;
+  nbrec_logical_switch_port_verify_type;
+  nbrec_logical_switch_port_verify_up;
+  nbrec_logical_switch_remove_clause_acls;
+  nbrec_logical_switch_remove_clause_external_ids;
+  nbrec_logical_switch_remove_clause_false;
+  nbrec_logical_switch_remove_clause_load_balancer;
+  nbrec_logical_switch_remove_clause_name;
+  nbrec_logical_switch_remove_clause_other_config;
+  nbrec_logical_switch_remove_clause_ports;
+  nbrec_logical_switch_remove_clause_true;
+  nbrec_logical_switch_row_get_seqno;
+  nbrec_logical_switch_set_acls;
+  nbrec_logical_switch_set_external_ids;
+  nbrec_logical_switch_set_load_balancer;
+  nbrec_logical_switch_set_name;
+  nbrec_logical_switch_set_other_config;
+  nbrec_logical_switch_set_ports;
+  nbrec_logical_switch_track_get_first;
+  nbrec_logical_switch_track_get_next;
+  nbrec_logical_switch_update_acls_addvalue;
+  nbrec_logical_switch_update_acls_delvalue;
+  nbrec_logical_switch_update_external_ids_delkey;
+  nbrec_logical_switch_update_external_ids_setkey;
+  nbrec_logical_switch_update_load_balancer_addvalue;
+  nbrec_logical_switch_update_load_balancer_delvalue;
+  nbrec_logical_switch_update_other_config_delkey;
+  nbrec_logical_switch_update_other_config_setkey;
+  nbrec_logical_switch_update_ports_addvalue;
+  nbrec_logical_switch_update_ports_delvalue;
+  nbrec_logical_switch_verify_acls;
+  nbrec_logical_switch_verify_external_ids;
+  nbrec_logical_switch_verify_load_balancer;
+  nbrec_logical_switch_verify_name;
+  nbrec_logical_switch_verify_other_config;
+  nbrec_logical_switch_verify_ports;
+  nbrec_nat_add_clause_external_ip;
+  nbrec_nat_add_clause_false;
+  nbrec_nat_add_clause_logical_ip;
+  nbrec_nat_add_clause_true;
+  nbrec_nat_add_clause_type;
+  nbrec_nat_delete;
+  nbrec_nat_first;
+  nbrec_nat_get_external_ip;
+  nbrec_nat_get_for_uuid;
+  nbrec_nat_get_logical_ip;
+  nbrec_nat_get_seqno;
+  nbrec_nat_get_type;
+  nbrec_nat_init;
+  nbrec_nat_insert;
+  nbrec_nat_is_updated;
+  nbrec_nat_next;
+  nbrec_nat_remove_clause_external_ip;
+  nbrec_nat_remove_clause_false;
+  nbrec_nat_remove_clause_logical_ip;
+  nbrec_nat_remove_clause_true;
+  nbrec_nat_remove_clause_type;
+  nbrec_nat_row_get_seqno;
+  nbrec_nat_set_external_ip;
+  nbrec_nat_set_logical_ip;
+  nbrec_nat_set_type;
+  nbrec_nat_track_get_first;
+  nbrec_nat_track_get_next;
+  nbrec_nat_verify_external_ip;
+  nbrec_nat_verify_logical_ip;
+  nbrec_nat_verify_type;
+  nbrec_nb_global_add_clause_external_ids;
+  nbrec_nb_global_add_clause_false;
+  nbrec_nb_global_add_clause_hv_cfg;
+  nbrec_nb_global_add_clause_nb_cfg;
+  nbrec_nb_global_add_clause_sb_cfg;
+  nbrec_nb_global_add_clause_true;
+  nbrec_nb_global_columns;
+  nbrec_nb_global_delete;
+  nbrec_nb_global_first;
+  nbrec_nb_global_get_external_ids;
+  nbrec_nb_global_get_for_uuid;
+  nbrec_nb_global_get_hv_cfg;
+  nbrec_nb_global_get_nb_cfg;
+  nbrec_nb_global_get_sb_cfg;
+  nbrec_nb_global_get_seqno;
+  nbrec_nb_global_init;
+  nbrec_nb_global_insert;
+  nbrec_nb_global_is_updated;
+  nbrec_nb_global_next;
+  nbrec_nb_global_remove_clause_external_ids;
+  nbrec_nb_global_remove_clause_false;
+  nbrec_nb_global_remove_clause_hv_cfg;
+  nbrec_nb_global_remove_clause_nb_cfg;
+  nbrec_nb_global_remove_clause_sb_cfg;
+  nbrec_nb_global_remove_clause_true;
+  nbrec_nb_global_row_get_seqno;
+  nbrec_nb_global_set_external_ids;
+  nbrec_nb_global_set_hv_cfg;
+  nbrec_nb_global_set_nb_cfg;
+  nbrec_nb_global_set_sb_cfg;
+  nbrec_nb_global_track_get_first;
+  nbrec_nb_global_track_get_next;
+  nbrec_nb_global_update_external_ids_delkey;
+  nbrec_nb_global_update_external_ids_setkey;
+  nbrec_nb_global_verify_external_ids;
+  nbrec_nb_global_verify_hv_cfg;
+  nbrec_nb_global_verify_nb_cfg;
+  nbrec_nb_global_verify_sb_cfg;
+  nbrec_table_classes;
+  ovn_init_symtab;
+  ovnact_init;
+  ovnact_put;
+  ovnacts_encode;
+  ovnacts_format;
+  ovnacts_free;
+  ovnacts_parse;
+  ovnacts_parse_string;
+  sbrec_address_set_add_clause_addresses;
+  sbrec_address_set_add_clause_false;
+  sbrec_address_set_add_clause_name;
+  sbrec_address_set_add_clause_true;
+  sbrec_address_set_columns;
+  sbrec_address_set_delete;
+  sbrec_address_set_first;
+  sbrec_address_set_get_addresses;
+  sbrec_address_set_get_for_uuid;
+  sbrec_address_set_get_name;
+  sbrec_address_set_get_seqno;
+  sbrec_address_set_init;
+  sbrec_address_set_insert;
+  sbrec_address_set_is_updated;
+  sbrec_address_set_next;
+  sbrec_address_set_remove_clause_addresses;
+  sbrec_address_set_remove_clause_false;
+  sbrec_address_set_remove_clause_name;
+  sbrec_address_set_remove_clause_true;
+  sbrec_address_set_row_get_seqno;
+  sbrec_address_set_set_addresses;
+  sbrec_address_set_set_name;
+  sbrec_address_set_track_get_first;
+  sbrec_address_set_track_get_next;
+  sbrec_address_set_update_addresses_addvalue;
+  sbrec_address_set_update_addresses_delvalue;
+  sbrec_address_set_verify_addresses;
+  sbrec_address_set_verify_name;
+  sbrec_chassis_add_clause_encaps;
+  sbrec_chassis_add_clause_external_ids;
+  sbrec_chassis_add_clause_false;
+  sbrec_chassis_add_clause_hostname;
+  sbrec_chassis_add_clause_name;
+  sbrec_chassis_add_clause_nb_cfg;
+  sbrec_chassis_add_clause_true;
+  sbrec_chassis_add_clause_vtep_logical_switches;
+  sbrec_chassis_columns;
+  sbrec_chassis_delete;
+  sbrec_chassis_first;
+  sbrec_chassis_get_encaps;
+  sbrec_chassis_get_external_ids;
+  sbrec_chassis_get_for_uuid;
+  sbrec_chassis_get_hostname;
+  sbrec_chassis_get_name;
+  sbrec_chassis_get_nb_cfg;
+  sbrec_chassis_get_seqno;
+  sbrec_chassis_get_vtep_logical_switches;
+  sbrec_chassis_init;
+  sbrec_chassis_insert;
+  sbrec_chassis_is_updated;
+  sbrec_chassis_next;
+  sbrec_chassis_remove_clause_encaps;
+  sbrec_chassis_remove_clause_external_ids;
+  sbrec_chassis_remove_clause_false;
+  sbrec_chassis_remove_clause_hostname;
+  sbrec_chassis_remove_clause_name;
+  sbrec_chassis_remove_clause_nb_cfg;
+  sbrec_chassis_remove_clause_true;
+  sbrec_chassis_remove_clause_vtep_logical_switches;
+  sbrec_chassis_row_get_seqno;
+  sbrec_chassis_set_encaps;
+  sbrec_chassis_set_external_ids;
+  sbrec_chassis_set_hostname;
+  sbrec_chassis_set_name;
+  sbrec_chassis_set_nb_cfg;
+  sbrec_chassis_set_vtep_logical_switches;
+  sbrec_chassis_track_get_first;
+  sbrec_chassis_track_get_next;
+  sbrec_chassis_update_encaps_addvalue;
+  sbrec_chassis_update_encaps_delvalue;
+  sbrec_chassis_update_external_ids_delkey;
+  sbrec_chassis_update_external_ids_setkey;
+  sbrec_chassis_update_vtep_logical_switches_addvalue;
+  sbrec_chassis_update_vtep_logical_switches_delvalue;
+  sbrec_chassis_verify_encaps;
+  sbrec_chassis_verify_external_ids;
+  sbrec_chassis_verify_hostname;
+  sbrec_chassis_verify_name;
+  sbrec_chassis_verify_nb_cfg;
+  sbrec_chassis_verify_vtep_logical_switches;
+  sbrec_datapath_binding_add_clause_external_ids;
+  sbrec_datapath_binding_add_clause_false;
+  sbrec_datapath_binding_add_clause_true;
+  sbrec_datapath_binding_add_clause_tunnel_key;
+  sbrec_datapath_binding_columns;
+  sbrec_datapath_binding_delete;
+  sbrec_datapath_binding_first;
+  sbrec_datapath_binding_get_external_ids;
+  sbrec_datapath_binding_get_for_uuid;
+  sbrec_datapath_binding_get_seqno;
+  sbrec_datapath_binding_get_tunnel_key;
+  sbrec_datapath_binding_init;
+  sbrec_datapath_binding_insert;
+  sbrec_datapath_binding_is_updated;
+  sbrec_datapath_binding_next;
+  sbrec_datapath_binding_remove_clause_external_ids;
+  sbrec_datapath_binding_remove_clause_false;
+  sbrec_datapath_binding_remove_clause_true;
+  sbrec_datapath_binding_remove_clause_tunnel_key;
+  sbrec_datapath_binding_row_get_seqno;
+  sbrec_datapath_binding_set_external_ids;
+  sbrec_datapath_binding_set_tunnel_key;
+  sbrec_datapath_binding_track_get_first;
+  sbrec_datapath_binding_track_get_next;
+  sbrec_datapath_binding_update_external_ids_delkey;
+  sbrec_datapath_binding_update_external_ids_setkey;
+  sbrec_datapath_binding_verify_external_ids;
+  sbrec_datapath_binding_verify_tunnel_key;
+  sbrec_dhcp_options_add_clause_code;
+  sbrec_dhcp_options_add_clause_false;
+  sbrec_dhcp_options_add_clause_name;
+  sbrec_dhcp_options_add_clause_true;
+  sbrec_dhcp_options_add_clause_type;
+  sbrec_dhcp_options_columns;
+  sbrec_dhcp_options_delete;
+  sbrec_dhcp_options_first;
+  sbrec_dhcp_options_get_code;
+  sbrec_dhcp_options_get_for_uuid;
+  sbrec_dhcp_options_get_name;
+  sbrec_dhcp_options_get_seqno;
+  sbrec_dhcp_options_get_type;
+  sbrec_dhcp_options_init;
+  sbrec_dhcp_options_insert;
+  sbrec_dhcp_options_is_updated;
+  sbrec_dhcp_options_next;
+  sbrec_dhcp_options_remove_clause_code;
+  sbrec_dhcp_options_remove_clause_false;
+  sbrec_dhcp_options_remove_clause_name;
+  sbrec_dhcp_options_remove_clause_true;
+  sbrec_dhcp_options_remove_clause_type;
+  sbrec_dhcp_options_row_get_seqno;
+  sbrec_dhcp_options_set_code;
+  sbrec_dhcp_options_set_name;
+  sbrec_dhcp_options_set_type;
+  sbrec_dhcp_options_track_get_first;
+  sbrec_dhcp_options_track_get_next;
+  sbrec_dhcp_options_verify_code;
+  sbrec_dhcp_options_verify_name;
+  sbrec_dhcp_options_verify_type;
+  sbrec_dhcpv6_options_add_clause_code;
+  sbrec_dhcpv6_options_add_clause_false;
+  sbrec_dhcpv6_options_add_clause_name;
+  sbrec_dhcpv6_options_add_clause_true;
+  sbrec_dhcpv6_options_add_clause_type;
+  sbrec_dhcpv6_options_columns;
+  sbrec_dhcpv6_options_delete;
+  sbrec_dhcpv6_options_first;
+  sbrec_dhcpv6_options_get_code;
+  sbrec_dhcpv6_options_get_for_uuid;
+  sbrec_dhcpv6_options_get_name;
+  sbrec_dhcpv6_options_get_seqno;
+  sbrec_dhcpv6_options_get_type;
+  sbrec_dhcpv6_options_init;
+  sbrec_dhcpv6_options_insert;
+  sbrec_dhcpv6_options_is_updated;
+  sbrec_dhcpv6_options_next;
+  sbrec_dhcpv6_options_remove_clause_code;
+  sbrec_dhcpv6_options_remove_clause_false;
+  sbrec_dhcpv6_options_remove_clause_name;
+  sbrec_dhcpv6_options_remove_clause_true;
+  sbrec_dhcpv6_options_remove_clause_type;
+  sbrec_dhcpv6_options_row_get_seqno;
+  sbrec_dhcpv6_options_set_code;
+  sbrec_dhcpv6_options_set_name;
+  sbrec_dhcpv6_options_set_type;
+  sbrec_dhcpv6_options_track_get_first;
+  sbrec_dhcpv6_options_track_get_next;
+  sbrec_dhcpv6_options_verify_code;
+  sbrec_dhcpv6_options_verify_name;
+  sbrec_dhcpv6_options_verify_type;
+  sbrec_encap_add_clause_false;
+  sbrec_encap_add_clause_ip;
+  sbrec_encap_add_clause_options;
+  sbrec_encap_add_clause_true;
+  sbrec_encap_add_clause_type;
+  sbrec_encap_columns;
+  sbrec_encap_delete;
+  sbrec_encap_first;
+  sbrec_encap_get_for_uuid;
+  sbrec_encap_get_ip;
+  sbrec_encap_get_options;
+  sbrec_encap_get_seqno;
+  sbrec_encap_get_type;
+  sbrec_encap_init;
+  sbrec_encap_insert;
+  sbrec_encap_is_updated;
+  sbrec_encap_next;
+  sbrec_encap_remove_clause_false;
+  sbrec_encap_remove_clause_ip;
+  sbrec_encap_remove_clause_options;
+  sbrec_encap_remove_clause_true;
+  sbrec_encap_remove_clause_type;
+  sbrec_encap_row_get_seqno;
+  sbrec_encap_set_ip;
+  sbrec_encap_set_options;
+  sbrec_encap_set_type;
+  sbrec_encap_track_get_first;
+  sbrec_encap_track_get_next;
+  sbrec_encap_update_options_delkey;
+  sbrec_encap_update_options_setkey;
+  sbrec_encap_verify_ip;
+  sbrec_encap_verify_options;
+  sbrec_encap_verify_type;
+  sbrec_get_db_version;
+  sbrec_idl_class;
+  sbrec_init;
+  sbrec_logical_flow_add_clause_actions;
+  sbrec_logical_flow_add_clause_external_ids;
+  sbrec_logical_flow_add_clause_false;
+  sbrec_logical_flow_add_clause_logical_datapath;
+  sbrec_logical_flow_add_clause_match;
+  sbrec_logical_flow_add_clause_pipeline;
+  sbrec_logical_flow_add_clause_priority;
+  sbrec_logical_flow_add_clause_table_id;
+  sbrec_logical_flow_add_clause_true;
+  sbrec_logical_flow_columns;
+  sbrec_logical_flow_delete;
+  sbrec_logical_flow_first;
+  sbrec_logical_flow_get_actions;
+  sbrec_logical_flow_get_external_ids;
+  sbrec_logical_flow_get_for_uuid;
+  sbrec_logical_flow_get_logical_datapath;
+  sbrec_logical_flow_get_match;
+  sbrec_logical_flow_get_pipeline;
+  sbrec_logical_flow_get_priority;
+  sbrec_logical_flow_get_seqno;
+  sbrec_logical_flow_get_table_id;
+  sbrec_logical_flow_init;
+  sbrec_logical_flow_insert;
+  sbrec_logical_flow_is_updated;
+  sbrec_logical_flow_next;
+  sbrec_logical_flow_remove_clause_actions;
+  sbrec_logical_flow_remove_clause_external_ids;
+  sbrec_logical_flow_remove_clause_false;
+  sbrec_logical_flow_remove_clause_logical_datapath;
+  sbrec_logical_flow_remove_clause_match;
+  sbrec_logical_flow_remove_clause_pipeline;
+  sbrec_logical_flow_remove_clause_priority;
+  sbrec_logical_flow_remove_clause_table_id;
+  sbrec_logical_flow_remove_clause_true;
+  sbrec_logical_flow_row_get_seqno;
+  sbrec_logical_flow_set_actions;
+  sbrec_logical_flow_set_external_ids;
+  sbrec_logical_flow_set_logical_datapath;
+  sbrec_logical_flow_set_match;
+  sbrec_logical_flow_set_pipeline;
+  sbrec_logical_flow_set_priority;
+  sbrec_logical_flow_set_table_id;
+  sbrec_logical_flow_track_get_first;
+  sbrec_logical_flow_track_get_next;
+  sbrec_logical_flow_update_external_ids_delkey;
+  sbrec_logical_flow_update_external_ids_setkey;
+  sbrec_logical_flow_verify_actions;
+  sbrec_logical_flow_verify_external_ids;
+  sbrec_logical_flow_verify_logical_datapath;
+  sbrec_logical_flow_verify_match;
+  sbrec_logical_flow_verify_pipeline;
+  sbrec_logical_flow_verify_priority;
+  sbrec_logical_flow_verify_table_id;
+  sbrec_mac_binding_add_clause_datapath;
+  sbrec_mac_binding_add_clause_false;
+  sbrec_mac_binding_add_clause_ip;
+  sbrec_mac_binding_add_clause_logical_port;
+  sbrec_mac_binding_add_clause_mac;
+  sbrec_mac_binding_add_clause_true;
+  sbrec_mac_binding_columns;
+  sbrec_mac_binding_delete;
+  sbrec_mac_binding_first;
+  sbrec_mac_binding_get_datapath;
+  sbrec_mac_binding_get_for_uuid;
+  sbrec_mac_binding_get_ip;
+  sbrec_mac_binding_get_logical_port;
+  sbrec_mac_binding_get_mac;
+  sbrec_mac_binding_get_seqno;
+  sbrec_mac_binding_init;
+  sbrec_mac_binding_insert;
+  sbrec_mac_binding_is_updated;
+  sbrec_mac_binding_next;
+  sbrec_mac_binding_remove_clause_datapath;
+  sbrec_mac_binding_remove_clause_false;
+  sbrec_mac_binding_remove_clause_ip;
+  sbrec_mac_binding_remove_clause_logical_port;
+  sbrec_mac_binding_remove_clause_mac;
+  sbrec_mac_binding_remove_clause_true;
+  sbrec_mac_binding_row_get_seqno;
+  sbrec_mac_binding_set_datapath;
+  sbrec_mac_binding_set_ip;
+  sbrec_mac_binding_set_logical_port;
+  sbrec_mac_binding_set_mac;
+  sbrec_mac_binding_track_get_first;
+  sbrec_mac_binding_track_get_next;
+  sbrec_mac_binding_verify_datapath;
+  sbrec_mac_binding_verify_ip;
+  sbrec_mac_binding_verify_logical_port;
+  sbrec_mac_binding_verify_mac;
+  sbrec_multicast_group_add_clause_datapath;
+  sbrec_multicast_group_add_clause_false;
+  sbrec_multicast_group_add_clause_name;
+  sbrec_multicast_group_add_clause_ports;
+  sbrec_multicast_group_add_clause_true;
+  sbrec_multicast_group_add_clause_tunnel_key;
+  sbrec_multicast_group_columns;
+  sbrec_multicast_group_delete;
+  sbrec_multicast_group_first;
+  sbrec_multicast_group_get_datapath;
+  sbrec_multicast_group_get_for_uuid;
+  sbrec_multicast_group_get_name;
+  sbrec_multicast_group_get_ports;
+  sbrec_multicast_group_get_seqno;
+  sbrec_multicast_group_get_tunnel_key;
+  sbrec_multicast_group_init;
+  sbrec_multicast_group_insert;
+  sbrec_multicast_group_is_updated;
+  sbrec_multicast_group_next;
+  sbrec_multicast_group_remove_clause_datapath;
+  sbrec_multicast_group_remove_clause_false;
+  sbrec_multicast_group_remove_clause_name;
+  sbrec_multicast_group_remove_clause_ports;
+  sbrec_multicast_group_remove_clause_true;
+  sbrec_multicast_group_remove_clause_tunnel_key;
+  sbrec_multicast_group_row_get_seqno;
+  sbrec_multicast_group_set_datapath;
+  sbrec_multicast_group_set_name;
+  sbrec_multicast_group_set_ports;
+  sbrec_multicast_group_set_tunnel_key;
+  sbrec_multicast_group_track_get_first;
+  sbrec_multicast_group_track_get_next;
+  sbrec_multicast_group_update_ports_addvalue;
+  sbrec_multicast_group_update_ports_delvalue;
+  sbrec_multicast_group_verify_datapath;
+  sbrec_multicast_group_verify_name;
+  sbrec_multicast_group_verify_ports;
+  sbrec_multicast_group_verify_tunnel_key;
+  sbrec_port_binding_add_clause_chassis;
+  sbrec_port_binding_add_clause_datapath;
+  sbrec_port_binding_add_clause_false;
+  sbrec_port_binding_add_clause_logical_port;
+  sbrec_port_binding_add_clause_mac;
+  sbrec_port_binding_add_clause_options;
+  sbrec_port_binding_add_clause_parent_port;
+  sbrec_port_binding_add_clause_tag;
+  sbrec_port_binding_add_clause_true;
+  sbrec_port_binding_add_clause_tunnel_key;
+  sbrec_port_binding_add_clause_type;
+  sbrec_port_binding_columns;
+  sbrec_port_binding_delete;
+  sbrec_port_binding_first;
+  sbrec_port_binding_get_chassis;
+  sbrec_port_binding_get_datapath;
+  sbrec_port_binding_get_for_uuid;
+  sbrec_port_binding_get_logical_port;
+  sbrec_port_binding_get_mac;
+  sbrec_port_binding_get_options;
+  sbrec_port_binding_get_parent_port;
+  sbrec_port_binding_get_seqno;
+  sbrec_port_binding_get_tag;
+  sbrec_port_binding_get_tunnel_key;
+  sbrec_port_binding_get_type;
+  sbrec_port_binding_init;
+  sbrec_port_binding_insert;
+  sbrec_port_binding_is_updated;
+  sbrec_port_binding_next;
+  sbrec_port_binding_remove_clause_chassis;
+  sbrec_port_binding_remove_clause_datapath;
+  sbrec_port_binding_remove_clause_false;
+  sbrec_port_binding_remove_clause_logical_port;
+  sbrec_port_binding_remove_clause_mac;
+  sbrec_port_binding_remove_clause_options;
+  sbrec_port_binding_remove_clause_parent_port;
+  sbrec_port_binding_remove_clause_tag;
+  sbrec_port_binding_remove_clause_true;
+  sbrec_port_binding_remove_clause_tunnel_key;
+  sbrec_port_binding_remove_clause_type;
+  sbrec_port_binding_row_get_seqno;
+  sbrec_port_binding_set_chassis;
+  sbrec_port_binding_set_datapath;
+  sbrec_port_binding_set_logical_port;
+  sbrec_port_binding_set_mac;
+  sbrec_port_binding_set_options;
+  sbrec_port_binding_set_parent_port;
+  sbrec_port_binding_set_tag;
+  sbrec_port_binding_set_tunnel_key;
+  sbrec_port_binding_set_type;
+  sbrec_port_binding_track_get_first;
+  sbrec_port_binding_track_get_next;
+  sbrec_port_binding_update_chassis_addvalue;
+  sbrec_port_binding_update_chassis_delvalue;
+  sbrec_port_binding_update_mac_addvalue;
+  sbrec_port_binding_update_mac_delvalue;
+  sbrec_port_binding_update_options_delkey;
+  sbrec_port_binding_update_options_setkey;
+  sbrec_port_binding_update_parent_port_addvalue;
+  sbrec_port_binding_update_parent_port_delvalue;
+  sbrec_port_binding_update_tag_addvalue;
+  sbrec_port_binding_update_tag_delvalue;
+  sbrec_port_binding_verify_chassis;
+  sbrec_port_binding_verify_datapath;
+  sbrec_port_binding_verify_logical_port;
+  sbrec_port_binding_verify_mac;
+  sbrec_port_binding_verify_options;
+  sbrec_port_binding_verify_parent_port;
+  sbrec_port_binding_verify_tag;
+  sbrec_port_binding_verify_tunnel_key;
+  sbrec_port_binding_verify_type;
+  sbrec_sb_global_add_clause_external_ids;
+  sbrec_sb_global_add_clause_false;
+  sbrec_sb_global_add_clause_nb_cfg;
+  sbrec_sb_global_add_clause_true;
+  sbrec_sb_global_columns;
+  sbrec_sb_global_delete;
+  sbrec_sb_global_first;
+  sbrec_sb_global_get_external_ids;
+  sbrec_sb_global_get_for_uuid;
+  sbrec_sb_global_get_nb_cfg;
+  sbrec_sb_global_get_seqno;
+  sbrec_sb_global_init;
+  sbrec_sb_global_insert;
+  sbrec_sb_global_is_updated;
+  sbrec_sb_global_next;
+  sbrec_sb_global_remove_clause_external_ids;
+  sbrec_sb_global_remove_clause_false;
+  sbrec_sb_global_remove_clause_nb_cfg;
+  sbrec_sb_global_remove_clause_true;
+  sbrec_sb_global_row_get_seqno;
+  sbrec_sb_global_set_external_ids;
+  sbrec_sb_global_set_nb_cfg;
+  sbrec_sb_global_track_get_first;
+  sbrec_sb_global_track_get_next;
+  sbrec_sb_global_update_external_ids_delkey;
+  sbrec_sb_global_update_external_ids_setkey;
+  sbrec_sb_global_verify_external_ids;
+  sbrec_sb_global_verify_nb_cfg;
+  sbrec_table_classes;
+local:
+    *;
 };
diff --git a/ovsdb/libovsdb.sym.in b/ovsdb/libovsdb.sym.in
index 71ae4e87b..5de63d918 100644
--- a/ovsdb/libovsdb.sym.in
+++ b/ovsdb/libovsdb.sym.in
@@ -1,4 +1,176 @@
 libovsdb_@LT_CURRENT@ {
 global:
-        *;
+  disconnect_active_server;
+  get_blacklist_tables;
+  ovsdb_add_replica;
+  ovsdb_column_clone;
+  ovsdb_column_create;
+  ovsdb_column_destroy;
+  ovsdb_column_from_json;
+  ovsdb_column_set_add;
+  ovsdb_column_set_add_all;
+  ovsdb_column_set_clone;
+  ovsdb_column_set_contains;
+  ovsdb_column_set_destroy;
+  ovsdb_column_set_equals;
+  ovsdb_column_set_from_json;
+  ovsdb_column_set_init;
+  ovsdb_column_set_to_json;
+  ovsdb_column_set_to_string;
+  ovsdb_column_to_json;
+  ovsdb_condition_clone;
+  ovsdb_condition_cmp_3way;
+  ovsdb_condition_destroy;
+  ovsdb_condition_empty;
+  ovsdb_condition_from_json;
+  ovsdb_condition_get_columns;
+  ovsdb_condition_init;
+  ovsdb_condition_is_false;
+  ovsdb_condition_is_true;
+  ovsdb_condition_match_any_clause;
+  ovsdb_condition_match_every_clause;
+  ovsdb_condition_to_json;
+  ovsdb_create;
+  ovsdb_destroy;
+  ovsdb_execute;
+  ovsdb_file_compact;
+  ovsdb_file_open;
+  ovsdb_file_open_as_schema;
+  ovsdb_file_read_schema;
+  ovsdb_file_save_copy;
+  ovsdb_function_from_string;
+  ovsdb_function_to_string;
+  ovsdb_get_memory_usage;
+  ovsdb_get_table;
+  ovsdb_jsonrpc_default_options;
+  ovsdb_jsonrpc_disable_monitor_cond;
+  ovsdb_jsonrpc_monitor_destroy;
+  ovsdb_jsonrpc_server_add_db;
+  ovsdb_jsonrpc_server_create;
+  ovsdb_jsonrpc_server_destroy;
+  ovsdb_jsonrpc_server_free_remote_status;
+  ovsdb_jsonrpc_server_get_memory_usage;
+  ovsdb_jsonrpc_server_get_remote_status;
+  ovsdb_jsonrpc_server_is_read_only;
+  ovsdb_jsonrpc_server_reconnect;
+  ovsdb_jsonrpc_server_remove_db;
+  ovsdb_jsonrpc_server_run;
+  ovsdb_jsonrpc_server_set_remotes;
+  ovsdb_jsonrpc_server_wait;
+  ovsdb_lock_get_owner;
+  ovsdb_lock_waiter_destroy;
+  ovsdb_lock_waiter_is_owner;
+  ovsdb_lock_waiter_remove;
+  ovsdb_log_close;
+  ovsdb_log_commit;
+  ovsdb_log_get_offset;
+  ovsdb_log_open;
+  ovsdb_log_read;
+  ovsdb_log_unread;
+  ovsdb_log_write;
+  ovsdb_monitor_add;
+  ovsdb_monitor_add_column;
+  ovsdb_monitor_add_jsonrpc_monitor;
+  ovsdb_monitor_add_table;
+  ovsdb_monitor_condition_bind;
+  ovsdb_monitor_create;
+  ovsdb_monitor_get_initial;
+  ovsdb_monitor_get_memory_usage;
+  ovsdb_monitor_get_update;
+  ovsdb_monitor_needs_flush;
+  ovsdb_monitor_remove_jsonrpc_monitor;
+  ovsdb_monitor_session_condition_create;
+  ovsdb_monitor_session_condition_destroy;
+  ovsdb_monitor_table_add_select;
+  ovsdb_monitor_table_condition_create;
+  ovsdb_monitor_table_condition_update;
+  ovsdb_monitor_table_exists;
+  ovsdb_mutation_set_destroy;
+  ovsdb_mutation_set_execute;
+  ovsdb_mutation_set_from_json;
+  ovsdb_mutation_set_to_json;
+  ovsdb_mutator_from_string;
+  ovsdb_mutator_to_string;
+  ovsdb_query;
+  ovsdb_query_distinct;
+  ovsdb_query_row_set;
+  ovsdb_remove_replica;
+  ovsdb_replica_init;
+  ovsdb_row_clone;
+  ovsdb_row_columns_to_string;
+  ovsdb_row_compare_columns_3way;
+  ovsdb_row_create;
+  ovsdb_row_destroy;
+  ovsdb_row_equal_columns;
+  ovsdb_row_from_json;
+  ovsdb_row_hash_columns;
+  ovsdb_row_hash_contains;
+  ovsdb_row_hash_contains__;
+  ovsdb_row_hash_contains_all;
+  ovsdb_row_hash_count;
+  ovsdb_row_hash_destroy;
+  ovsdb_row_hash_init;
+  ovsdb_row_hash_insert;
+  ovsdb_row_hash_insert__;
+  ovsdb_row_set_add_row;
+  ovsdb_row_set_destroy;
+  ovsdb_row_set_init;
+  ovsdb_row_set_sort;
+  ovsdb_row_set_to_json;
+  ovsdb_row_to_json;
+  ovsdb_row_update_columns;
+  ovsdb_schema_clone;
+  ovsdb_schema_create;
+  ovsdb_schema_destroy;
+  ovsdb_schema_equal;
+  ovsdb_schema_from_file;
+  ovsdb_schema_from_json;
+  ovsdb_schema_to_json;
+  ovsdb_server_add_db;
+  ovsdb_server_destroy;
+  ovsdb_server_init;
+  ovsdb_server_lock;
+  ovsdb_server_remove_db;
+  ovsdb_session_destroy;
+  ovsdb_session_get_lock_waiter;
+  ovsdb_session_init;
+  ovsdb_table_create;
+  ovsdb_table_destroy;
+  ovsdb_table_get_row;
+  ovsdb_table_schema_clone;
+  ovsdb_table_schema_create;
+  ovsdb_table_schema_destroy;
+  ovsdb_table_schema_from_json;
+  ovsdb_table_schema_get_column;
+  ovsdb_table_schema_to_json;
+  ovsdb_trigger_destroy;
+  ovsdb_trigger_init;
+  ovsdb_trigger_is_complete;
+  ovsdb_trigger_run;
+  ovsdb_trigger_steal_result;
+  ovsdb_trigger_wait;
+  ovsdb_txn_abort;
+  ovsdb_txn_add_comment;
+  ovsdb_txn_commit;
+  ovsdb_txn_create;
+  ovsdb_txn_for_each_change;
+  ovsdb_txn_get_comment;
+  ovsdb_txn_row_delete;
+  ovsdb_txn_row_insert;
+  ovsdb_txn_row_modify;
+  replication_add_local_db;
+  replication_destroy;
+  replication_get_last_error;
+  replication_init;
+  replication_is_alive;
+  replication_run;
+  replication_status;
+  replication_usage;
+  replication_wait;
+  request_ids_add;
+  request_ids_clear;
+  request_ids_lookup_and_free;
+  set_blacklist_tables;
+local:
+    *;
 };
diff --git a/vswitchd/automake.mk b/vswitchd/automake.mk
index 8d7f3ea4d..8f1f3f15d 100644
--- a/vswitchd/automake.mk
+++ b/vswitchd/automake.mk
@@ -13,7 +13,6 @@ vswitchd_ovs_vswitchd_SOURCES = \
 	vswitchd/xenserver.h
 vswitchd_ovs_vswitchd_LDADD = \
 	ofproto/libofproto.la \
-	lib/libsflow.la \
 	lib/libopenvswitch.la
 vswitchd_ovs_vswitchd_LDFLAGS = $(AM_LDFLAGS) $(DPDK_vswitchd_LDFLAGS)
 EXTRA_DIST += vswitchd/INTERNALS
diff --git a/vswitchd/bridge.c b/vswitchd/bridge.c
index 6640da785..d6c8d1ee3 100644
--- a/vswitchd/bridge.c
+++ b/vswitchd/bridge.c
@@ -503,7 +503,16 @@ bridge_exit(void)
     if_notifier_destroy(ifnotifier);
     seq_destroy(ifaces_changed);
     HMAP_FOR_EACH_SAFE (br, next_br, node, &all_bridges) {
+#ifdef __sun
+        /*
+         * On Solaris, we want to destroy datapath ports as a part of the
+         * graceful shutdown. This change is needed until we have support
+         * for the "--cleanup" option in "ovs-appctl exit" command.
+         */
+        bridge_destroy(br, true);
+#else
         bridge_destroy(br, false);
+#endif
     }
     ovsdb_idl_destroy(idl);
 }
@@ -585,9 +594,15 @@ bridge_reconfigure(const struct ovsrec_open_vswitch *ovs_cfg)
                                       OFPROTO_MAX_IDLE_DEFAULT));
     ofproto_set_cpu_mask(smap_get(&ovs_cfg->other_config, "pmd-cpu-mask"));
 
+#ifdef __sun
+    ofproto_set_threads(
+        smap_get_int(&ovs_cfg->other_config, "n-handler-threads", 1),
+        smap_get_int(&ovs_cfg->other_config, "n-revalidator-threads", 8));
+#else
     ofproto_set_threads(
         smap_get_int(&ovs_cfg->other_config, "n-handler-threads", 0),
         smap_get_int(&ovs_cfg->other_config, "n-revalidator-threads", 0));
+#endif
 
     /* Destroy "struct bridge"s, "struct port"s, and "struct iface"s according
      * to 'ovs_cfg', with only very minimal configuration otherwise.
@@ -1022,6 +1037,14 @@ port_configure(struct port *port)
     free(s.lacp_slaves);
 }
 
+#ifdef __sun
+static boolean_t
+bridge_is_system(const struct bridge *br)
+{
+    return (strcmp(br->type, "system") == 0);
+}
+#endif
+
 /* Pick local port hardware address and datapath ID for 'br'. */
 static void
 bridge_configure_datapath_id(struct bridge *br)
@@ -1033,6 +1056,14 @@ bridge_configure_datapath_id(struct bridge *br)
     char *dpid_string;
 
     bridge_pick_local_hw_addr(br, &ea, &hw_addr_iface);
+#ifdef __sun
+    /* Solaris "system" bridges are implicitly created VNICs. They
+     * already have their ethernet addresses set, so there is no
+     * reason to set them. We prefer that they be "auto" generated.
+     */
+    if (bridge_is_system(br))
+        goto skip;
+#endif
     local_iface = iface_from_ofp_port(br, OFPP_LOCAL);
     if (local_iface) {
         int error = netdev_set_etheraddr(local_iface->netdev, ea);
@@ -1045,6 +1076,9 @@ bridge_configure_datapath_id(struct bridge *br)
     }
     br->ea = ea;
 
+#ifdef __sun
+skip:
+#endif /* __sun */
     dpid = bridge_pick_datapath_id(br, ea, hw_addr_iface);
     if (dpid != ofproto_get_datapath_id(br->ofproto)) {
         VLOG_INFO("bridge %s: using datapath ID %016"PRIx64, br->name, dpid);
@@ -1754,6 +1788,16 @@ iface_do_create(const struct bridge *br,
         goto error;
     }
 
+#ifdef __sun
+    if (bridge_is_system(br)) {
+        error = netdev_configure_uplink(br->name, NULL, netdev);
+	if (error) {
+		VLOG_DBG("iface_do_create:: configuring uplink attemp on %s "
+		    "failed %s\n", iface_cfg->name, ovs_strerror(error));
+	}
+    }
+#endif
+
     iface_set_netdev_mtu(iface_cfg, netdev);
 
     *ofp_portp = iface_pick_ofport(iface_cfg);
@@ -1933,6 +1977,29 @@ find_local_hw_addr(const struct bridge *br, struct eth_addr *ea,
     int error;
     int i;
 
+#ifdef __sun
+    /*
+     * Solaris does not currently support fake bridges.
+     */
+    struct iface *iface = NULL;
+    struct eth_addr iface_ea;
+
+    if (bridge_is_system(br)) {
+        if (fake_br == NULL) {
+            iface = iface_lookup(br, br->name);
+            if (iface != NULL) {
+                error = netdev_get_etheraddr(iface->netdev, &iface_ea);
+                if (error == 0) {
+                    *ea = iface_ea;
+                    *hw_addr_iface = iface;
+                    found_addr = true;
+                }
+            }
+        }
+        goto skip;
+    }
+#endif /* __sun */
+
     /* Mirror output ports don't participate in picking the local hardware
      * address.  ofproto can't help us find out whether a given port is a
      * mirror output because we haven't configured mirrors yet, so we need to
@@ -2021,13 +2088,20 @@ find_local_hw_addr(const struct bridge *br, struct eth_addr *ea,
             found_addr = true;
         }
     }
+#ifdef __sun
+    hmapx_destroy(&mirror_output_ports);
+
+skip:
+#endif /* __sun */
 
     if (!found_addr) {
         *ea = br->default_ea;
         *hw_addr_iface = NULL;
     }
 
+#ifndef __sun
     hmapx_destroy(&mirror_output_ports);
+#endif /* !__sun */
 }
 
 static void
@@ -4290,6 +4364,40 @@ iface_destroy__(struct iface *iface)
         ovs_list_remove(&iface->port_elem);
         hmap_remove(&br->iface_by_name, &iface->name_node);
 
+#ifdef __sun
+	if (bridge_is_system(br)) {
+		struct iface *other_iface;
+		int err = 0;
+		boolean_t done = false;
+
+		/* We need to call configure_uplink() for every port in the
+		 * same bridge to find the best uplink that can be migrated
+		 * to.
+		 */
+		HMAP_FOR_EACH (other_iface, name_node, &br->iface_by_name) {
+			err = netdev_configure_uplink(br->name,
+			    !done ? iface->netdev : NULL, other_iface->netdev);
+			if (err == ENOTSUP) {
+				/*
+				 * the to-be-destroyed port is not the current
+				 * uplink that is selected. done nothing.
+				 */
+				done = true;
+				break;
+			}
+			if (err == 0) {
+				/*
+				 * new uplink selected and migration done,
+				 * continue to see if there is better candidate.
+				 */ 
+				done = true;
+			}
+		}
+		if (!done)
+			(void) netdev_configure_uplink(br->name,
+			    iface->netdev, NULL);
+        }
+#endif
         /* The user is changing configuration here, so netdev_remove needs to be
          * used as opposed to netdev_close */
         netdev_remove(iface->netdev);
diff --git a/vswitchd/system-stats.c b/vswitchd/system-stats.c
index 49e541981..a2a10353b 100644
--- a/vswitchd/system-stats.c
+++ b/vswitchd/system-stats.c
@@ -45,6 +45,10 @@
 #include "timeval.h"
 #include "openvswitch/vlog.h"
 
+#ifdef __sun
+#include <sys/loadavg.h>
+#endif
+
 VLOG_DEFINE_THIS_MODULE(system_stats);
 
 /* #ifdefs make it a pain to maintain code: you have to try to build both ways.
diff --git a/vtep/libvtep.sym.in b/vtep/libvtep.sym.in
index 44c548dae..8d323e7ee 100644
--- a/vtep/libvtep.sym.in
+++ b/vtep/libvtep.sym.in
@@ -1,4 +1,859 @@
 libvtep_@LT_CURRENT@ {
 global:
-        *;
+  vteprec_acl_add_clause_acl_entries;
+  vteprec_acl_add_clause_acl_fault_status;
+  vteprec_acl_add_clause_acl_name;
+  vteprec_acl_add_clause_false;
+  vteprec_acl_add_clause_true;
+  vteprec_acl_delete;
+  vteprec_acl_entry_add_clause_acle_fault_status;
+  vteprec_acl_entry_add_clause_action;
+  vteprec_acl_entry_add_clause_dest_ip;
+  vteprec_acl_entry_add_clause_dest_mac;
+  vteprec_acl_entry_add_clause_dest_mask;
+  vteprec_acl_entry_add_clause_dest_port_max;
+  vteprec_acl_entry_add_clause_dest_port_min;
+  vteprec_acl_entry_add_clause_direction;
+  vteprec_acl_entry_add_clause_ethertype;
+  vteprec_acl_entry_add_clause_false;
+  vteprec_acl_entry_add_clause_icmp_code;
+  vteprec_acl_entry_add_clause_icmp_type;
+  vteprec_acl_entry_add_clause_protocol;
+  vteprec_acl_entry_add_clause_sequence;
+  vteprec_acl_entry_add_clause_source_ip;
+  vteprec_acl_entry_add_clause_source_mac;
+  vteprec_acl_entry_add_clause_source_mask;
+  vteprec_acl_entry_add_clause_source_port_max;
+  vteprec_acl_entry_add_clause_source_port_min;
+  vteprec_acl_entry_add_clause_tcp_flags;
+  vteprec_acl_entry_add_clause_tcp_flags_mask;
+  vteprec_acl_entry_add_clause_true;
+  vteprec_acl_entry_delete;
+  vteprec_acl_entry_first;
+  vteprec_acl_entry_get_acle_fault_status;
+  vteprec_acl_entry_get_action;
+  vteprec_acl_entry_get_dest_ip;
+  vteprec_acl_entry_get_dest_mac;
+  vteprec_acl_entry_get_dest_mask;
+  vteprec_acl_entry_get_dest_port_max;
+  vteprec_acl_entry_get_dest_port_min;
+  vteprec_acl_entry_get_direction;
+  vteprec_acl_entry_get_ethertype;
+  vteprec_acl_entry_get_for_uuid;
+  vteprec_acl_entry_get_icmp_code;
+  vteprec_acl_entry_get_icmp_type;
+  vteprec_acl_entry_get_protocol;
+  vteprec_acl_entry_get_seqno;
+  vteprec_acl_entry_get_sequence;
+  vteprec_acl_entry_get_source_ip;
+  vteprec_acl_entry_get_source_mac;
+  vteprec_acl_entry_get_source_mask;
+  vteprec_acl_entry_get_source_port_max;
+  vteprec_acl_entry_get_source_port_min;
+  vteprec_acl_entry_get_tcp_flags;
+  vteprec_acl_entry_get_tcp_flags_mask;
+  vteprec_acl_entry_init;
+  vteprec_acl_entry_insert;
+  vteprec_acl_entry_is_updated;
+  vteprec_acl_entry_next;
+  vteprec_acl_entry_remove_clause_acle_fault_status;
+  vteprec_acl_entry_remove_clause_action;
+  vteprec_acl_entry_remove_clause_dest_ip;
+  vteprec_acl_entry_remove_clause_dest_mac;
+  vteprec_acl_entry_remove_clause_dest_mask;
+  vteprec_acl_entry_remove_clause_dest_port_max;
+  vteprec_acl_entry_remove_clause_dest_port_min;
+  vteprec_acl_entry_remove_clause_direction;
+  vteprec_acl_entry_remove_clause_ethertype;
+  vteprec_acl_entry_remove_clause_false;
+  vteprec_acl_entry_remove_clause_icmp_code;
+  vteprec_acl_entry_remove_clause_icmp_type;
+  vteprec_acl_entry_remove_clause_protocol;
+  vteprec_acl_entry_remove_clause_sequence;
+  vteprec_acl_entry_remove_clause_source_ip;
+  vteprec_acl_entry_remove_clause_source_mac;
+  vteprec_acl_entry_remove_clause_source_mask;
+  vteprec_acl_entry_remove_clause_source_port_max;
+  vteprec_acl_entry_remove_clause_source_port_min;
+  vteprec_acl_entry_remove_clause_tcp_flags;
+  vteprec_acl_entry_remove_clause_tcp_flags_mask;
+  vteprec_acl_entry_remove_clause_true;
+  vteprec_acl_entry_row_get_seqno;
+  vteprec_acl_entry_set_acle_fault_status;
+  vteprec_acl_entry_set_action;
+  vteprec_acl_entry_set_dest_ip;
+  vteprec_acl_entry_set_dest_mac;
+  vteprec_acl_entry_set_dest_mask;
+  vteprec_acl_entry_set_dest_port_max;
+  vteprec_acl_entry_set_dest_port_min;
+  vteprec_acl_entry_set_direction;
+  vteprec_acl_entry_set_ethertype;
+  vteprec_acl_entry_set_icmp_code;
+  vteprec_acl_entry_set_icmp_type;
+  vteprec_acl_entry_set_protocol;
+  vteprec_acl_entry_set_sequence;
+  vteprec_acl_entry_set_source_ip;
+  vteprec_acl_entry_set_source_mac;
+  vteprec_acl_entry_set_source_mask;
+  vteprec_acl_entry_set_source_port_max;
+  vteprec_acl_entry_set_source_port_min;
+  vteprec_acl_entry_set_tcp_flags;
+  vteprec_acl_entry_set_tcp_flags_mask;
+  vteprec_acl_entry_track_get_first;
+  vteprec_acl_entry_track_get_next;
+  vteprec_acl_entry_update_acle_fault_status_addvalue;
+  vteprec_acl_entry_update_acle_fault_status_delvalue;
+  vteprec_acl_entry_update_dest_ip_addvalue;
+  vteprec_acl_entry_update_dest_ip_delvalue;
+  vteprec_acl_entry_update_dest_mac_addvalue;
+  vteprec_acl_entry_update_dest_mac_delvalue;
+  vteprec_acl_entry_update_dest_mask_addvalue;
+  vteprec_acl_entry_update_dest_mask_delvalue;
+  vteprec_acl_entry_update_dest_port_max_addvalue;
+  vteprec_acl_entry_update_dest_port_max_delvalue;
+  vteprec_acl_entry_update_dest_port_min_addvalue;
+  vteprec_acl_entry_update_dest_port_min_delvalue;
+  vteprec_acl_entry_update_ethertype_addvalue;
+  vteprec_acl_entry_update_ethertype_delvalue;
+  vteprec_acl_entry_update_icmp_code_addvalue;
+  vteprec_acl_entry_update_icmp_code_delvalue;
+  vteprec_acl_entry_update_icmp_type_addvalue;
+  vteprec_acl_entry_update_icmp_type_delvalue;
+  vteprec_acl_entry_update_protocol_addvalue;
+  vteprec_acl_entry_update_protocol_delvalue;
+  vteprec_acl_entry_update_source_ip_addvalue;
+  vteprec_acl_entry_update_source_ip_delvalue;
+  vteprec_acl_entry_update_source_mac_addvalue;
+  vteprec_acl_entry_update_source_mac_delvalue;
+  vteprec_acl_entry_update_source_mask_addvalue;
+  vteprec_acl_entry_update_source_mask_delvalue;
+  vteprec_acl_entry_update_source_port_max_addvalue;
+  vteprec_acl_entry_update_source_port_max_delvalue;
+  vteprec_acl_entry_update_source_port_min_addvalue;
+  vteprec_acl_entry_update_source_port_min_delvalue;
+  vteprec_acl_entry_update_tcp_flags_addvalue;
+  vteprec_acl_entry_update_tcp_flags_delvalue;
+  vteprec_acl_entry_update_tcp_flags_mask_addvalue;
+  vteprec_acl_entry_update_tcp_flags_mask_delvalue;
+  vteprec_acl_entry_verify_acle_fault_status;
+  vteprec_acl_entry_verify_action;
+  vteprec_acl_entry_verify_dest_ip;
+  vteprec_acl_entry_verify_dest_mac;
+  vteprec_acl_entry_verify_dest_mask;
+  vteprec_acl_entry_verify_dest_port_max;
+  vteprec_acl_entry_verify_dest_port_min;
+  vteprec_acl_entry_verify_direction;
+  vteprec_acl_entry_verify_ethertype;
+  vteprec_acl_entry_verify_icmp_code;
+  vteprec_acl_entry_verify_icmp_type;
+  vteprec_acl_entry_verify_protocol;
+  vteprec_acl_entry_verify_sequence;
+  vteprec_acl_entry_verify_source_ip;
+  vteprec_acl_entry_verify_source_mac;
+  vteprec_acl_entry_verify_source_mask;
+  vteprec_acl_entry_verify_source_port_max;
+  vteprec_acl_entry_verify_source_port_min;
+  vteprec_acl_entry_verify_tcp_flags;
+  vteprec_acl_entry_verify_tcp_flags_mask;
+  vteprec_acl_first;
+  vteprec_acl_get_acl_entries;
+  vteprec_acl_get_acl_fault_status;
+  vteprec_acl_get_acl_name;
+  vteprec_acl_get_for_uuid;
+  vteprec_acl_get_seqno;
+  vteprec_acl_init;
+  vteprec_acl_insert;
+  vteprec_acl_is_updated;
+  vteprec_acl_next;
+  vteprec_acl_remove_clause_acl_entries;
+  vteprec_acl_remove_clause_acl_fault_status;
+  vteprec_acl_remove_clause_acl_name;
+  vteprec_acl_remove_clause_false;
+  vteprec_acl_remove_clause_true;
+  vteprec_acl_row_get_seqno;
+  vteprec_acl_set_acl_entries;
+  vteprec_acl_set_acl_fault_status;
+  vteprec_acl_set_acl_name;
+  vteprec_acl_track_get_first;
+  vteprec_acl_track_get_next;
+  vteprec_acl_update_acl_entries_addvalue;
+  vteprec_acl_update_acl_entries_delvalue;
+  vteprec_acl_update_acl_fault_status_addvalue;
+  vteprec_acl_update_acl_fault_status_delvalue;
+  vteprec_acl_verify_acl_entries;
+  vteprec_acl_verify_acl_fault_status;
+  vteprec_acl_verify_acl_name;
+  vteprec_arp_sources_local_add_clause_false;
+  vteprec_arp_sources_local_add_clause_locator;
+  vteprec_arp_sources_local_add_clause_src_mac;
+  vteprec_arp_sources_local_add_clause_true;
+  vteprec_arp_sources_local_delete;
+  vteprec_arp_sources_local_first;
+  vteprec_arp_sources_local_get_for_uuid;
+  vteprec_arp_sources_local_get_locator;
+  vteprec_arp_sources_local_get_seqno;
+  vteprec_arp_sources_local_get_src_mac;
+  vteprec_arp_sources_local_init;
+  vteprec_arp_sources_local_insert;
+  vteprec_arp_sources_local_is_updated;
+  vteprec_arp_sources_local_next;
+  vteprec_arp_sources_local_remove_clause_false;
+  vteprec_arp_sources_local_remove_clause_locator;
+  vteprec_arp_sources_local_remove_clause_src_mac;
+  vteprec_arp_sources_local_remove_clause_true;
+  vteprec_arp_sources_local_row_get_seqno;
+  vteprec_arp_sources_local_set_locator;
+  vteprec_arp_sources_local_set_src_mac;
+  vteprec_arp_sources_local_track_get_first;
+  vteprec_arp_sources_local_track_get_next;
+  vteprec_arp_sources_local_verify_locator;
+  vteprec_arp_sources_local_verify_src_mac;
+  vteprec_arp_sources_remote_add_clause_false;
+  vteprec_arp_sources_remote_add_clause_locator;
+  vteprec_arp_sources_remote_add_clause_src_mac;
+  vteprec_arp_sources_remote_add_clause_true;
+  vteprec_arp_sources_remote_delete;
+  vteprec_arp_sources_remote_first;
+  vteprec_arp_sources_remote_get_for_uuid;
+  vteprec_arp_sources_remote_get_locator;
+  vteprec_arp_sources_remote_get_seqno;
+  vteprec_arp_sources_remote_get_src_mac;
+  vteprec_arp_sources_remote_init;
+  vteprec_arp_sources_remote_insert;
+  vteprec_arp_sources_remote_is_updated;
+  vteprec_arp_sources_remote_next;
+  vteprec_arp_sources_remote_remove_clause_false;
+  vteprec_arp_sources_remote_remove_clause_locator;
+  vteprec_arp_sources_remote_remove_clause_src_mac;
+  vteprec_arp_sources_remote_remove_clause_true;
+  vteprec_arp_sources_remote_row_get_seqno;
+  vteprec_arp_sources_remote_set_locator;
+  vteprec_arp_sources_remote_set_src_mac;
+  vteprec_arp_sources_remote_track_get_first;
+  vteprec_arp_sources_remote_track_get_next;
+  vteprec_arp_sources_remote_verify_locator;
+  vteprec_arp_sources_remote_verify_src_mac;
+  vteprec_get_db_version;
+  vteprec_global_add_clause_false;
+  vteprec_global_add_clause_managers;
+  vteprec_global_add_clause_other_config;
+  vteprec_global_add_clause_switches;
+  vteprec_global_add_clause_true;
+  vteprec_global_columns;
+  vteprec_global_delete;
+  vteprec_global_first;
+  vteprec_global_get_for_uuid;
+  vteprec_global_get_managers;
+  vteprec_global_get_other_config;
+  vteprec_global_get_seqno;
+  vteprec_global_get_switches;
+  vteprec_global_init;
+  vteprec_global_insert;
+  vteprec_global_is_updated;
+  vteprec_global_next;
+  vteprec_global_remove_clause_false;
+  vteprec_global_remove_clause_managers;
+  vteprec_global_remove_clause_other_config;
+  vteprec_global_remove_clause_switches;
+  vteprec_global_remove_clause_true;
+  vteprec_global_row_get_seqno;
+  vteprec_global_set_managers;
+  vteprec_global_set_other_config;
+  vteprec_global_set_switches;
+  vteprec_global_track_get_first;
+  vteprec_global_track_get_next;
+  vteprec_global_update_managers_addvalue;
+  vteprec_global_update_managers_delvalue;
+  vteprec_global_update_other_config_delkey;
+  vteprec_global_update_other_config_setkey;
+  vteprec_global_update_switches_addvalue;
+  vteprec_global_update_switches_delvalue;
+  vteprec_global_verify_managers;
+  vteprec_global_verify_other_config;
+  vteprec_global_verify_switches;
+  vteprec_idl_class;
+  vteprec_init;
+  vteprec_logical_binding_stats_add_clause_bytes_from_local;
+  vteprec_logical_binding_stats_add_clause_bytes_to_local;
+  vteprec_logical_binding_stats_add_clause_false;
+  vteprec_logical_binding_stats_add_clause_packets_from_local;
+  vteprec_logical_binding_stats_add_clause_packets_to_local;
+  vteprec_logical_binding_stats_add_clause_true;
+  vteprec_logical_binding_stats_delete;
+  vteprec_logical_binding_stats_first;
+  vteprec_logical_binding_stats_get_bytes_from_local;
+  vteprec_logical_binding_stats_get_bytes_to_local;
+  vteprec_logical_binding_stats_get_for_uuid;
+  vteprec_logical_binding_stats_get_packets_from_local;
+  vteprec_logical_binding_stats_get_packets_to_local;
+  vteprec_logical_binding_stats_get_seqno;
+  vteprec_logical_binding_stats_init;
+  vteprec_logical_binding_stats_insert;
+  vteprec_logical_binding_stats_is_updated;
+  vteprec_logical_binding_stats_next;
+  vteprec_logical_binding_stats_remove_clause_bytes_from_local;
+  vteprec_logical_binding_stats_remove_clause_bytes_to_local;
+  vteprec_logical_binding_stats_remove_clause_false;
+  vteprec_logical_binding_stats_remove_clause_packets_from_local;
+  vteprec_logical_binding_stats_remove_clause_packets_to_local;
+  vteprec_logical_binding_stats_remove_clause_true;
+  vteprec_logical_binding_stats_row_get_seqno;
+  vteprec_logical_binding_stats_set_bytes_from_local;
+  vteprec_logical_binding_stats_set_bytes_to_local;
+  vteprec_logical_binding_stats_set_packets_from_local;
+  vteprec_logical_binding_stats_set_packets_to_local;
+  vteprec_logical_binding_stats_track_get_first;
+  vteprec_logical_binding_stats_track_get_next;
+  vteprec_logical_binding_stats_verify_bytes_from_local;
+  vteprec_logical_binding_stats_verify_bytes_to_local;
+  vteprec_logical_binding_stats_verify_packets_from_local;
+  vteprec_logical_binding_stats_verify_packets_to_local;
+  vteprec_logical_router_add_clause_LR_fault_status;
+  vteprec_logical_router_add_clause_acl_binding;
+  vteprec_logical_router_add_clause_description;
+  vteprec_logical_router_add_clause_false;
+  vteprec_logical_router_add_clause_name;
+  vteprec_logical_router_add_clause_other_config;
+  vteprec_logical_router_add_clause_static_routes;
+  vteprec_logical_router_add_clause_switch_binding;
+  vteprec_logical_router_add_clause_true;
+  vteprec_logical_router_columns;
+  vteprec_logical_router_delete;
+  vteprec_logical_router_first;
+  vteprec_logical_router_get_LR_fault_status;
+  vteprec_logical_router_get_acl_binding;
+  vteprec_logical_router_get_description;
+  vteprec_logical_router_get_for_uuid;
+  vteprec_logical_router_get_name;
+  vteprec_logical_router_get_other_config;
+  vteprec_logical_router_get_seqno;
+  vteprec_logical_router_get_static_routes;
+  vteprec_logical_router_get_switch_binding;
+  vteprec_logical_router_init;
+  vteprec_logical_router_insert;
+  vteprec_logical_router_is_updated;
+  vteprec_logical_router_next;
+  vteprec_logical_router_remove_clause_LR_fault_status;
+  vteprec_logical_router_remove_clause_acl_binding;
+  vteprec_logical_router_remove_clause_description;
+  vteprec_logical_router_remove_clause_false;
+  vteprec_logical_router_remove_clause_name;
+  vteprec_logical_router_remove_clause_other_config;
+  vteprec_logical_router_remove_clause_static_routes;
+  vteprec_logical_router_remove_clause_switch_binding;
+  vteprec_logical_router_remove_clause_true;
+  vteprec_logical_router_row_get_seqno;
+  vteprec_logical_router_set_LR_fault_status;
+  vteprec_logical_router_set_acl_binding;
+  vteprec_logical_router_set_description;
+  vteprec_logical_router_set_name;
+  vteprec_logical_router_set_other_config;
+  vteprec_logical_router_set_static_routes;
+  vteprec_logical_router_set_switch_binding;
+  vteprec_logical_router_track_get_first;
+  vteprec_logical_router_track_get_next;
+  vteprec_logical_router_update_LR_fault_status_addvalue;
+  vteprec_logical_router_update_LR_fault_status_delvalue;
+  vteprec_logical_router_update_acl_binding_delkey;
+  vteprec_logical_router_update_acl_binding_setkey;
+  vteprec_logical_router_update_other_config_delkey;
+  vteprec_logical_router_update_other_config_setkey;
+  vteprec_logical_router_update_static_routes_delkey;
+  vteprec_logical_router_update_static_routes_setkey;
+  vteprec_logical_router_update_switch_binding_delkey;
+  vteprec_logical_router_update_switch_binding_setkey;
+  vteprec_logical_router_verify_LR_fault_status;
+  vteprec_logical_router_verify_acl_binding;
+  vteprec_logical_router_verify_description;
+  vteprec_logical_router_verify_name;
+  vteprec_logical_router_verify_other_config;
+  vteprec_logical_router_verify_static_routes;
+  vteprec_logical_router_verify_switch_binding;
+  vteprec_logical_switch_add_clause_description;
+  vteprec_logical_switch_add_clause_false;
+  vteprec_logical_switch_add_clause_name;
+  vteprec_logical_switch_add_clause_other_config;
+  vteprec_logical_switch_add_clause_replication_mode;
+  vteprec_logical_switch_add_clause_true;
+  vteprec_logical_switch_add_clause_tunnel_key;
+  vteprec_logical_switch_columns;
+  vteprec_logical_switch_delete;
+  vteprec_logical_switch_first;
+  vteprec_logical_switch_get_description;
+  vteprec_logical_switch_get_for_uuid;
+  vteprec_logical_switch_get_name;
+  vteprec_logical_switch_get_other_config;
+  vteprec_logical_switch_get_replication_mode;
+  vteprec_logical_switch_get_seqno;
+  vteprec_logical_switch_get_tunnel_key;
+  vteprec_logical_switch_init;
+  vteprec_logical_switch_insert;
+  vteprec_logical_switch_is_updated;
+  vteprec_logical_switch_next;
+  vteprec_logical_switch_remove_clause_description;
+  vteprec_logical_switch_remove_clause_false;
+  vteprec_logical_switch_remove_clause_name;
+  vteprec_logical_switch_remove_clause_other_config;
+  vteprec_logical_switch_remove_clause_replication_mode;
+  vteprec_logical_switch_remove_clause_true;
+  vteprec_logical_switch_remove_clause_tunnel_key;
+  vteprec_logical_switch_row_get_seqno;
+  vteprec_logical_switch_set_description;
+  vteprec_logical_switch_set_name;
+  vteprec_logical_switch_set_other_config;
+  vteprec_logical_switch_set_replication_mode;
+  vteprec_logical_switch_set_tunnel_key;
+  vteprec_logical_switch_track_get_first;
+  vteprec_logical_switch_track_get_next;
+  vteprec_logical_switch_update_other_config_delkey;
+  vteprec_logical_switch_update_other_config_setkey;
+  vteprec_logical_switch_update_replication_mode_addvalue;
+  vteprec_logical_switch_update_replication_mode_delvalue;
+  vteprec_logical_switch_update_tunnel_key_addvalue;
+  vteprec_logical_switch_update_tunnel_key_delvalue;
+  vteprec_logical_switch_verify_description;
+  vteprec_logical_switch_verify_name;
+  vteprec_logical_switch_verify_other_config;
+  vteprec_logical_switch_verify_replication_mode;
+  vteprec_logical_switch_verify_tunnel_key;
+  vteprec_manager_add_clause_false;
+  vteprec_manager_add_clause_inactivity_probe;
+  vteprec_manager_add_clause_is_connected;
+  vteprec_manager_add_clause_max_backoff;
+  vteprec_manager_add_clause_other_config;
+  vteprec_manager_add_clause_status;
+  vteprec_manager_add_clause_target;
+  vteprec_manager_add_clause_true;
+  vteprec_manager_columns;
+  vteprec_manager_delete;
+  vteprec_manager_first;
+  vteprec_manager_get_for_uuid;
+  vteprec_manager_get_inactivity_probe;
+  vteprec_manager_get_is_connected;
+  vteprec_manager_get_max_backoff;
+  vteprec_manager_get_other_config;
+  vteprec_manager_get_seqno;
+  vteprec_manager_get_status;
+  vteprec_manager_get_target;
+  vteprec_manager_init;
+  vteprec_manager_insert;
+  vteprec_manager_is_updated;
+  vteprec_manager_next;
+  vteprec_manager_remove_clause_false;
+  vteprec_manager_remove_clause_inactivity_probe;
+  vteprec_manager_remove_clause_is_connected;
+  vteprec_manager_remove_clause_max_backoff;
+  vteprec_manager_remove_clause_other_config;
+  vteprec_manager_remove_clause_status;
+  vteprec_manager_remove_clause_target;
+  vteprec_manager_remove_clause_true;
+  vteprec_manager_row_get_seqno;
+  vteprec_manager_set_inactivity_probe;
+  vteprec_manager_set_is_connected;
+  vteprec_manager_set_max_backoff;
+  vteprec_manager_set_other_config;
+  vteprec_manager_set_status;
+  vteprec_manager_set_target;
+  vteprec_manager_track_get_first;
+  vteprec_manager_track_get_next;
+  vteprec_manager_update_inactivity_probe_addvalue;
+  vteprec_manager_update_inactivity_probe_delvalue;
+  vteprec_manager_update_max_backoff_addvalue;
+  vteprec_manager_update_max_backoff_delvalue;
+  vteprec_manager_update_other_config_delkey;
+  vteprec_manager_update_other_config_setkey;
+  vteprec_manager_update_status_delkey;
+  vteprec_manager_update_status_setkey;
+  vteprec_manager_verify_inactivity_probe;
+  vteprec_manager_verify_is_connected;
+  vteprec_manager_verify_max_backoff;
+  vteprec_manager_verify_other_config;
+  vteprec_manager_verify_status;
+  vteprec_manager_verify_target;
+  vteprec_mcast_macs_local_add_clause_MAC;
+  vteprec_mcast_macs_local_add_clause_false;
+  vteprec_mcast_macs_local_add_clause_ipaddr;
+  vteprec_mcast_macs_local_add_clause_locator_set;
+  vteprec_mcast_macs_local_add_clause_logical_switch;
+  vteprec_mcast_macs_local_add_clause_true;
+  vteprec_mcast_macs_local_columns;
+  vteprec_mcast_macs_local_delete;
+  vteprec_mcast_macs_local_first;
+  vteprec_mcast_macs_local_get_MAC;
+  vteprec_mcast_macs_local_get_for_uuid;
+  vteprec_mcast_macs_local_get_ipaddr;
+  vteprec_mcast_macs_local_get_locator_set;
+  vteprec_mcast_macs_local_get_logical_switch;
+  vteprec_mcast_macs_local_get_seqno;
+  vteprec_mcast_macs_local_init;
+  vteprec_mcast_macs_local_insert;
+  vteprec_mcast_macs_local_is_updated;
+  vteprec_mcast_macs_local_next;
+  vteprec_mcast_macs_local_remove_clause_MAC;
+  vteprec_mcast_macs_local_remove_clause_false;
+  vteprec_mcast_macs_local_remove_clause_ipaddr;
+  vteprec_mcast_macs_local_remove_clause_locator_set;
+  vteprec_mcast_macs_local_remove_clause_logical_switch;
+  vteprec_mcast_macs_local_remove_clause_true;
+  vteprec_mcast_macs_local_row_get_seqno;
+  vteprec_mcast_macs_local_set_MAC;
+  vteprec_mcast_macs_local_set_ipaddr;
+  vteprec_mcast_macs_local_set_locator_set;
+  vteprec_mcast_macs_local_set_logical_switch;
+  vteprec_mcast_macs_local_track_get_first;
+  vteprec_mcast_macs_local_track_get_next;
+  vteprec_mcast_macs_local_verify_MAC;
+  vteprec_mcast_macs_local_verify_ipaddr;
+  vteprec_mcast_macs_local_verify_locator_set;
+  vteprec_mcast_macs_local_verify_logical_switch;
+  vteprec_mcast_macs_remote_add_clause_MAC;
+  vteprec_mcast_macs_remote_add_clause_false;
+  vteprec_mcast_macs_remote_add_clause_ipaddr;
+  vteprec_mcast_macs_remote_add_clause_locator_set;
+  vteprec_mcast_macs_remote_add_clause_logical_switch;
+  vteprec_mcast_macs_remote_add_clause_true;
+  vteprec_mcast_macs_remote_columns;
+  vteprec_mcast_macs_remote_delete;
+  vteprec_mcast_macs_remote_first;
+  vteprec_mcast_macs_remote_get_MAC;
+  vteprec_mcast_macs_remote_get_for_uuid;
+  vteprec_mcast_macs_remote_get_ipaddr;
+  vteprec_mcast_macs_remote_get_locator_set;
+  vteprec_mcast_macs_remote_get_logical_switch;
+  vteprec_mcast_macs_remote_get_seqno;
+  vteprec_mcast_macs_remote_init;
+  vteprec_mcast_macs_remote_insert;
+  vteprec_mcast_macs_remote_is_updated;
+  vteprec_mcast_macs_remote_next;
+  vteprec_mcast_macs_remote_remove_clause_MAC;
+  vteprec_mcast_macs_remote_remove_clause_false;
+  vteprec_mcast_macs_remote_remove_clause_ipaddr;
+  vteprec_mcast_macs_remote_remove_clause_locator_set;
+  vteprec_mcast_macs_remote_remove_clause_logical_switch;
+  vteprec_mcast_macs_remote_remove_clause_true;
+  vteprec_mcast_macs_remote_row_get_seqno;
+  vteprec_mcast_macs_remote_set_MAC;
+  vteprec_mcast_macs_remote_set_ipaddr;
+  vteprec_mcast_macs_remote_set_locator_set;
+  vteprec_mcast_macs_remote_set_logical_switch;
+  vteprec_mcast_macs_remote_track_get_first;
+  vteprec_mcast_macs_remote_track_get_next;
+  vteprec_mcast_macs_remote_verify_MAC;
+  vteprec_mcast_macs_remote_verify_ipaddr;
+  vteprec_mcast_macs_remote_verify_locator_set;
+  vteprec_mcast_macs_remote_verify_logical_switch;
+  vteprec_physical_locator_add_clause_dst_ip;
+  vteprec_physical_locator_add_clause_encapsulation_type;
+  vteprec_physical_locator_add_clause_false;
+  vteprec_physical_locator_add_clause_true;
+  vteprec_physical_locator_add_clause_tunnel_key;
+  vteprec_physical_locator_columns;
+  vteprec_physical_locator_delete;
+  vteprec_physical_locator_first;
+  vteprec_physical_locator_get_dst_ip;
+  vteprec_physical_locator_get_encapsulation_type;
+  vteprec_physical_locator_get_for_uuid;
+  vteprec_physical_locator_get_seqno;
+  vteprec_physical_locator_get_tunnel_key;
+  vteprec_physical_locator_init;
+  vteprec_physical_locator_insert;
+  vteprec_physical_locator_is_updated;
+  vteprec_physical_locator_next;
+  vteprec_physical_locator_remove_clause_dst_ip;
+  vteprec_physical_locator_remove_clause_encapsulation_type;
+  vteprec_physical_locator_remove_clause_false;
+  vteprec_physical_locator_remove_clause_true;
+  vteprec_physical_locator_remove_clause_tunnel_key;
+  vteprec_physical_locator_row_get_seqno;
+  vteprec_physical_locator_set_add_clause_false;
+  vteprec_physical_locator_set_add_clause_locators;
+  vteprec_physical_locator_set_add_clause_true;
+  vteprec_physical_locator_set_columns;
+  vteprec_physical_locator_set_delete;
+  vteprec_physical_locator_set_dst_ip;
+  vteprec_physical_locator_set_encapsulation_type;
+  vteprec_physical_locator_set_first;
+  vteprec_physical_locator_set_get_for_uuid;
+  vteprec_physical_locator_set_get_locators;
+  vteprec_physical_locator_set_get_seqno;
+  vteprec_physical_locator_set_init;
+  vteprec_physical_locator_set_insert;
+  vteprec_physical_locator_set_is_updated;
+  vteprec_physical_locator_set_next;
+  vteprec_physical_locator_set_remove_clause_false;
+  vteprec_physical_locator_set_remove_clause_locators;
+  vteprec_physical_locator_set_remove_clause_true;
+  vteprec_physical_locator_set_row_get_seqno;
+  vteprec_physical_locator_set_set_locators;
+  vteprec_physical_locator_set_track_get_first;
+  vteprec_physical_locator_set_track_get_next;
+  vteprec_physical_locator_set_tunnel_key;
+  vteprec_physical_locator_set_update_locators_addvalue;
+  vteprec_physical_locator_set_update_locators_delvalue;
+  vteprec_physical_locator_set_verify_locators;
+  vteprec_physical_locator_track_get_first;
+  vteprec_physical_locator_track_get_next;
+  vteprec_physical_locator_update_tunnel_key_addvalue;
+  vteprec_physical_locator_update_tunnel_key_delvalue;
+  vteprec_physical_locator_verify_dst_ip;
+  vteprec_physical_locator_verify_encapsulation_type;
+  vteprec_physical_locator_verify_tunnel_key;
+  vteprec_physical_port_add_clause_acl_bindings;
+  vteprec_physical_port_add_clause_description;
+  vteprec_physical_port_add_clause_false;
+  vteprec_physical_port_add_clause_name;
+  vteprec_physical_port_add_clause_other_config;
+  vteprec_physical_port_add_clause_port_fault_status;
+  vteprec_physical_port_add_clause_true;
+  vteprec_physical_port_add_clause_vlan_bindings;
+  vteprec_physical_port_add_clause_vlan_stats;
+  vteprec_physical_port_columns;
+  vteprec_physical_port_delete;
+  vteprec_physical_port_first;
+  vteprec_physical_port_get_acl_bindings;
+  vteprec_physical_port_get_description;
+  vteprec_physical_port_get_for_uuid;
+  vteprec_physical_port_get_name;
+  vteprec_physical_port_get_other_config;
+  vteprec_physical_port_get_port_fault_status;
+  vteprec_physical_port_get_seqno;
+  vteprec_physical_port_get_vlan_bindings;
+  vteprec_physical_port_get_vlan_stats;
+  vteprec_physical_port_init;
+  vteprec_physical_port_insert;
+  vteprec_physical_port_is_updated;
+  vteprec_physical_port_next;
+  vteprec_physical_port_remove_clause_acl_bindings;
+  vteprec_physical_port_remove_clause_description;
+  vteprec_physical_port_remove_clause_false;
+  vteprec_physical_port_remove_clause_name;
+  vteprec_physical_port_remove_clause_other_config;
+  vteprec_physical_port_remove_clause_port_fault_status;
+  vteprec_physical_port_remove_clause_true;
+  vteprec_physical_port_remove_clause_vlan_bindings;
+  vteprec_physical_port_remove_clause_vlan_stats;
+  vteprec_physical_port_row_get_seqno;
+  vteprec_physical_port_set_acl_bindings;
+  vteprec_physical_port_set_description;
+  vteprec_physical_port_set_name;
+  vteprec_physical_port_set_other_config;
+  vteprec_physical_port_set_port_fault_status;
+  vteprec_physical_port_set_vlan_bindings;
+  vteprec_physical_port_set_vlan_stats;
+  vteprec_physical_port_track_get_first;
+  vteprec_physical_port_track_get_next;
+  vteprec_physical_port_update_acl_bindings_delkey;
+  vteprec_physical_port_update_acl_bindings_setkey;
+  vteprec_physical_port_update_other_config_delkey;
+  vteprec_physical_port_update_other_config_setkey;
+  vteprec_physical_port_update_port_fault_status_addvalue;
+  vteprec_physical_port_update_port_fault_status_delvalue;
+  vteprec_physical_port_update_vlan_bindings_delkey;
+  vteprec_physical_port_update_vlan_bindings_setkey;
+  vteprec_physical_port_update_vlan_stats_delkey;
+  vteprec_physical_port_update_vlan_stats_setkey;
+  vteprec_physical_port_verify_acl_bindings;
+  vteprec_physical_port_verify_description;
+  vteprec_physical_port_verify_name;
+  vteprec_physical_port_verify_other_config;
+  vteprec_physical_port_verify_port_fault_status;
+  vteprec_physical_port_verify_vlan_bindings;
+  vteprec_physical_port_verify_vlan_stats;
+  vteprec_physical_switch_add_clause_description;
+  vteprec_physical_switch_add_clause_false;
+  vteprec_physical_switch_add_clause_management_ips;
+  vteprec_physical_switch_add_clause_name;
+  vteprec_physical_switch_add_clause_other_config;
+  vteprec_physical_switch_add_clause_ports;
+  vteprec_physical_switch_add_clause_switch_fault_status;
+  vteprec_physical_switch_add_clause_true;
+  vteprec_physical_switch_add_clause_tunnel_ips;
+  vteprec_physical_switch_add_clause_tunnels;
+  vteprec_physical_switch_columns;
+  vteprec_physical_switch_delete;
+  vteprec_physical_switch_first;
+  vteprec_physical_switch_get_description;
+  vteprec_physical_switch_get_for_uuid;
+  vteprec_physical_switch_get_management_ips;
+  vteprec_physical_switch_get_name;
+  vteprec_physical_switch_get_other_config;
+  vteprec_physical_switch_get_ports;
+  vteprec_physical_switch_get_seqno;
+  vteprec_physical_switch_get_switch_fault_status;
+  vteprec_physical_switch_get_tunnel_ips;
+  vteprec_physical_switch_get_tunnels;
+  vteprec_physical_switch_init;
+  vteprec_physical_switch_insert;
+  vteprec_physical_switch_is_updated;
+  vteprec_physical_switch_next;
+  vteprec_physical_switch_remove_clause_description;
+  vteprec_physical_switch_remove_clause_false;
+  vteprec_physical_switch_remove_clause_management_ips;
+  vteprec_physical_switch_remove_clause_name;
+  vteprec_physical_switch_remove_clause_other_config;
+  vteprec_physical_switch_remove_clause_ports;
+  vteprec_physical_switch_remove_clause_switch_fault_status;
+  vteprec_physical_switch_remove_clause_true;
+  vteprec_physical_switch_remove_clause_tunnel_ips;
+  vteprec_physical_switch_remove_clause_tunnels;
+  vteprec_physical_switch_row_get_seqno;
+  vteprec_physical_switch_set_description;
+  vteprec_physical_switch_set_management_ips;
+  vteprec_physical_switch_set_name;
+  vteprec_physical_switch_set_other_config;
+  vteprec_physical_switch_set_ports;
+  vteprec_physical_switch_set_switch_fault_status;
+  vteprec_physical_switch_set_tunnel_ips;
+  vteprec_physical_switch_set_tunnels;
+  vteprec_physical_switch_track_get_first;
+  vteprec_physical_switch_track_get_next;
+  vteprec_physical_switch_update_management_ips_addvalue;
+  vteprec_physical_switch_update_management_ips_delvalue;
+  vteprec_physical_switch_update_other_config_delkey;
+  vteprec_physical_switch_update_other_config_setkey;
+  vteprec_physical_switch_update_ports_addvalue;
+  vteprec_physical_switch_update_ports_delvalue;
+  vteprec_physical_switch_update_switch_fault_status_addvalue;
+  vteprec_physical_switch_update_switch_fault_status_delvalue;
+  vteprec_physical_switch_update_tunnel_ips_addvalue;
+  vteprec_physical_switch_update_tunnel_ips_delvalue;
+  vteprec_physical_switch_update_tunnels_addvalue;
+  vteprec_physical_switch_update_tunnels_delvalue;
+  vteprec_physical_switch_verify_description;
+  vteprec_physical_switch_verify_management_ips;
+  vteprec_physical_switch_verify_name;
+  vteprec_physical_switch_verify_other_config;
+  vteprec_physical_switch_verify_ports;
+  vteprec_physical_switch_verify_switch_fault_status;
+  vteprec_physical_switch_verify_tunnel_ips;
+  vteprec_physical_switch_verify_tunnels;
+  vteprec_table_classes;
+  vteprec_tunnel_add_clause_bfd_config_local;
+  vteprec_tunnel_add_clause_bfd_config_remote;
+  vteprec_tunnel_add_clause_bfd_params;
+  vteprec_tunnel_add_clause_bfd_status;
+  vteprec_tunnel_add_clause_false;
+  vteprec_tunnel_add_clause_local;
+  vteprec_tunnel_add_clause_remote;
+  vteprec_tunnel_add_clause_true;
+  vteprec_tunnel_columns;
+  vteprec_tunnel_delete;
+  vteprec_tunnel_first;
+  vteprec_tunnel_get_bfd_config_local;
+  vteprec_tunnel_get_bfd_config_remote;
+  vteprec_tunnel_get_bfd_params;
+  vteprec_tunnel_get_bfd_status;
+  vteprec_tunnel_get_for_uuid;
+  vteprec_tunnel_get_local;
+  vteprec_tunnel_get_remote;
+  vteprec_tunnel_get_seqno;
+  vteprec_tunnel_init;
+  vteprec_tunnel_insert;
+  vteprec_tunnel_is_updated;
+  vteprec_tunnel_next;
+  vteprec_tunnel_remove_clause_bfd_config_local;
+  vteprec_tunnel_remove_clause_bfd_config_remote;
+  vteprec_tunnel_remove_clause_bfd_params;
+  vteprec_tunnel_remove_clause_bfd_status;
+  vteprec_tunnel_remove_clause_false;
+  vteprec_tunnel_remove_clause_local;
+  vteprec_tunnel_remove_clause_remote;
+  vteprec_tunnel_remove_clause_true;
+  vteprec_tunnel_row_get_seqno;
+  vteprec_tunnel_set_bfd_config_local;
+  vteprec_tunnel_set_bfd_config_remote;
+  vteprec_tunnel_set_bfd_params;
+  vteprec_tunnel_set_bfd_status;
+  vteprec_tunnel_set_local;
+  vteprec_tunnel_set_remote;
+  vteprec_tunnel_track_get_first;
+  vteprec_tunnel_track_get_next;
+  vteprec_tunnel_update_bfd_config_local_delkey;
+  vteprec_tunnel_update_bfd_config_local_setkey;
+  vteprec_tunnel_update_bfd_config_remote_delkey;
+  vteprec_tunnel_update_bfd_config_remote_setkey;
+  vteprec_tunnel_update_bfd_params_delkey;
+  vteprec_tunnel_update_bfd_params_setkey;
+  vteprec_tunnel_update_bfd_status_delkey;
+  vteprec_tunnel_update_bfd_status_setkey;
+  vteprec_tunnel_verify_bfd_config_local;
+  vteprec_tunnel_verify_bfd_config_remote;
+  vteprec_tunnel_verify_bfd_params;
+  vteprec_tunnel_verify_bfd_status;
+  vteprec_tunnel_verify_local;
+  vteprec_tunnel_verify_remote;
+  vteprec_ucast_macs_local_add_clause_MAC;
+  vteprec_ucast_macs_local_add_clause_false;
+  vteprec_ucast_macs_local_add_clause_ipaddr;
+  vteprec_ucast_macs_local_add_clause_locator;
+  vteprec_ucast_macs_local_add_clause_logical_switch;
+  vteprec_ucast_macs_local_add_clause_true;
+  vteprec_ucast_macs_local_columns;
+  vteprec_ucast_macs_local_delete;
+  vteprec_ucast_macs_local_first;
+  vteprec_ucast_macs_local_get_MAC;
+  vteprec_ucast_macs_local_get_for_uuid;
+  vteprec_ucast_macs_local_get_ipaddr;
+  vteprec_ucast_macs_local_get_locator;
+  vteprec_ucast_macs_local_get_logical_switch;
+  vteprec_ucast_macs_local_get_seqno;
+  vteprec_ucast_macs_local_init;
+  vteprec_ucast_macs_local_insert;
+  vteprec_ucast_macs_local_is_updated;
+  vteprec_ucast_macs_local_next;
+  vteprec_ucast_macs_local_remove_clause_MAC;
+  vteprec_ucast_macs_local_remove_clause_false;
+  vteprec_ucast_macs_local_remove_clause_ipaddr;
+  vteprec_ucast_macs_local_remove_clause_locator;
+  vteprec_ucast_macs_local_remove_clause_logical_switch;
+  vteprec_ucast_macs_local_remove_clause_true;
+  vteprec_ucast_macs_local_row_get_seqno;
+  vteprec_ucast_macs_local_set_MAC;
+  vteprec_ucast_macs_local_set_ipaddr;
+  vteprec_ucast_macs_local_set_locator;
+  vteprec_ucast_macs_local_set_logical_switch;
+  vteprec_ucast_macs_local_track_get_first;
+  vteprec_ucast_macs_local_track_get_next;
+  vteprec_ucast_macs_local_verify_MAC;
+  vteprec_ucast_macs_local_verify_ipaddr;
+  vteprec_ucast_macs_local_verify_locator;
+  vteprec_ucast_macs_local_verify_logical_switch;
+  vteprec_ucast_macs_remote_add_clause_MAC;
+  vteprec_ucast_macs_remote_add_clause_false;
+  vteprec_ucast_macs_remote_add_clause_ipaddr;
+  vteprec_ucast_macs_remote_add_clause_locator;
+  vteprec_ucast_macs_remote_add_clause_logical_switch;
+  vteprec_ucast_macs_remote_add_clause_true;
+  vteprec_ucast_macs_remote_columns;
+  vteprec_ucast_macs_remote_delete;
+  vteprec_ucast_macs_remote_first;
+  vteprec_ucast_macs_remote_get_MAC;
+  vteprec_ucast_macs_remote_get_for_uuid;
+  vteprec_ucast_macs_remote_get_ipaddr;
+  vteprec_ucast_macs_remote_get_locator;
+  vteprec_ucast_macs_remote_get_logical_switch;
+  vteprec_ucast_macs_remote_get_seqno;
+  vteprec_ucast_macs_remote_init;
+  vteprec_ucast_macs_remote_insert;
+  vteprec_ucast_macs_remote_is_updated;
+  vteprec_ucast_macs_remote_next;
+  vteprec_ucast_macs_remote_remove_clause_MAC;
+  vteprec_ucast_macs_remote_remove_clause_false;
+  vteprec_ucast_macs_remote_remove_clause_ipaddr;
+  vteprec_ucast_macs_remote_remove_clause_locator;
+  vteprec_ucast_macs_remote_remove_clause_logical_switch;
+  vteprec_ucast_macs_remote_remove_clause_true;
+  vteprec_ucast_macs_remote_row_get_seqno;
+  vteprec_ucast_macs_remote_set_MAC;
+  vteprec_ucast_macs_remote_set_ipaddr;
+  vteprec_ucast_macs_remote_set_locator;
+  vteprec_ucast_macs_remote_set_logical_switch;
+  vteprec_ucast_macs_remote_track_get_first;
+  vteprec_ucast_macs_remote_track_get_next;
+  vteprec_ucast_macs_remote_verify_MAC;
+  vteprec_ucast_macs_remote_verify_ipaddr;
+  vteprec_ucast_macs_remote_verify_locator;
+  vteprec_ucast_macs_remote_verify_logical_switch;
+local:
+    *;
 };
