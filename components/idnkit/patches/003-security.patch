Oracle patch to prevent the use of user config file.
Deemed no longer necessary, shall be removed after integration to UL
and once ARC is notified.
diff --git a/include/idn/logmacro.h b/include/idn/logmacro.h
--- a/include/idn/logmacro.h
+++ b/include/idn/logmacro.h
@@ -192,11 +192,20 @@
 #include <stddef.h>
 #include <idn/log.h>
 
+#ifdef        SUN_CHANGE
+#define FATAL(x)
+#define ERROR(x)
+#define WARNING(x)
+#define INFO(x)
+#define TRACE(x)
+#else
 #define FATAL(x)	idn_log_fatal x
 #define ERROR(x)	idn_log_error x
 #define WARNING(x)	idn_log_warning x
 #define INFO(x)		LOG_AT_LEVEL(idn_log_level_info, idn_log_info, x)
 #define TRACE(x)	LOG_AT_LEVEL(idn_log_level_trace, idn_log_trace, x)
+#endif        /* SUN_CHANGE */
+
 #define DUMP(x)		LOG_AT_LEVEL(idn_log_level_dump, idn_log_dump, x)
 
 #define LOG_AT_LEVEL(lv, fun, x) do {if (LOGLEVEL >= (lv)) fun x; } while (0)
diff --git a/lib/encodingalias.c b/lib/encodingalias.c
--- a/lib/encodingalias.c
+++ b/lib/encodingalias.c
@@ -190,6 +190,11 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef  SUN_CHANGE
+#include <sys/types.h>
+#include <sys/stat.h>
+#endif  /* SUN_CHANGE */
+
 #include <idn/assert.h>
 #include <idn/debug.h>
 #include <idn/logmacro.h>
@@ -315,12 +320,34 @@
 	FILE *fp = NULL;
 	int line_no;
 	char line[200], pattern[200], encoding[200];
+#ifdef  SUN_CHANGE
+	struct stat64 sbuf;
+#endif /* SUN_CHANGE */
 
 	assert(file != NULL);
 
 	TRACE(("idn__encodingalias_addfromfile(file=\"%s\")\n",
 	       idn__debug_xstring(file)));
 
+#ifdef  SUN_CHANGE
+	if (stat64(file, &sbuf) == -1) {
+		r = idn_nofile;
+		goto ret;
+	}
+	
+	/*
+	 * We make sure that the access mode is 0444, owner is root, and
+	 * group is sys for better security; see LSARC/2003/311.
+	 */
+	if (sbuf.st_mode != 0100444 || sbuf.st_uid != 0 || sbuf.st_gid != 3) {
+		fprintf(stderr, "idn_nameinit: warning: config file "
+			"(%s) not in proper access mode or ownership "
+			"- the file ignored.\n", file);
+		r = idn_nofile;
+		goto ret;
+	}
+#endif  /* SUN_CHANGE */
+
 	fp = fopen(file, "r");
 	if (fp == NULL) {
 		r = idn_nofile;
diff --git a/lib/foreignmap.c b/lib/foreignmap.c
--- a/lib/foreignmap.c
+++ b/lib/foreignmap.c
@@ -190,6 +190,11 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef  SUN_CHANGE
+#include <sys/types.h>
+#include <sys/stat.h>
+#endif  /* SUN_CHANGE */
+
 #include <idn/assert.h>
 #include <idn/debug.h>
 #include <idn/logmacro.h>
@@ -378,6 +383,9 @@
 	unsigned long from;
 	unsigned long to[MAX_MAP_RESULT_LENGTH + 1];
 	size_t tolen;
+#ifdef  SUN_CHANGE
+	struct stat64 sbuf;
+#endif /* SUN_CHANGE */
 	int lineno = 0;
 
 	assert(ctx != NULL && file != NULL);
@@ -387,6 +395,26 @@
 
 	if (strncmp(file, "filemap:", 8) == 0)
 		file += 8;
+
+#ifdef  SUN_CHANGE
+	if (stat64(file, &sbuf) == -1) {
+		r = idn_nofile;
+		goto ret;
+	}
+	
+	/*
+	 * We make sure that the access mode is 0444, owner is root, and
+	 * group is sys for better security; see LSARC/2003/311.
+	 */
+	if (sbuf.st_mode != 0100444 || sbuf.st_uid != 0 || sbuf.st_gid != 3) {
+		fprintf(stderr, "idn_nameinit: warning: config file "
+			"(%s) not in proper access mode or ownership "
+			"- the file ignored.\n", file);
+		r = idn_nofile;
+		goto ret;
+	}
+#endif  /* SUN_CHANGE */
+
 	fp = fopen(file, "r");
 	if (fp == NULL) {
 		r = idn_nofile;
diff --git a/lib/foreignset.c b/lib/foreignset.c
--- a/lib/foreignset.c
+++ b/lib/foreignset.c
@@ -190,6 +190,11 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef  SUN_CHANGE
+#include <sys/types.h>
+#include <sys/stat.h>
+#endif  /* SUN_CHANGE */
+
 #include <idn/assert.h>
 #include <idn/debug.h>
 #include <idn/logmacro.h>
@@ -302,6 +307,9 @@
 	char line[MAX_MAPFILE_LINE_LENGTH + 1];
 	unsigned long min_codepoint;
 	unsigned long max_codepoint;
+#ifdef  SUN_CHANGE
+	struct stat64 sbuf;
+#endif /* SUN_CHANGE */
 	int lineno = 0;
 
 	assert(ctx != NULL && file != NULL);
@@ -311,6 +319,26 @@
 
 	if (strncmp(file, "fileset:", 8) == 0)
 		file += 8;
+
+#ifdef  SUN_CHANGE
+	if (stat64(file, &sbuf) == -1) {
+		r = idn_nofile;
+		goto ret;
+	}
+	
+	/*
+	 * We make sure that the access mode is 0444, owner is root, and
+	 * group is sys for better security; see LSARC/2003/311.
+	 */
+	if (sbuf.st_mode != 0100444 || sbuf.st_uid != 0 || sbuf.st_gid != 3) {
+		fprintf(stderr, "idn_nameinit: warning: config file "
+			"(%s) not in proper access mode or ownership "
+			"- the file ignored.\n", file);
+		r = idn_nofile;
+		goto ret;
+	}
+#endif  /* SUN_CHANGE */
+
 	fp = fopen(file, "r");
 	if (fp == NULL) {
 		r = idn_nofile;
diff --git a/lib/langalias.c b/lib/langalias.c
--- a/lib/langalias.c
+++ b/lib/langalias.c
@@ -190,6 +190,11 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef  SUN_CHANGE
+#include <sys/types.h>
+#include <sys/stat.h>
+#endif  /* SUN_CHANGE */
+
 #include <idn/assert.h>
 #include <idn/debug.h>
 #include <idn/logmacro.h>
@@ -356,12 +361,34 @@
 	FILE *fp = NULL;
 	int line_no;
 	char line[200], alias[200], real[200];
+#ifdef  SUN_CHANGE
+	struct stat64 sbuf;
+#endif /* SUN_CHANGE */
 
 	assert(ctx != NULL && file != NULL);
 
 	TRACE(("idn__langalias_addfromfile(file=\"%s\")\n",
 	       idn__debug_xstring(file)));
 
+#ifdef  SUN_CHANGE
+	if (stat64(file, &sbuf) == -1) {
+		r = idn_nofile;
+		goto ret;
+	}
+	
+	/*
+	 * We make sure that the access mode is 0444, owner is root, and
+	 * group is sys for better security; see LSARC/2003/311.
+	 */
+	if (sbuf.st_mode != 0100444 || sbuf.st_uid != 0 || sbuf.st_gid != 3) {
+		fprintf(stderr, "idn_nameinit: warning: config file "
+			"(%s) not in proper access mode or ownership "
+			"- the file ignored.\n", file);
+		r = idn_nofile;
+		goto ret;
+	}
+#endif  /* SUN_CHANGE */
+
 	fp = fopen(file, "r");
 	if (fp == NULL) {
 		r = idn_nofile;
@@ -390,6 +417,8 @@
 ret:
 	TRACE(("idn__langalias_addfromfile(): %s\n",
 	       idn_result_tostring(r)));
+	if (fp != NULL)
+		fclose(fp);
 	return (r);
 }
 
diff --git a/lib/resconf.c b/lib/resconf.c
--- a/lib/resconf.c
+++ b/lib/resconf.c
@@ -211,6 +211,11 @@
 #endif
 #endif
 
+#ifdef  SUN_CHANGE
+#include <sys/types.h>
+#include <sys/stat.h>
+#endif  /* SUN_CHANGE */
+
 #include <idn/assert.h>
 #include <idn/debug.h>
 #include <idn/logmacro.h>
@@ -635,6 +640,12 @@
 static idn_result_t
 open_userconffile(FILE **fpp) {
 	char filepath[PATH_MAX + 1];
+#ifdef  SUN_CHANGE
+	/*
+	 * We don't allow user default file; see LSARC/2003/311.
+	 */
+	return (idn_nofile);
+#else
 
 #ifdef WIN32
 	{
@@ -664,6 +675,7 @@
 		return (idn_nofile);
 
 	return (idn_success);
+#endif  /* SUN_CHANGE */
 }
 
 /*
@@ -672,6 +684,9 @@
 static idn_result_t
 open_systemconffile(FILE **fpp) {
 	char filepath[PATH_MAX + 1];
+#ifdef  SUN_CHANGE
+	struct stat64 sbuf;
+#endif /* SUN_CHANGE */
 
 #ifdef WIN32
 	{
@@ -692,6 +707,23 @@
 	}
 #endif
 
+#ifdef  SUN_CHANGE
+	if (stat64(filepath, &sbuf) == -1) {
+		return (idn_nofile);
+	}
+	/*
+	 * We make sure that the access mode is 0444, owner is root,
+	 * and group is sys for better security; see LSARC/2003/311.
+	 */
+	if (sbuf.st_mode != 0100444 || sbuf.st_uid != 0 ||
+	    sbuf.st_gid != 3) {
+		fprintf(stderr, "idn_nameinit: warning: config file "
+			"(%s) not in proper access mode or ownership "
+			"- the file ignored.\n", filepath);
+		return (idn_nofile);
+	}
+#endif  /* SUN_CHANGE */
+
 	*fpp = fopen(filepath, "r");
 	if (*fpp == NULL)
 		return (idn_nofile);
diff --git a/man/idn2.conf.5.in b/man/idn2.conf.5.in
--- a/man/idn2.conf.5.in
+++ b/man/idn2.conf.5.in
@@ -437,9 +437,23 @@
 .br
 .I ~/.idn2rc
 .br
-.I @sysconfdir@/idn2.conf.sample
-\- sample configuration with comments
 .\"
+
+.SH NOTES
+.sp
+.LP
+To avoid potential security issues, the library functions will check if the configuration files are in a proper access mode (\fI0444\fP) and ownership (\fIroot:sys\fP). If they are not in the proper access mode or ownership, the function will not read and use the configurations defined in the files, but use the default values. In this case, a warning message will be issued, for example:
+.sp
+.in +2
+.nf
+idn_nameinit: warning: config file (@sysconfdir@/idn2.conf) not in proper
+                       access mode or ownership - the file ignored.
+.fi
+.in -2
+.sp
+.LP
+In the same security concern, while they are mentioned in the man pages, all user configuration files (i.e., $(HOME)/.idn2rc) will be ignored as if the files do not exist.
+
 .SH "SEE ALSO"
 idncheck(1),
 idncmp(1),
diff --git a/man/idn_nameinit.3 b/man/idn_nameinit.3
--- a/man/idn_nameinit.3
+++ b/man/idn_nameinit.3
@@ -234,6 +234,22 @@
 \fBidn_setlocalcheckfile()\fR
 .RE
 .\"
+
+.SH NOTES
+.sp
+.LP
+To avoid potential security issues, the library functions will check if the configuration files are in a proper access mode (\fI0444\fP) and ownership (\fIroot:sys\fP). If they are not in the proper access mode or ownership, the function will not read and use the configurations defined in the files, but use the default values. In this case, a warning message will be issued, for example:
+.sp
+.in +2
+.nf
+idn_nameinit: warning: config file (@sysconfdir@/idn2.conf) not in proper
+                       access mode or ownership - the file ignored.
+.fi
+.in -2
+.sp
+.LP
+In the same security concern, while they are mentioned in the man pages, all user configuration files (i.e., $(HOME)/.idn2rc) will be ignored as if the files do not exist.
+
 .SH "SEE ALSO"
 libidnkit(3),
 idn_checkname(3),
diff --git a/man/idnalias.conf.5.in b/man/idnalias.conf.5.in
--- a/man/idnalias.conf.5.in
+++ b/man/idnalias.conf.5.in
@@ -246,6 +246,22 @@
 .SH FILES
 .I @sysconfdir@/idnalias.conf
 .\"
+
+.SH NOTES
+.sp
+.LP
+To avoid potential security issues, the library functions will check if the configuration files are in a proper access mode (\fI0444\fP) and ownership (\fIroot:sys\fP). If they are not in the proper access mode or ownership, the function will not read and use the configurations defined in the files, but use the default values. In this case, a warning message will be issued, for example:
+.sp
+.in +2
+.nf
+idn_nameinit: warning: config file (@sysconfdir@/idn2.conf) not in proper
+                       access mode or ownership - the file ignored.
+.fi
+.in -2
+.sp
+.LP
+In the same security concern, while they are mentioned in the man pages, all user configuration files (i.e., $(HOME)/.idn2rc) will be ignored as if the files do not exist.
+
 .SH "SEE ALSO"
 idncheck(1),
 idncmp(1),
diff --git a/man/idnlang.conf.5.in b/man/idnlang.conf.5.in
--- a/man/idnlang.conf.5.in
+++ b/man/idnlang.conf.5.in
@@ -237,6 +237,22 @@
 .SH FILES
 .I @sysconfdir@/idnlang.conf
 .\"
+
+.SH NOTES
+.sp
+.LP
+To avoid potential security issues, the library functions will check if the configuration files are in a proper access mode (\fI0444\fP) and ownership (\fIroot:sys\fP). If they are not in the proper access mode or ownership, the function will not read and use the configurations defined in the files, but use the default values. In this case, a warning message will be issued, for example:
+.sp
+.in +2
+.nf
+idn_nameinit: warning: config file (@sysconfdir@/idn2.conf) not in proper
+                       access mode or ownership - the file ignored.
+.fi
+.in -2
+.sp
+.LP
+In the same security concern, while they are mentioned in the man pages, all user configuration files (i.e., $(HOME)/.idn2rc) will be ignored as if the files do not exist.
+
 .SH "SEE ALSO"
 idncheck(1),
 idncmp(1),
