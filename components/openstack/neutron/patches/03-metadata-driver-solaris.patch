Changes to the Neutron Metadata agent to port it to Solaris. These
changes will eventually be proposed upstream.

--- neutron-8.0.0/neutron/agent/metadata/driver.py.~1~	2016-04-07 00:44:25.000000000 -0700
+++ neutron-8.0.0/neutron/agent/metadata/driver.py	2016-05-08 22:58:35.936392260 -0700
@@ -14,6 +14,7 @@
 #    under the License.
 
 import os
+import platform
 
 from neutron.agent.common import config
 from neutron.agent.l3 import ha_router
@@ -36,10 +37,16 @@ class MetadataDriver(object):
     def __init__(self, l3_agent):
         self.metadata_port = l3_agent.conf.metadata_port
         self.metadata_access_mark = l3_agent.conf.metadata_access_mark
-        registry.subscribe(
-            after_router_added, resources.ROUTER, events.AFTER_CREATE)
-        registry.subscribe(
-            before_router_removed, resources.ROUTER, events.BEFORE_DELETE)
+        if platform.system() == "SunOS":
+            registry.subscribe(after_router_added_solaris, resources.ROUTER,
+                               events.AFTER_CREATE)
+            registry.subscribe(before_router_removed_solaris, resources.ROUTER,
+                               events.BEFORE_DELETE)
+        else:
+            registry.subscribe(after_router_added, resources.ROUTER,
+                               events.AFTER_CREATE)
+            registry.subscribe(before_router_removed, resources.ROUTER,
+                               events.BEFORE_DELETE)
 
     @classmethod
     def metadata_filter_rules(cls, port, mark):
@@ -96,14 +103,18 @@ class MetadataDriver(object):
             metadata_proxy_socket = conf.metadata_proxy_socket
             user, group, watch_log = (
                 cls._get_metadata_proxy_user_group_watchlog(conf))
-            proxy_cmd = ['neutron-ns-metadata-proxy',
-                         '--pid_file=%s' % pid_file,
-                         '--metadata_proxy_socket=%s' % metadata_proxy_socket,
-                         lookup_param,
-                         '--state_path=%s' % conf.state_path,
-                         '--metadata_port=%s' % port,
-                         '--metadata_proxy_user=%s' % user,
-                         '--metadata_proxy_group=%s' % group]
+            if platform.system() == "SunOS":
+                proxy_cmd = ['/usr/lib/neutron/neutron-ns-metadata-proxy']
+            else:
+                proxy_cmd = ['neutron-ns-metadata-proxy',
+                             '--metadata_proxy_user=%s' % user,
+                             '--metadata_proxy_group=%s' % group]
+            proxy_cmd.extend(['--pid_file=%s' % pid_file,
+                              '--metadata_proxy_socket=%s' %
+                              metadata_proxy_socket,
+                              lookup_param,
+                              '--state_path=%s' % conf.state_path,
+                              '--metadata_port=%s' % port])
             proxy_cmd.extend(config.get_log_args(
                 conf, 'neutron-ns-metadata-proxy-%s.log' % uuid,
                 metadata_proxy_watch_log=watch_log))
@@ -168,3 +179,25 @@ def before_router_removed(resource, even
     proxy.destroy_monitored_metadata_proxy(l3_agent.process_monitor,
                                           router.router['id'],
                                           l3_agent.conf)
+
+
+def after_router_added_solaris(resource, event, l3_agent, **kwargs):
+    router = kwargs['router']
+    proxy = l3_agent.metadata_driver
+    if not router.router['ha']:
+        proxy.spawn_monitored_metadata_proxy(
+            l3_agent.process_monitor,
+            router.ns_name,
+            proxy.metadata_port,
+            l3_agent.conf,
+            router_id=router.router_id)
+
+
+def before_router_removed_solaris(resource, event, l3_agent, **kwargs):
+    router = kwargs['router']
+    proxy = l3_agent.metadata_driver
+    if not router.router['ha']:
+        proxy.destroy_monitored_metadata_proxy(l3_agent.process_monitor,
+                                               router.router['id'],
+                                               router.ns_name,
+                                               l3_agent.conf)
