#!/usr/bin/python2.6

# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import os
import re
import sys

import smf_include

from subprocess import CalledProcessError, Popen, PIPE, check_call


def start():
    # verify paths are valid
    for f in sys.argv[2:4]:
        if not os.path.exists(f) or not os.access(f, os.R_OK):
            print '%s does not exist or is not readable' % f
            return smf_include.SMF_EXIT_ERR_CONFIG

    cmd = "/usr/lib/neutron/neutron-dhcp-agent --config-file %s " \
        "--config-file %s" % tuple(sys.argv[2:4])
    smf_include.smf_subprocess(cmd)


def stop():
    try:
        # first kill the SMF contract
        check_call(["/usr/bin/pkill", "-c", sys.argv[2]])
    except CalledProcessError as err:
        print "failed to kill the SMF contract: %s" % err
        return smf_include.SMF_EXIT_ERR_FATAL

    cmd = ["/usr/sbin/ipadm", "show-if", "-p", "-o", "ifname"]
    p = Popen(cmd, stdout=PIPE, stderr=PIPE)
    output, error = p.communicate()
    if p.returncode != 0:
        print "failed to retrieve IP interface names"
        return smf_include.SMF_EXIT_ERR_FATAL

    ifnames = output.splitlines()
    # DHCP agent datalinks are always 15 characters in length. They start with
    # 'evs', end with '_0', and in between they are hexadecimal digits.
    prog = re.compile('evs[0-9A-Fa-f\_]{10}_0')
    for ifname in ifnames:
        if not prog.search(ifname):
            continue

        try:
            # first remove the IP
            check_call(["/usr/bin/pfexec", "/usr/sbin/ipadm", "delete-ip",
                        ifname])
            # next remove the VNIC
            check_call(["/usr/bin/pfexec", "/usr/sbin/dladm", "delete-vnic",
                        ifname])
        except CalledProcessError as err:
            print "failed to remove datalinks used by DHCP agent: %s" % err
            return smf_include.SMF_EXIT_ERR_FATAL
    return smf_include.SMF_EXIT_OK

if __name__ == "__main__":
    os.putenv("LC_ALL", "C")
    smf_include.smf_main()
