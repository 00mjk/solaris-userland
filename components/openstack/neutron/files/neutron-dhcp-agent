#!/usr/bin/python2.7

# Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import ConfigParser
import os
import re
import sys

from openstack_common import is_ml2_plugin
import smf_include

from subprocess import CalledProcessError, Popen, PIPE, check_call


def set_hostmodel(value):
    cmd = ["/usr/sbin/ipadm", "show-prop", "-p", "hostmodel",
           "-co", "current", "ipv4"]
    p = Popen(cmd, stdout=PIPE, stderr=PIPE)
    output, error = p.communicate()
    if p.returncode != 0:
        print "failed to retrieve hostmodel ipadm property"
        return False
    if output.strip() == value:
        return True
    cmd = ["/usr/bin/pfexec", "/usr/sbin/ipadm", "set-prop", "-t", "-p",
           "hostmodel=%s" % value, "ipv4"]
    p = Popen(cmd, stdout=PIPE, stderr=PIPE)
    output, error = p.communicate()
    if p.returncode != 0:
        print "failed to set ipadm hostmodel property to %s" % value
        return False
    return True


def start():
    # verify paths are valid
    for f in sys.argv[2:4]:
        if not os.path.exists(f) or not os.access(f, os.R_OK):
            print '%s does not exist or is not readable' % f
            return smf_include.SMF_EXIT_ERR_CONFIG

    # set the hostmodel property if necessary
    if not set_hostmodel("src-priority"):
        return smf_include.SMF_EXIT_ERR_FATAL

    cmd = "/usr/bin/pfexec /usr/lib/neutron/neutron-dhcp-agent " \
        "--config-file %s --config-file %s" % tuple(sys.argv[2:4])
    smf_include.smf_subprocess(cmd)


def get_ovs_bridge():
    parser = ConfigParser.ConfigParser()
    parser.read("/etc/neutron/plugins/openvswitch/ovs_neutron_plugin.ini")
    try:
        ovs_bridge = parser.get("ovs", "integration_bridge")
    except ConfigParser.NoOptionError:
        ovs_bridge = None
    return ovs_bridge


def stop():
    try:
        # first kill the SMF contract
        check_call(["/usr/bin/pkill", "-c", sys.argv[2]])
    except CalledProcessError as err:
        print "failed to kill the SMF contract: %s" % err
        return smf_include.SMF_EXIT_ERR_FATAL

    cmd = ["/usr/sbin/ipadm", "show-if", "-p", "-o", "ifname"]
    p = Popen(cmd, stdout=PIPE, stderr=PIPE)
    output, error = p.communicate()
    if p.returncode != 0:
        print "failed to retrieve IP interface names"
        return smf_include.SMF_EXIT_ERR_FATAL

    ifnames = output.splitlines()
    # DHCP agent datalinks are always 15 characters in length. They start with
    # 'dh', end with '_0', and in between they are hexadecimal digits.
    prog = re.compile('dh[0-9A-Fa-f\_]{11}_0')
    err_delete = False
    for ifname in ifnames:
        if prog.search(ifname) is None:
            continue
        try:
            # first remove the IP
            check_call(["/usr/bin/pfexec", "/usr/sbin/ipadm", "delete-ip",
                        ifname])
            # next remove the VNIC
            check_call(["/usr/bin/pfexec", "/usr/sbin/dladm", "delete-vnic",
                        ifname])
            # remove the OVS Port
            if is_ml2_plugin():
                check_call(["/usr/bin/pfexec", "/usr/sbin/ovs-vsctl", "--",
                            "--if-exists", "del-port", get_ovs_bridge(),
                            ifname])
        except CalledProcessError as err:
            print "failed to remove datalink '%s' used by DHCP agent: %s" % \
                (ifname, err)
            err_delete = True

    # finally reset the hostmodel property
    if not set_hostmodel("weak") or err_delete:
        return smf_include.SMF_EXIT_ERR_FATAL
    return smf_include.SMF_EXIT_OK

if __name__ == "__main__":
    os.putenv("LC_ALL", "C")
    smf_include.smf_main()
