In-house patch to adopt EMC driver to use Solaris' iscsiadm(1M) rather
than that from Linux.  Patch has not yet been submitted upstream.

--- cinder-2014.2.2/cinder/volume/drivers/emc/emc_vmax_iscsi.py.orig	2014-10-16 06:26:26.000000000 -0700
+++ cinder-2014.2.2/cinder/volume/drivers/emc/emc_vmax_iscsi.py	2014-10-27 00:12:22.034201865 -0700
@@ -16,6 +16,8 @@
 ISCSI Drivers for EMC VMAX arrays based on SMI-S.
 
 """
+import sys
+
 import six
 
 from cinder import context
@@ -155,17 +157,43 @@ class EMCVMAXISCSIDriver(driver.ISCSIDri
 
         LOG.info(_("ISCSI provider_location not stored, using discovery."))
 
-        (out, _err) = self._execute('iscsiadm', '-m', 'discovery',
-                                    '-t', 'sendtargets', '-p',
-                                    self.configuration.iscsi_ip_address,
-                                    run_as_root=True)
-
-        LOG.info(_(
-            "smis_do_iscsi_discovery is: %(out)s")
-            % {'out': out})
         targets = []
-        for target in out.splitlines():
-            targets.append(target)
+        if sys.platform == 'sunos5':
+            data = _("Unexpected response while retrieving discovery-address "
+                     "objects for volume '%s'") % volume["name"]
+
+            self._execute('/usr/sbin/iscsiadm', 'add', 'discovery-address',
+                          self.configuration.iscsi_ip_address)
+            (out, _err) = self._execute('/usr/sbin/iscsiadm', 'list',
+                                        'discovery-address', '-v',
+                                        self.configuration.iscsi_ip_address)
+            lines = out.splitlines()
+            if not lines[0].strip().startswith('Discovery Address: '):
+                raise exception.VolumeBackendAPIException(data=data)
+
+            for i in range(1, len(lines), 2):
+                name = lines[i].strip()
+                if not name.startswith('Target name: '):
+                    raise exception.VolumeBackendAPIException(data=data)
+                (_, _, name) = name.split()
+
+                address = lines[i + 1].strip()
+                if not address.startswith('Target address: '):
+                    raise exception.VolumeBackendAPIException(data=data)
+                (_, _, address, tpgt) = address.split()
+                target = address + tpgt + ' ' + name
+                targets.append(target)
+        else:
+            (out, _err) = self._execute('iscsiadm', '-m', 'discovery',
+                                        '-t', 'sendtargets', '-p',
+                                        self.configuration.iscsi_ip_address,
+                                        run_as_root=True)
+
+            LOG.info(_(
+                "smis_do_iscsi_discovery is: %(out)s")
+                % {'out': out})
+            for target in out.splitlines():
+                targets.append(target)
 
         return targets
 
