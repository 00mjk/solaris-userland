In-house patch to adapt Linux specific rootwrap setup to Solaris.
Remove check for Linux specific mount.nfs command.

Patch may be suitable for pushing upsteam.

--- cinder-a99d1658a55f818a7e136d48d44d893406eae3e1/cinder/volume/drivers/nfs.py.~9~	2016-02-18 02:41:52.000000000 -0800
+++ cinder-a99d1658a55f818a7e136d48d44d893406eae3e1/cinder/volume/drivers/nfs.py	2016-02-18 03:23:26.380963052 -0800
@@ -15,6 +15,7 @@
 
 import errno
 import os
+import platform
 import time
 
 from os_brick.remotefs import remotefs as remotefs_brick
@@ -78,7 +79,10 @@ class NfsDriver(driver.ExtendVD, remotef
         self._remotefsclient = None
         super(NfsDriver, self).__init__(*args, **kwargs)
         self.configuration.append_config_values(nfs_opts)
-        root_helper = utils.get_root_helper()
+        if platform.system() == "SunOS":
+            root_helper = None
+        else:
+            root_helper = utils.get_root_helper()
         # base bound to instance is used in RemoteFsConnector.
         self.base = getattr(self.configuration,
                             'nfs_mount_point_base',
@@ -123,19 +127,20 @@ class NfsDriver(driver.ExtendVD, remotef
 
         self.shares = {}  # address : options
 
-        # Check if mount.nfs is installed on this system; note that we
-        # need to be root, to also find mount.nfs on distributions, where
-        # it is not located in an unprivileged users PATH (e.g. /sbin).
-        package = 'mount.nfs'
-        try:
-            self._execute(package, check_exit_code=False,
-                          run_as_root=True)
-        except OSError as exc:
-            if exc.errno == errno.ENOENT:
-                msg = _('%s is not installed') % package
-                raise exception.NfsException(msg)
-            else:
-                raise
+        if platform.system() != "SunOS":
+            # Check if mount.nfs is installed on this system; note that we
+            # need to be root, to also find mount.nfs on distributions, where
+            # it is not located in an unprivileged users PATH (e.g. /sbin).
+            package = 'mount.nfs'
+            try:
+                self._execute(package, check_exit_code=False,
+                              run_as_root=True)
+            except OSError as exc:
+                if exc.errno == errno.ENOENT:
+                    msg = _('%s is not installed') % package
+                    raise exception.NfsException(msg)
+                else:
+                    raise
 
         # Now that all configuration data has been loaded (shares),
         # we can "set" our final NAS file security options.
