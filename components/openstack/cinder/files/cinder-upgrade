#!/usr/bin/python2.7

# Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import glob
import os
from subprocess import check_call, Popen, PIPE
import sys
import traceback

import iniparse
import smf_include
import sqlalchemy

from openstack_common import alter_mysql_tables, create_backups, modify_conf, \
    move_conf


CINDER_CONF_MAPPINGS = {
    # Deprecated group/name
    ('DEFAULT', 'rabbit_durable_queues'): ('DEFAULT', 'amqp_durable_queues'),
    ('rpc_notifier2', 'topics'): ('DEFAULT', 'notification_topics'),
    ('DEFAULT', 'osapi_compute_link_prefix'):
        ('DEFAULT', 'osapi_volume_base_URL'),
    ('DEFAULT', 'backup_service'): ('DEFAULT', 'backup_driver'),
    ('DEFAULT', 'pybasedir'): ('DEFAULT', 'state_path'),
    ('DEFAULT', 'log_config'): ('DEFAULT', 'log_config_append'),
    ('DEFAULT', 'logfile'): ('DEFAULT', 'log_file'),
    ('DEFAULT', 'logdir'): ('DEFAULT', 'log_dir'),
    ('DEFAULT', 'num_iscsi_scan_tries'):
        ('DEFAULT', 'num_volume_device_scan_tries'),
    ('DEFAULT', 'zfssa_host'): ('DEFAULT', 'san_ip'),
    ('DEFAULT', 'zfssa_auth_user'): ('DEFAULT', 'san_login'),
    ('DEFAULT', 'zfssa_auth_password'): ('DEFAULT', 'san_password'),
    ('DEFAULT', 'db_backend'): ('database', 'backend'),
    ('DEFAULT', 'sql_connection'): ('database', 'connection'),
    ('DATABASE', 'sql_connection'): ('database', 'connection'),
    ('sql', 'connection'): ('database', 'connection'),
    ('DEFAULT', 'sql_idle_timeout'): ('database', 'idle_timeout'),
    ('DATABASE', 'sql_idle_timeout'): ('database', 'idle_timeout'),
    ('sql', 'idle_timeout'): ('database', 'idle_timeout'),
    ('DEFAULT', 'sql_min_pool_size'): ('database', 'min_pool_size'),
    ('DATABASE', 'sql_min_pool_size'): ('database', 'min_pool_size'),
    ('DEFAULT', 'sql_max_pool_size'): ('database', 'max_pool_size'),
    ('DATABASE', 'sql_max_pool_size'): ('database', 'max_pool_size'),
    ('DEFAULT', 'sql_max_retries'): ('database', 'max_retries'),
    ('DATABASE', 'sql_max_retries'): ('database', 'max_retries'),
    ('DEFAULT', 'sql_retry_interval'): ('database', 'retry_interval'),
    ('DATABASE', 'reconnect_interval'): ('database', 'retry_interval'),
    ('DEFAULT', 'sql_max_overflow'): ('database', 'max_overflow'),
    ('DATABASE', 'sqlalchemy_max_overflow'): ('database', 'max_overflow'),
    ('DEFAULT', 'sql_connection_debug'): ('database', 'connection_debug'),
    ('DEFAULT', 'sql_connection_trace'): ('database', 'connection_trace'),
    ('DATABASE', 'sqlalchemy_pool_timeout'): ('database', 'pool_timeout'),
    ('DEFAULT', 'dbapi_use_tpool'): ('database', 'use_tpool'),
    ('DEFAULT', 'memcache_servers'):
        ('keystone_authtoken', 'memcached_servers'),
    ('DEFAULT', 'matchmaker_ringfile'): ('matchmaker_ring', 'ringfile'),
}

CINDER_CONF_EXCEPTIONS = [
    ('DEFAULT', 'osapi_volume_workers'),
    ('DEFAULT', 'auth_strategy'),
    ('DEFAULT', 'san_is_local'),
    ('DEFAULT', 'volume_driver'),
    ('database', 'connection'),
    ('keystone_authtoken', 'auth_uri'),
    ('keystone_authtoken', 'identity_uri'),
    ('keystone_authtoken', 'admin_user'),
    ('keystone_authtoken', 'admin_password'),
    ('keystone_authtoken', 'admin_tenant_name'),
    ('keystone_authtoken', 'signing_dir'),
]

CINDER_MOVE_CONFIG = {
    ('filter:authtoken', 'auth_uri'): ('keystone_authtoken', 'auth_uri'),
    ('filter:authtoken', 'identity_uri'):
        ('keystone_authtoken', 'identity_uri'),
    ('filter:authtoken', 'admin_tenant_name'):
        ('keystone_authtoken', 'admin_tenant_name'),
    ('filter:authtoken', 'admin_user'): ('keystone_authtoken', 'admin_user'),
    ('filter:authtoken', 'admin_password'):
        ('keystone_authtoken', 'admin_password'),
    ('filter:authtoken', 'signing_dir'): ('keystone_authtoken', 'signing_dir'),
}


def start():
    # pull out the current version of config/upgrade-id
    p = Popen(['/usr/bin/svcprop', '-p', 'config/upgrade-id',
               os.environ['SMF_FMRI']], stdout=PIPE, stderr=PIPE)
    curr_ver, _err = p.communicate()
    curr_ver = curr_ver.strip()

    # extract the openstack-upgrade-id from the pkg
    p = Popen(['/usr/bin/pkg', 'contents', '-H', '-t', 'set', '-o', 'value',
               '-a', 'name=openstack.upgrade-id',
               'pkg:/cloud/openstack/cinder'], stdout=PIPE, stderr=PIPE)
    pkg_ver, _err = p.communicate()
    pkg_ver = pkg_ver.strip()

    if curr_ver == pkg_ver:
        # No need to upgrade
        sys.exit(smf_include.SMF_EXIT_OK)

    # look for any .new files
    if glob.glob('/etc/cinder/*.new'):
        # the versions are different, so perform an upgrade
        # modify the configuration files

        # backup all the old configuration files
        create_backups('/etc/cinder')

        modify_conf('/etc/cinder/api-paste.ini')

        # before modifying cinder.conf, move the [filter:authtoken] entries
        # from the updated api-paste.ini to the old cinder.conf
        move_conf('/etc/cinder/api-paste.ini', '/etc/cinder/cinder.conf',
                  CINDER_MOVE_CONFIG)

        modify_conf('/etc/cinder/cinder.conf', CINDER_CONF_MAPPINGS,
                    CINDER_CONF_EXCEPTIONS)
        modify_conf('/etc/cinder/logging.conf')

    config = iniparse.RawConfigParser()
    config.read('/etc/cinder/cinder.conf')
    # In certain cases the database section does not exist and the
    # default database chosen is sqlite.
    if config.has_section('database'):
        db_connection = config.get('database', 'connection')

        if db_connection.startswith('mysql'):
            engine = sqlalchemy.create_engine(db_connection)
            if engine.url.username != '%SERVICE_USER%':
                alter_mysql_tables(engine)
                print "altered character set to utf8 in cinder tables"

    # update the current version
    check_call(['/usr/sbin/svccfg', '-s', os.environ['SMF_FMRI'], 'setprop',
               'config/upgrade-id', '=', pkg_ver])
    check_call(['/usr/sbin/svccfg', '-s', os.environ['SMF_FMRI'], 'refresh'])

    sys.exit(smf_include.SMF_EXIT_OK)


if __name__ == '__main__':
    os.putenv('LC_ALL', 'C')
    try:
        smf_include.smf_main()
    except RuntimeError:
        sys.exit(smf_include.SMF_EXIT_ERR_FATAL)
    except Exception as err:
        print 'Unknown error:  %s' % err
        print
        traceback.print_exc(file=sys.stdout)
        sys.exit(smf_include.SMF_EXIT_ERR_FATAL)
