#!/usr/bin/python2.7

# Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import glob
import os
from subprocess import check_call, Popen, PIPE
import sys
import traceback

import smf_include
import sqlalchemy

from openstack_common import alter_mysql_tables, create_backups, modify_conf

IRONIC_CONF_MAPPINGS = {
    # Deprecated group/name LIBERTY
    ('DEFAULT', 'rpc_thread_pool_size'):
        ('DEFAULT', 'executor_thread_pool_size'),
    ('DEFAULT', 'log_format'): (None, None),
    ('DEFAULT', 'use_syslog'): (None, None),
    ('agent', 'agent_pxe_append_params'): (None, None),
    ('agent', 'agent_erase_devices_priority'):
        ('deploy', 'erase_devices_priority'),
    ('agent', 'agent_pxe_config_template'): (None, None),
    ('agent', 'manage_tftp'): ('agent', 'manage_agent_boot'),
    # Deprecated group/name MITAKA
    ('profiler', 'profiler_enabled'): ('profiler', 'enabled'),
}

IRONIC_CONF_EXCEPTIONS = [
    ('DEFAULT', 'auth_strategy'),
    ('DEFAULT', 'enabled_drivers'),
    ('DEFAULT', 'pybasedir'),
    ('DEFAULT', 'bindir'),
    ('DEFAULT', 'state_path'),
    ('ai', 'server'),
    ('ai', 'username'),
    ('api', 'api_workers'),
    ('database', 'connection'),
    ('keystone_authtoken', 'admin_tenant_name'),
    ('keystone_authtoken', 'admin_user'),
    ('keystone_authtoken', 'admin_password'),
    ('keystone_authtoken', 'auth_host'),
    ('keystone_authtoken', 'auth_uri'),
    ('keystone_authtoken', 'identity_uri'),
    ('keystone_authtoken', 'signing_dir'),
    ('solaris_ipmi', 'imagecache_dirname'),
    ('solaris_ipmi', 'imagecache_lock_timeout'),
]


def start():
    # pull out the current version of config/upgrade-id
    p = Popen(['/usr/bin/svcprop', '-p', 'config/upgrade-id',
               os.environ['SMF_FMRI']], stdout=PIPE, stderr=PIPE)
    curr_ver, _err = p.communicate()
    curr_ver = curr_ver.strip()

    # extract the openstack-upgrade-id from the pkg
    p = Popen(['/usr/bin/pkg', 'contents', '-H', '-t', 'set', '-o', 'value',
               '-a', 'name=openstack.upgrade-id',
               'pkg:/cloud/openstack/ironic'], stdout=PIPE, stderr=PIPE)
    pkg_ver, _err = p.communicate()
    pkg_ver = pkg_ver.strip()

    if curr_ver == pkg_ver:
        # No need to upgrade
        sys.exit(smf_include.SMF_EXIT_OK)

    # look for any .new files
    if glob.glob('/etc/ironic/*.new'):
        # the versions are different, so perform an upgrade
        # modify the configuration files

        # backup all the old configuration files
        create_backups('/etc/ironic')

        modify_conf('/etc/ironic/ironic.conf', IRONIC_CONF_MAPPINGS,
                    IRONIC_CONF_EXCEPTIONS)

    # update the current version
    check_call(['/usr/sbin/svccfg', '-s', os.environ['SMF_FMRI'], 'setprop',
               'config/upgrade-id', '=', pkg_ver])
    check_call(['/usr/sbin/svccfg', '-s', os.environ['SMF_FMRI'], 'refresh'])

    sys.exit(smf_include.SMF_EXIT_OK)


if __name__ == '__main__':
    os.putenv('LC_ALL', 'C')
    try:
        smf_include.smf_main()
    except RuntimeError:
        sys.exit(smf_include.SMF_EXIT_ERR_FATAL)
    except Exception as err:
        print 'Unknown error:  %s' % err
        print
        traceback.print_exc(file=sys.stdout)
        sys.exit(smf_include.SMF_EXIT_ERR_FATAL)
