This patchset is for bug:

22725863 - Glance needs to support MySQL Cluster

This fixes the following aspects of Glance:
1. Implementation of an oslo.db configuration parameter to specify the MySQL
   storage engine (mysql_storage_engine).
2. Replacement of hardcoded SQL statements that set the engine to "InnoDB"
   to the above configuration value.
3. Logic to handle SQL differences between MySQL InnoDB and MySQL Cluster (NDB).
   This includes column lengths, constraints, foreign keys, and indexes.

This has not been committed upstream, but has been filed in launchpad:

https://bugs.launchpad.net/glance/+bug/1564110


--- glance-2015.1.2/glance/tests/unit/test_migrations.py.orig	2016-07-29 11:30:42.506075746 -0600
+++ glance-2015.1.2/glance/tests/unit/test_migrations.py	2016-07-28 18:16:26.555277376 -0600
@@ -127,7 +127,7 @@ class MigrationsMixin(test_migrations.Wa
                                                         sqlalchemy.Boolean(),
                                                         nullable=False,
                                                         default=False),
-                                      mysql_engine='InnoDB')
+                                      mysql_engine=CONF.database.mysql_storage_engine)
         images_001.create()
 
     def test_version_control_existing_db(self):
@@ -1650,10 +1650,10 @@ class TestMysqlMigrations(test_base.MySQ
         noninnodb = self.migrate_engine.execute(
             "SELECT count(*) "
             "FROM information_schema.TABLES "
-            "WHERE TABLE_SCHEMA='%s' "
-            "AND ENGINE!='InnoDB' "
+            "WHERE TABLE_SCHEMA='%(table_schema)s' "
+            "AND ENGINE!='%(mysql_storage_engine)s' "
             "AND TABLE_NAME!='migrate_version'"
-            % self.migrate_engine.url.database)
+            % dict(table_schema=self.migrate_engine.url.database, mysql_storage_engine=CONF.database.mysql_storage_engine))
         count = noninnodb.scalar()
         self.assertEqual(count, 0, "%d non InnoDB tables created" % count)
 
--- glance-2015.1.2/glance/db/sqlalchemy/models_metadef.py.orig	2016-07-29 11:30:50.672701806 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/models_metadef.py	2016-07-29 11:37:23.040809599 -0600
@@ -16,6 +16,7 @@
 SQLAlchemy models for glance metadata schema
 """
 
+from oslo_config import cfg
 from oslo_db.sqlalchemy import models
 from oslo_utils import timeutils
 from sqlalchemy import Boolean
@@ -31,6 +32,7 @@ from sqlalchemy import Text
 
 from glance.db.sqlalchemy.models import JSONEncodedDict
 
+CONF = cfg.CONF
 
 class DictionaryBase(models.ModelBase):
     metadata = None
@@ -48,7 +50,7 @@ BASE_DICT = declarative_base(cls=Diction
 class GlanceMetadefBase(models.TimestampMixin):
     """Base class for Glance Metadef Models."""
 
-    __table_args__ = {'mysql_engine': 'InnoDB'}
+    __table_args__ = {'mysql_engine': CONF.database.mysql_storage_engine}
     __table_initialized__ = False
     __protected_attributes__ = set(["created_at", "updated_at"])
 
--- glance-2015.1.2/glance/db/sqlalchemy/models_artifacts.py.orig	2016-07-29 11:30:58.519236555 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/models_artifacts.py	2016-07-28 18:16:26.556002509 -0600
@@ -14,6 +14,8 @@
 
 import uuid
 
+from oslo_config import cfg
+from oslo_db import options as db_options
 from oslo_db.sqlalchemy import models
 from oslo_utils import timeutils
 from sqlalchemy import BigInteger
@@ -36,6 +38,9 @@ from glance.common import semver_db
 from glance import i18n
 from oslo_log import log as os_logging
 
+CONF = cfg.CONF
+db_options.set_defaults(CONF)
+
 BASE = declarative.declarative_base()
 LOG = os_logging.getLogger(__name__)
 _LW = i18n._LW
@@ -44,7 +49,7 @@ _LW = i18n._LW
 class ArtifactBase(models.ModelBase, models.TimestampMixin):
     """Base class for Artifact Models."""
 
-    __table_args__ = {'mysql_engine': 'InnoDB'}
+    __table_args__ = {'mysql_engine': CONF.database.mysql_storage_engine}
     __table_initialized__ = False
     __protected_attributes__ = set([
         "created_at", "updated_at"])
@@ -102,7 +107,7 @@ class Artifact(BASE, ArtifactBase):
         Index('ix_artifact_state', 'state'),
         Index('ix_artifact_owner', 'owner'),
         Index('ix_artifact_visibility', 'visibility'),
-        {'mysql_engine': 'InnoDB'})
+        {'mysql_engine': CONF.database.mysql_storage_engine})
 
     __protected_attributes__ = ArtifactBase.__protected_attributes__.union(
         set(['published_at', 'deleted_at']))
@@ -219,7 +224,7 @@ class ArtifactDependency(BASE, ArtifactB
                             'artifact_dest'),
                       Index('ix_artifact_dependencies_direct_dependencies',
                             'artifact_source', 'is_direct'),
-                      {'mysql_engine': 'InnoDB'})
+                      {'mysql_engine': CONF.database.mysql_storage_engine})
 
     id = Column(String(36), primary_key=True, nullable=False,
                 default=lambda: str(uuid.uuid4()))
@@ -248,7 +253,7 @@ class ArtifactTag(BASE, ArtifactBase):
     __table_args__ = (Index('ix_artifact_tags_artifact_id', 'artifact_id'),
                       Index('ix_artifact_tags_artifact_id_tag_value',
                             'artifact_id', 'value'),
-                      {'mysql_engine': 'InnoDB'},)
+                      {'mysql_engine': CONF.database.mysql_storage_engine},)
 
     id = Column(String(36), primary_key=True, nullable=False,
                 default=lambda: str(uuid.uuid4()))
@@ -265,7 +270,7 @@ class ArtifactProperty(BASE, ArtifactBas
     __table_args__ = (
         Index('ix_artifact_properties_artifact_id', 'artifact_id'),
         Index('ix_artifact_properties_name', 'name'),
-        {'mysql_engine': 'InnoDB'},)
+        {'mysql_engine': CONF.database.mysql_storage_engine},)
     id = Column(String(36), primary_key=True, nullable=False,
                 default=lambda: str(uuid.uuid4()))
     artifact_id = Column(String(36), ForeignKey('artifacts.id'),
@@ -287,7 +292,7 @@ class ArtifactBlob(BASE, ArtifactBase):
     __table_args__ = (
         Index('ix_artifact_blobs_artifact_id', 'artifact_id'),
         Index('ix_artifact_blobs_name', 'name'),
-        {'mysql_engine': 'InnoDB'},)
+        {'mysql_engine': CONF.database.mysql_storage_engine},)
     id = Column(String(36), primary_key=True, nullable=False,
                 default=lambda: str(uuid.uuid4()))
     artifact_id = Column(String(36), ForeignKey('artifacts.id'),
@@ -306,7 +311,7 @@ class ArtifactBlobLocation(BASE, Artifac
     __tablename__ = 'artifact_blob_locations'
     __table_args__ = (Index('ix_artifact_blob_locations_blob_id',
                             'blob_id'),
-                      {'mysql_engine': 'InnoDB'})
+                      {'mysql_engine': CONF.database.mysql_storage_engine})
 
     id = Column(String(36), primary_key=True, nullable=False,
                 default=lambda: str(uuid.uuid4()))
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/007_add_owner.py.orig	2016-07-29 11:31:06.067376033 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/007_add_owner.py	2016-07-29 11:38:21.570131052 -0600
@@ -14,12 +14,14 @@
 #    under the License.
 
 from migrate.changeset import *  # noqa
+from oslo_config import cfg
 from sqlalchemy import *  # noqa
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     Boolean, DateTime, BigInteger, Integer, String,
     Text, from_migration_import)  # noqa
 
+CONF = cfg.CONF
 
 def get_images_table(meta):
     """
@@ -50,7 +52,7 @@ def get_images_table(meta):
                           index=True),
                    Column('checksum', String(32)),
                    Column('owner', String(255)),
-                   mysql_engine='InnoDB',
+                   mysql_engine=CONF.database.mysql_storage_engine,
                    extend_existing=True)
 
     return images
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/003_add_disk_format.py.orig	2016-07-29 11:31:13.058662840 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/003_add_disk_format.py	2016-07-29 11:38:43.705439106 -0600
@@ -14,11 +14,13 @@
 #    under the License.
 
 from migrate.changeset import *  # noqa
+from oslo_config import cfg
 from sqlalchemy import *  # noqa
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     Boolean, DateTime, Integer, String, Text, from_migration_import)  # noqa
 
+CONF = cfg.CONF
 
 def get_images_table(meta):
     """
@@ -47,7 +49,7 @@ def get_images_table(meta):
                           nullable=False,
                           default=False,
                           index=True),
-                   mysql_engine='InnoDB',
+                   mysql_engine=CONF.database.mysql_storage_engine,
                    extend_existing=True)
 
     return images
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/005_size_big_integer.py.orig	2016-07-29 11:31:20.152951372 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/005_size_big_integer.py	2016-07-29 11:39:04.202176317 -0600
@@ -14,12 +14,14 @@
 #    under the License.
 
 from migrate.changeset import *  # noqa
+from oslo_config import cfg
 from sqlalchemy import *  # noqa
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     Boolean, DateTime, BigInteger, Integer, String,
     Text, from_migration_import)  # noqa
 
+CONF = cfg.CONF
 
 def get_images_table(meta):
     """
@@ -48,7 +50,7 @@ def get_images_table(meta):
                           nullable=False,
                           default=False,
                           index=True),
-                   mysql_engine='InnoDB',
+                   mysql_engine=CONF.database.mysql_storage_engine,
                    extend_existing=True)
 
     return images
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/022_image_member_index.py.orig	2016-07-29 11:31:30.015287184 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/022_image_member_index.py	2016-07-29 11:39:26.850998479 -0600
@@ -16,11 +16,13 @@
 import re
 
 from migrate.changeset import UniqueConstraint
+from oslo_config import cfg
 from oslo_db import exception as db_exception
 from sqlalchemy import and_, func, orm
 from sqlalchemy import MetaData, Table
 from sqlalchemy.exc import OperationalError, ProgrammingError
 
+CONF = cfg.CONF
 
 NEW_KEYNAME = 'image_members_image_id_member_deleted_at_key'
 ORIGINAL_KEYNAME_RE = re.compile('image_members_image_id.*_key')
@@ -28,21 +30,24 @@ ORIGINAL_KEYNAME_RE = re.compile('image_
 
 def upgrade(migrate_engine):
     image_members = _get_image_members_table(migrate_engine)
-
-    if migrate_engine.name in ('mysql', 'postgresql'):
-        try:
-            UniqueConstraint('image_id',
-                             name=_get_original_keyname(migrate_engine.name),
-                             table=image_members).drop()
-        except (OperationalError, ProgrammingError, db_exception.DBError):
-            UniqueConstraint('image_id',
-                             name=_infer_original_keyname(image_members),
-                             table=image_members).drop()
-        UniqueConstraint('image_id',
-                         'member',
-                         'deleted_at',
-                         name=NEW_KEYNAME,
-                         table=image_members).create()
+    # MySQL Cluster, a.k.a. NDB does not support the original constraint and index.
+    # Only if we are not using MySQL Cluster, will the index be dropped.
+    if CONF.database.mysql_storage_engine != "NDBCLUSTER":
+        if migrate_engine.name in ('mysql', 'postgresql'):
+            try:
+                UniqueConstraint('image_id',
+                                 name=_get_original_keyname(migrate_engine.name),
+                                 table=image_members).drop()
+            except (OperationalError, ProgrammingError, db_exception.DBError):
+                UniqueConstraint('image_id',
+                                 name=_infer_original_keyname(image_members),
+                                 table=image_members).drop()
+        
+    UniqueConstraint('image_id',
+                     'member',
+                     'deleted_at',
+                     name=NEW_KEYNAME,
+                     table=image_members).create()
 
 
 def downgrade(migrate_engine):
@@ -53,10 +58,13 @@ def downgrade(migrate_engine):
         UniqueConstraint('image_id',
                          name=NEW_KEYNAME,
                          table=image_members).drop()
-        UniqueConstraint('image_id',
-                         'member',
-                         name=_get_original_keyname(migrate_engine.name),
-                         table=image_members).create()
+        # MySQL Cluster, a.k.a. NDB does not support the original constraint and index.
+        # Only if we are not using MySQL Cluster, will the index be created.
+        if CONF.database.mysql_storage_engine != "NDBCLUSTER":
+            UniqueConstraint('image_id',
+                             'member',
+                             name=_get_original_keyname(migrate_engine.name),
+                             table=image_members).create()
 
 
 def _get_image_members_table(migrate_engine):
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/040_add_changes_to_satisfy_metadefs_tags.py.orig	2016-07-29 11:31:37.098719056 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/040_add_changes_to_satisfy_metadefs_tags.py	2016-07-29 11:40:01.035865900 -0600
@@ -10,15 +10,18 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
-
+from oslo_config import cfg
 import sqlalchemy
 from sqlalchemy import (Table, Index)
 
+CONF = cfg.CONF
 
 def upgrade(migrate_engine):
     if migrate_engine.name == 'mysql':
         meta = sqlalchemy.MetaData()
         meta.bind = migrate_engine
         metadef_tags = Table('metadef_tags', meta, autoload=True)
-        Index('namespace_id', metadef_tags.c.namespace_id,
-              metadef_tags.c.name).drop()
+        # MySQL Cluster, a.k.a NDB, does not support this index drop.
+        if CONF.database.mysql_storage_engine != "NDBCLUSTER":
+            Index('namespace_id', metadef_tags.c.namespace_id,
+                  metadef_tags.c.name).drop()
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/001_add_images_table.py.orig	2016-07-29 11:31:43.878178070 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/001_add_images_table.py	2016-07-29 11:40:32.274838992 -0600
@@ -13,11 +13,13 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from oslo_config import cfg
 from sqlalchemy.schema import (Column, MetaData, Table)
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     Boolean, DateTime, Integer, String, Text, create_tables, drop_tables)  # noqa
 
+CONF = cfg.CONF
 
 def define_images_table(meta):
     images = Table('images',
@@ -41,7 +43,7 @@ def define_images_table(meta):
                           nullable=False,
                           default=False,
                           index=True),
-                   mysql_engine='InnoDB',
+                   mysql_engine=CONF.database.mysql_storage_engine,
                    extend_existing=True)
 
     return images
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/014_add_image_tags_table.py.orig	2016-07-29 11:31:50.742219079 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/014_add_image_tags_table.py	2016-07-29 11:40:52.393996743 -0600
@@ -13,10 +13,12 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from oslo_config import cfg
 from sqlalchemy import schema
 
 from glance.db.sqlalchemy.migrate_repo import schema as glance_schema
 
+CONF = cfg.CONF
 
 def define_image_tags_table(meta):
     # Load the images table so the foreign key can be set up properly
@@ -46,7 +48,7 @@ def define_image_tags_table(meta):
                                             glance_schema.Boolean(),
                                             nullable=False,
                                             default=False),
-                              mysql_engine='InnoDB')
+                              mysql_engine=CONF.database.mysql_storage_engine)
 
     schema.Index('ix_image_tags_image_id',
                  image_tags.c.image_id)
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/038_add_metadef_tags_table.py.orig	2016-07-29 11:31:57.299857482 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/038_add_metadef_tags_table.py	2016-07-29 11:41:20.227494209 -0600
@@ -12,28 +12,46 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from oslo_config import cfg
 from sqlalchemy.schema import (
     Column, Index, MetaData, Table, UniqueConstraint)  # noqa
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     DateTime, Integer, String, create_tables, drop_tables)  # noqa
 
+CONF = cfg.CONF
 
 def define_metadef_tags_table(meta):
     _constr_kwargs = {}
-    metadef_tags = Table('metadef_tags',
-                         meta,
-                         Column('id', Integer(), primary_key=True,
-                                nullable=False),
-                         Column('namespace_id', Integer(),
-                                nullable=False),
-                         Column('name', String(80), nullable=False),
-                         Column('created_at', DateTime(), nullable=False),
-                         Column('updated_at', DateTime()),
-                         UniqueConstraint('namespace_id', 'name',
-                                          **_constr_kwargs),
-                         mysql_engine='InnoDB',
-                         extend_existing=False)
+    
+    # MySQL Cluster, a.k.a. NDB, does not support this constraint.
+    # If MySQL Cluster is enabled, the constraint will not be configured.
+    if CONF.database.mysql_storage_engine == "NDBCLUSTER":
+        metadef_tags = Table('metadef_tags',
+                             meta,
+                             Column('id', Integer(), primary_key=True,
+                                    nullable=False),
+                             Column('namespace_id', Integer(),
+                                    nullable=False),
+                             Column('name', String(80), nullable=False),
+                             Column('created_at', DateTime(), nullable=False),
+                             Column('updated_at', DateTime()),
+                             mysql_engine=CONF.database.mysql_storage_engine,
+                             extend_existing=False)
+    else:
+        metadef_tags = Table('metadef_tags',
+                             meta,
+                             Column('id', Integer(), primary_key=True,
+                                    nullable=False),
+                             Column('namespace_id', Integer(),
+                                    nullable=False),
+                             Column('name', String(80), nullable=False),
+                             Column('created_at', DateTime(), nullable=False),
+                             Column('updated_at', DateTime()),
+                             UniqueConstraint('namespace_id', 'name',
+                                              **_constr_kwargs),
+                             mysql_engine=CONF.database.mysql_storage_engine,
+                             extend_existing=False)
 
     if meta.bind.name != 'ibm_db_sa':
         Index('ix_tags_namespace_id_name',
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/006_key_to_name.py.orig	2016-07-29 11:32:03.190044222 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/006_key_to_name.py	2016-07-29 11:41:49.183401048 -0600
@@ -14,11 +14,13 @@
 #    under the License.
 
 from migrate.changeset import *  # noqa
+from oslo_config import cfg
 from sqlalchemy import *  # noqa
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     Boolean, DateTime, Integer, String, Text, from_migration_import)  # noqa
 
+CONF = cfg.CONF
 
 def get_images_table(meta):
     """
@@ -63,7 +65,7 @@ def get_image_properties_table(meta):
                                     default=False,
                                     index=True),
                              UniqueConstraint('image_id', 'name'),
-                             mysql_engine='InnoDB',
+                             mysql_engine=CONF.database.mysql_storage_engine,
                              extend_existing=True)
 
     return image_properties
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/030_add_tasks_table.py.orig	2016-07-29 11:32:09.114402435 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/030_add_tasks_table.py	2016-07-29 11:42:12.979551894 -0600
@@ -14,11 +14,13 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from oslo_config import cfg
 from sqlalchemy.schema import (Column, MetaData, Table, Index)
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     Boolean, DateTime, String, Text, create_tables, drop_tables)  # noqa
 
+CONF = cfg.CONF
 
 def define_tasks_table(meta):
     tasks = Table('tasks',
@@ -38,7 +40,7 @@ def define_tasks_table(meta):
                          Boolean(),
                          nullable=False,
                          default=False),
-                  mysql_engine='InnoDB',
+                  mysql_engine=CONF.database.mysql_storage_engine,
                   extend_existing=True)
 
     Index('ix_tasks_type', tasks.c.type)
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/039_add_changes_to_satisfy_models_metadef.py.orig	2016-07-29 11:32:16.102449889 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/039_add_changes_to_satisfy_models_metadef.py	2016-07-29 11:42:34.666058988 -0600
@@ -11,11 +11,13 @@
 #    under the License.
 
 import migrate
+from oslo_config import cfg
 import sqlalchemy
 from sqlalchemy import inspect
 from sqlalchemy import (Table, Index, UniqueConstraint)
 from sqlalchemy.schema import (AddConstraint, DropConstraint)
 
+CONF = cfg.CONF
 
 def upgrade(migrate_engine):
     meta = sqlalchemy.MetaData()
@@ -36,10 +38,17 @@ def upgrade(migrate_engine):
     Index('ix_objects_namespace_id_name', metadef_objects.c.namespace_id,
           metadef_objects.c.name).drop()
 
+    fkc = migrate.ForeignKeyConstraint([metadef_properties.c.namespace_id],
+                                       [metadef_namespaces.c.id],
+                                       name='metadef_properties_ibfk_1')
+    fkc.drop()
+
     Index('ix_metadef_properties_namespace_id_name',
           metadef_properties.c.namespace_id,
           metadef_properties.c.name).drop()
 
+    fkc.create()
+
     fkc = migrate.ForeignKeyConstraint([metadef_tags.c.namespace_id],
                                        [metadef_namespaces.c.id])
     fkc.create()
@@ -57,9 +66,16 @@ def upgrade(migrate_engine):
                                       metadef_tags.c.name)
         uc.create()
 
+    fkc = migrate.ForeignKeyConstraint([metadef_tags.c.namespace_id],
+                                       [metadef_namespaces.c.id],
+                                       name='metadef_tags_namespace_id_fkey')
+    fkc.drop()
+
     Index('ix_tags_namespace_id_name', metadef_tags.c.namespace_id,
           metadef_tags.c.name).drop()
 
+    fkc.create()
+
     Index('ix_metadef_tags_name', metadef_tags.c.name).create()
 
     Index('ix_metadef_tags_namespace_id', metadef_tags.c.namespace_id,
@@ -190,7 +206,6 @@ def downgrade(migrate_engine):
         fkc = migrate.ForeignKeyConstraint([metadef_tags.c.namespace_id],
                                            [metadef_namespaces.c.id])
         fkc.drop()
-
         Index('ix_tags_namespace_id_name', metadef_tags.c.namespace_id,
               metadef_tags.c.name).create()
     else:
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/008_add_image_members_table.py.orig	2016-07-29 11:32:22.100185363 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/008_add_image_members_table.py	2016-07-29 11:42:54.820310263 -0600
@@ -14,12 +14,14 @@
 #    under the License.
 
 from migrate.changeset import *  # noqa
+from oslo_config import cfg
 from sqlalchemy import *  # noqa
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     Boolean, DateTime, Integer, String, create_tables,
     drop_tables, from_migration_import)  # noqa
 
+CONF = cfg.CONF
 
 def get_images_table(meta):
     """
@@ -45,40 +47,71 @@ def get_image_properties_table(meta):
 
 def get_image_members_table(meta):
     images = get_images_table(meta)  # noqa
-
-    image_members = Table('image_members',
-                          meta,
-                          Column('id',
-                                 Integer(),
-                                 primary_key=True,
-                                 nullable=False),
-                          Column('image_id',
-                                 Integer(),
-                                 ForeignKey('images.id'),
-                                 nullable=False,
-                                 index=True),
-                          Column('member', String(255), nullable=False),
-                          Column('can_share',
-                                 Boolean(),
-                                 nullable=False,
-                                 default=False),
-                          Column('created_at', DateTime(), nullable=False),
-                          Column('updated_at', DateTime()),
-                          Column('deleted_at', DateTime()),
-                          Column('deleted',
-                                 Boolean(),
-                                 nullable=False,
-                                 default=False,
-                                 index=True),
-                          UniqueConstraint('image_id', 'member'),
-                          mysql_engine='InnoDB',
-                          extend_existing=True)
+    
+    # MySQL Cluster, a.k.a. NDB, does not support this constraint and index.
+    # If MySQl Cluster is being used, the constraint and index will not be created.
+    if CONF.database.mysql_storage_engine == "NDBCLUSTER":
+        image_members = Table('image_members',
+                              meta,
+                              Column('id',
+                                     Integer(),
+                                     primary_key=True,
+                                     nullable=False),
+                              Column('image_id',
+                                     Integer(),
+                                     ForeignKey('images.id'),
+                                     nullable=False,
+                                     index=True),
+                              Column('member', String(255), nullable=False),
+                              Column('can_share',
+                                     Boolean(),
+                                     nullable=False,
+                                     default=False),
+                              Column('created_at', DateTime(), nullable=False),
+                              Column('updated_at', DateTime()),
+                              Column('deleted_at', DateTime()),
+                              Column('deleted',
+                                     Boolean(),
+                                     nullable=False,
+                                     default=False,
+                                     index=True),
+                              mysql_engine=CONF.database.mysql_storage_engine,
+                              extend_existing=True)
+    else:
+        image_members = Table('image_members',
+                              meta,
+                              Column('id',
+                                     Integer(),
+                                     primary_key=True,
+                                     nullable=False),
+                              Column('image_id',
+                                     Integer(),
+                                     ForeignKey('images.id'),
+                                     nullable=False,
+                                     index=True),
+                              Column('member', String(255), nullable=False),
+                              Column('can_share',
+                                     Boolean(),
+                                     nullable=False,
+                                     default=False),
+                              Column('created_at', DateTime(), nullable=False),
+                              Column('updated_at', DateTime()),
+                              Column('deleted_at', DateTime()),
+                              Column('deleted',
+                                     Boolean(),
+                                     nullable=False,
+                                     default=False,
+                                     index=True),
+                              UniqueConstraint('image_id', 'member'),
+                              mysql_engine=CONF.database.mysql_storage_engine,
+                              extend_existing=True)
 
     # DB2: an index has already been created for the UniqueConstraint option
     # specified on the Table() statement above.
-    if meta.bind.name != "ibm_db_sa":
-        Index('ix_image_members_image_id_member', image_members.c.image_id,
-              image_members.c.member)
+    if CONF.database.mysql_storage_engine != "NDBCLUSTER":
+        if meta.bind.name != "ibm_db_sa":
+            Index('ix_image_members_image_id_member', image_members.c.image_id,
+                  image_members.c.member)
 
     return image_members
 
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/002_add_image_properties_table.py.orig	2016-07-29 11:32:28.641283394 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/002_add_image_properties_table.py	2016-07-29 11:43:17.467512143 -0600
@@ -13,6 +13,7 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from oslo_config import cfg
 from sqlalchemy.schema import (
     Column, ForeignKey, Index, MetaData, Table, UniqueConstraint)
 
@@ -20,6 +21,7 @@ from glance.db.sqlalchemy.migrate_repo.s
     Boolean, DateTime, Integer, String, Text, create_tables, drop_tables,
     from_migration_import)  # noqa
 
+CONF = cfg.CONF
 
 def define_image_properties_table(meta):
     (define_images_table,) = from_migration_import(
@@ -36,31 +38,58 @@ def define_image_properties_table(meta):
     if meta.bind.name == 'ibm_db_sa':
         constr_kwargs['name'] = 'ix_image_properties_image_id_key'
 
-    image_properties = Table('image_properties',
-                             meta,
-                             Column('id',
-                                    Integer(),
-                                    primary_key=True,
-                                    nullable=False),
-                             Column('image_id',
-                                    Integer(),
-                                    ForeignKey('images.id'),
-                                    nullable=False,
-                                    index=True),
-                             Column('key', String(255), nullable=False),
-                             Column('value', Text()),
-                             Column('created_at', DateTime(), nullable=False),
-                             Column('updated_at', DateTime()),
-                             Column('deleted_at', DateTime()),
-                             Column('deleted',
-                                    Boolean(),
-                                    nullable=False,
-                                    default=False,
-                                    index=True),
-                             UniqueConstraint('image_id', 'key',
-                                              **constr_kwargs),
-                             mysql_engine='InnoDB',
-                             extend_existing=True)
+    # MySQL Cluster, a.k.a. NDB, does not support the constraint here. 
+    # This will remove the constraint if MySQL Cluster is being used.
+    if CONF.database.mysql_storage_engine == "NDBCLUSTER":
+        image_properties = Table('image_properties',
+                                 meta,
+                                 Column('id',
+                                        Integer(),
+                                        primary_key=True,
+                                        nullable=False),
+                                 Column('image_id',
+                                        Integer(),
+                                        ForeignKey('images.id'),
+                                        nullable=False,
+                                        index=True),
+                                 Column('key', String(255), nullable=False),
+                                 Column('value', Text()),
+                                 Column('created_at', DateTime(), nullable=False),
+                                 Column('updated_at', DateTime()),
+                                 Column('deleted_at', DateTime()),
+                                 Column('deleted',
+                                        Boolean(),
+                                        nullable=False,
+                                        default=False,
+                                        index=True),
+                                 mysql_engine=CONF.database.mysql_storage_engine,
+                                 extend_existing=True)
+    else:
+        image_properties = Table('image_properties',
+                                 meta,
+                                 Column('id',
+                                        Integer(),
+                                        primary_key=True,
+                                        nullable=False),
+                                 Column('image_id',
+                                        Integer(),
+                                        ForeignKey('images.id'),
+                                        nullable=False,
+                                        index=True),
+                                 Column('key', String(255), nullable=False),
+                                 Column('value', Text()),
+                                 Column('created_at', DateTime(), nullable=False),
+                                 Column('updated_at', DateTime()),
+                                 Column('deleted_at', DateTime()),
+                                 Column('deleted',
+                                        Boolean(),
+                                        nullable=False,
+                                        default=False,
+                                        index=True),
+                                 UniqueConstraint('image_id', 'key',
+                                                  **constr_kwargs),
+                                 mysql_engine=CONF.database.mysql_storage_engine,
+                                 extend_existing=True)
 
     if meta.bind.name != 'ibm_db_sa':
         Index('ix_image_properties_image_id_key',
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/035_add_metadef_tables.py.orig	2016-07-29 11:32:34.891435682 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/035_add_metadef_tables.py	2016-07-29 11:43:39.940493840 -0600
@@ -12,6 +12,7 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from oslo_config import cfg
 from oslo_utils import timeutils
 import sqlalchemy
 from sqlalchemy.schema import (
@@ -21,6 +22,7 @@ from glance.db.sqlalchemy.migrate_repo.s
     Boolean, DateTime, Integer, String, Text, create_tables,
     drop_tables)  # noqa
 
+CONF = cfg.CONF
 
 RESOURCE_TYPES = [u'OS::Glance::Image', u'OS::Cinder::Volume',
                   u'OS::Nova::Flavor', u'OS::Nova::Aggregate',
@@ -65,7 +67,7 @@ def define_metadef_namespaces_table(meta
                        Column('created_at', DateTime(), nullable=False),
                        Column('updated_at', DateTime()),
                        UniqueConstraint('namespace', **_constr_kwargs),
-                       mysql_engine='InnoDB',
+                       mysql_engine=CONF.database.mysql_storage_engine,
                        extend_existing=True)
 
     if meta.bind.name != 'ibm_db_sa':
@@ -80,22 +82,41 @@ def define_metadef_objects_table(meta):
     if meta.bind.name == 'ibm_db_sa':
         _constr_kwargs['name'] = 'ix_objects_namespace_id_name'
 
-    objects = Table('metadef_objects',
-                    meta,
-                    Column('id', Integer(), primary_key=True, nullable=False),
-                    Column('namespace_id', Integer(),
-                           ForeignKey('metadef_namespaces.id'),
-                           nullable=False),
-                    Column('name', String(80), nullable=False),
-                    Column('description', Text()),
-                    Column('required', Text()),
-                    Column('schema', Text(), nullable=False),
-                    Column('created_at', DateTime(), nullable=False),
-                    Column('updated_at', DateTime()),
-                    UniqueConstraint('namespace_id', 'name',
-                                     **_constr_kwargs),
-                    mysql_engine='InnoDB',
-                    extend_existing=True)
+    # MySQL Cluster, a.k.a. NDB, requires explicit foreign key names
+    if CONF.database.mysql_storage_engine == "NDBCLUSTER":
+        objects = Table('metadef_objects',
+                        meta,
+                        Column('id', Integer(), primary_key=True, nullable=False),
+                        Column('namespace_id', Integer(),
+                               ForeignKey('metadef_namespaces.id', name='metadef_objects_ibfk_1'),
+                               nullable=False),
+                        Column('name', String(80), nullable=False),
+                        Column('description', Text()),
+                        Column('required', Text()),
+                        Column('schema', Text(), nullable=False),
+                        Column('created_at', DateTime(), nullable=False),
+                        Column('updated_at', DateTime()),
+                        UniqueConstraint('namespace_id', 'name',
+                                         **_constr_kwargs),
+                        mysql_engine=CONF.database.mysql_storage_engine,
+                        extend_existing=True)
+    else:
+        objects = Table('metadef_objects',
+                        meta,
+                        Column('id', Integer(), primary_key=True, nullable=False),
+                        Column('namespace_id', Integer(),
+                               ForeignKey('metadef_namespaces.id'),
+                               nullable=False),
+                        Column('name', String(80), nullable=False),
+                        Column('description', Text()),
+                        Column('required', Text()),
+                        Column('schema', Text(), nullable=False),
+                        Column('created_at', DateTime(), nullable=False),
+                        Column('updated_at', DateTime()),
+                        UniqueConstraint('namespace_id', 'name',
+                                         **_constr_kwargs),
+                        mysql_engine=CONF.database.mysql_storage_engine,
+                        extend_existing=True)
 
     if meta.bind.name != 'ibm_db_sa':
         Index('ix_objects_namespace_id_name',
@@ -111,19 +132,35 @@ def define_metadef_properties_table(meta
     if meta.bind.name == 'ibm_db_sa':
         _constr_kwargs['name'] = 'ix_metadef_properties_namespace_id_name'
 
-    metadef_properties = Table(
-        'metadef_properties',
-        meta,
-        Column('id', Integer(), primary_key=True, nullable=False),
-        Column('namespace_id', Integer(), ForeignKey('metadef_namespaces.id'),
-               nullable=False),
-        Column('name', String(80), nullable=False),
-        Column('schema', Text(), nullable=False),
-        Column('created_at', DateTime(), nullable=False),
-        Column('updated_at', DateTime()),
-        UniqueConstraint('namespace_id', 'name', **_constr_kwargs),
-        mysql_engine='InnoDB',
-        extend_existing=True)
+    # MySQL Cluster, a.k.a. NDB, requires explicit foreign key names
+    if CONF.database.mysql_storage_engine == "NDBCLUSTER":
+        metadef_properties = Table(
+            'metadef_properties',
+            meta,
+            Column('id', Integer(), primary_key=True, nullable=False),
+            Column('namespace_id', Integer(), ForeignKey('metadef_namespaces.id', name='metadef_properties_ibfk_1'),
+                   nullable=False),
+            Column('name', String(80), nullable=False),
+            Column('schema', Text(), nullable=False),
+            Column('created_at', DateTime(), nullable=False),
+            Column('updated_at', DateTime()),
+            UniqueConstraint('namespace_id', 'name', **_constr_kwargs),
+            mysql_engine=CONF.database.mysql_storage_engine,
+            extend_existing=True)
+    else:
+        metadef_properties = Table(
+            'metadef_properties',
+            meta,
+            Column('id', Integer(), primary_key=True, nullable=False),
+            Column('namespace_id', Integer(), ForeignKey('metadef_namespaces.id'),
+                   nullable=False),
+            Column('name', String(80), nullable=False),
+            Column('schema', Text(), nullable=False),
+            Column('created_at', DateTime(), nullable=False),
+            Column('updated_at', DateTime()),
+            UniqueConstraint('namespace_id', 'name', **_constr_kwargs),
+            mysql_engine=CONF.database.mysql_storage_engine,
+            extend_existing=True)
 
     if meta.bind.name != 'ibm_db_sa':
         Index('ix_metadef_properties_namespace_id_name',
@@ -148,7 +185,7 @@ def define_metadef_resource_types_table(
         Column('created_at', DateTime(), nullable=False),
         Column('updated_at', DateTime()),
         UniqueConstraint('name', **_constr_kwargs),
-        mysql_engine='InnoDB',
+        mysql_engine=CONF.database.mysql_storage_engine,
         extend_existing=True)
 
     if meta.bind.name != 'ibm_db_sa':
@@ -164,23 +201,41 @@ def define_metadef_namespace_resource_ty
     if meta.bind.name == 'ibm_db_sa':
         _constr_kwargs['name'] = 'ix_metadef_ns_res_types_res_type_id_ns_id'
 
-    metadef_associations = Table(
-        'metadef_namespace_resource_types',
-        meta,
-        Column('resource_type_id', Integer(),
-               ForeignKey('metadef_resource_types.id'),
-               primary_key=True, nullable=False),
-        Column('namespace_id', Integer(),
-               ForeignKey('metadef_namespaces.id'),
-               primary_key=True, nullable=False),
-        Column('properties_target', String(80)),
-        Column('prefix', String(80)),
-        Column('created_at', DateTime(), nullable=False),
-        Column('updated_at', DateTime()),
-        UniqueConstraint('resource_type_id', 'namespace_id',
-                         **_constr_kwargs),
-        mysql_engine='InnoDB',
-        extend_existing=True)
+    # MySQL Cluster, a.k.a. NDB, does not support these foreign keys, which are later removed.
+    if CONF.database.mysql_storage_engine == "NDBCLUSTER":
+        metadef_associations = Table(
+            'metadef_namespace_resource_types',
+            meta,
+            Column('resource_type_id', Integer(),
+                   primary_key=True, nullable=False),
+            Column('namespace_id', Integer(),
+                   primary_key=True, nullable=False),
+            Column('properties_target', String(80)),
+            Column('prefix', String(80)),
+            Column('created_at', DateTime(), nullable=False),
+            Column('updated_at', DateTime()),
+            UniqueConstraint('resource_type_id', 'namespace_id',
+                             **_constr_kwargs),
+            mysql_engine=CONF.database.mysql_storage_engine,
+            extend_existing=True)
+    else:
+        metadef_associations = Table(
+            'metadef_namespace_resource_types',
+            meta,
+            Column('resource_type_id', Integer(),
+                   ForeignKey('metadef_resource_types.id'),
+                   primary_key=True, nullable=False),
+            Column('namespace_id', Integer(),
+                   ForeignKey('metadef_namespaces.id'),
+                   primary_key=True, nullable=False),
+            Column('properties_target', String(80)),
+            Column('prefix', String(80)),
+            Column('created_at', DateTime(), nullable=False),
+            Column('updated_at', DateTime()),
+            UniqueConstraint('resource_type_id', 'namespace_id',
+                             **_constr_kwargs),
+            mysql_engine=CONF.database.mysql_storage_engine,
+            extend_existing=True)
 
     if meta.bind.name != 'ibm_db_sa':
         Index('ix_metadef_ns_res_types_res_type_id_ns_id',
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/037_add_changes_to_satisfy_models.py.orig	2016-07-29 11:32:40.844072755 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/037_add_changes_to_satisfy_models.py	2016-07-29 11:44:01.300274699 -0600
@@ -10,6 +10,7 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from oslo_config import cfg
 import sqlalchemy
 from sqlalchemy import Table, Index, UniqueConstraint, Sequence
 from sqlalchemy.schema import (AddConstraint, DropConstraint, CreateIndex,
@@ -17,6 +18,7 @@ from sqlalchemy.schema import (AddConstr
 from sqlalchemy import sql
 from sqlalchemy import update
 
+CONF = cfg.CONF
 
 def upgrade(migrate_engine):
     meta = sqlalchemy.MetaData()
@@ -74,10 +76,14 @@ def upgrade(migrate_engine):
 
         images.c.id.alter(server_default=None)
     if migrate_engine.name == 'mysql':
-        constraint = UniqueConstraint(image_properties.c.image_id,
-                                      image_properties.c.name,
-                                      name='image_id')
-        migrate_engine.execute(DropConstraint(constraint))
+        # MySQL Cluster, a.k.a. NDB, does not support the constraint here. 
+        # This will only add the constraint if MySQL Cluster is not being used.
+        if CONF.database.mysql_storage_engine != "NDBCLUSTER":
+            constraint = UniqueConstraint(image_properties.c.image_id,
+                                          image_properties.c.name,
+                                          name='image_id')
+            migrate_engine.execute(DropConstraint(constraint))
+
         image_locations = Table('image_locations', meta, autoload=True)
         if len(image_locations.foreign_keys) == 0:
             migrate_engine.execute(AddConstraint(ForeignKeyConstraint(
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/009_add_mindisk_and_minram.py.orig	2016-07-29 11:32:47.075511757 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/009_add_mindisk_and_minram.py	2016-07-29 11:44:23.917127924 -0600
@@ -14,11 +14,13 @@
 #    under the License.
 
 from migrate.changeset import *  # noqa
+from oslo_config import cfg
 from sqlalchemy import *  # noqa
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     Boolean, DateTime, Integer, String, Text, from_migration_import)  # noqa
 
+CONF = cfg.CONF
 
 def get_images_table(meta):
     """
@@ -51,7 +53,7 @@ def get_images_table(meta):
                    Column('owner', String(255)),
                    Column('min_disk', Integer(), default=0),
                    Column('min_ram', Integer(), default=0),
-                   mysql_engine='InnoDB',
+                   mysql_engine=CONF.database.mysql_storage_engine,
                    extend_existing=True)
 
     return images
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/032_add_task_info_table.py.orig	2016-07-29 11:32:53.180994551 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/032_add_task_info_table.py	2016-07-29 11:44:45.316686633 -0600
@@ -13,6 +13,7 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from oslo_config import cfg
 from sqlalchemy.schema import (Column, ForeignKey, MetaData, Table)
 
 from glance.db.sqlalchemy.migrate_repo.schema import (String,
@@ -22,6 +23,7 @@ from glance.db.sqlalchemy.migrate_repo.s
 
 TASKS_MIGRATE_COLUMNS = ['input', 'message', 'result']
 
+CONF = cfg.CONF
 
 def define_task_info_table(meta):
     Table('tasks', meta, autoload=True)
@@ -37,7 +39,7 @@ def define_task_info_table(meta):
                       Column('input', Text()),
                       Column('result', Text()),
                       Column('message', Text()),
-                      mysql_engine='InnoDB')
+                      mysql_engine=CONF.database.mysql_storage_engine)
 
     return task_info
 
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/004_add_checksum.py.orig	2016-07-29 11:32:58.755972142 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/004_add_checksum.py	2016-07-29 11:45:04.732540072 -0600
@@ -14,11 +14,13 @@
 #    under the License.
 
 from migrate.changeset import *  # noqa
+from oslo_config import cfg
 from sqlalchemy import *  # noqa
 
 from glance.db.sqlalchemy.migrate_repo.schema import (
     Boolean, DateTime, Integer, String, Text, from_migration_import)  # noqa
 
+CONF = cfg.CONF
 
 def get_images_table(meta):
     """
@@ -48,7 +50,7 @@ def get_images_table(meta):
                           default=False,
                           index=True),
                    Column('checksum', String(32)),
-                   mysql_engine='InnoDB',
+                   mysql_engine=CONF.database.mysql_storage_engine,
                    extend_existing=True)
 
     return images
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/021_set_engine_mysql_innodb.py.orig	2016-07-29 11:33:05.406762219 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/021_set_engine_mysql_innodb.py	2016-07-29 11:45:30.188972755 -0600
@@ -14,21 +14,24 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+from oslo_config import cfg
 from sqlalchemy import MetaData
 
 tables = ['image_locations']
 
+CONF = cfg.CONF
 
 def upgrade(migrate_engine):
     meta = MetaData()
     meta.bind = migrate_engine
     if migrate_engine.name == "mysql":
-        d = migrate_engine.execute("SHOW TABLE STATUS WHERE Engine!='InnoDB';")
+        d = migrate_engine.execute("SHOW TABLE STATUS WHERE Engine!='%s';" % 
+                                   CONF.database.mysql_storage_engine)
         for row in d.fetchall():
             table_name = row[0]
             if table_name in tables:
-                migrate_engine.execute("ALTER TABLE %s Engine=InnoDB" %
-                                       table_name)
+                migrate_engine.execute("ALTER TABLE %(db_table)s Engine=%(mysql_storage_engine)s" %
+                                       dict(db_table=table_name, mysql_storage_engine=CONF.database.mysql_storage_engine))
 
 
 def downgrade(migrate_engine):
--- glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/041_add_artifact_tables.py.orig	2016-07-29 11:33:13.687025321 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/migrate_repo/versions/041_add_artifact_tables.py	2016-07-29 11:45:55.382385404 -0600
@@ -12,6 +12,7 @@
 # License for the specific language governing permissions and limitations
 # under the License.
 
+from oslo_config import cfg
 from sqlalchemy.schema import (Column, ForeignKey, Index, MetaData, Table)
 
 
@@ -19,6 +20,7 @@ from glance.db.sqlalchemy.migrate_repo.s
     BigInteger, Boolean, DateTime, Integer, Numeric, String, Text,
     create_tables)  # noqa
 
+CONF = cfg.CONF
 
 def define_artifacts_table(meta):
     artifacts = Table('artifacts',
@@ -43,7 +45,7 @@ def define_artifacts_table(meta):
                              nullable=False),
                       Column('deleted_at', DateTime()),
                       Column('published_at', DateTime()),
-                      mysql_engine='InnoDB',
+                      mysql_engine=CONF.database.mysql_storage_engine,
                       extend_existing=True)
 
     Index('ix_artifact_name_and_version', artifacts.c.name,
@@ -68,7 +70,7 @@ def define_artifact_tags_table(meta):
                           Column('created_at', DateTime(), nullable=False),
                           Column('updated_at', DateTime(),
                                  nullable=False),
-                          mysql_engine='InnoDB',
+                          mysql_engine=CONF.database.mysql_storage_engine,
                           extend_existing=True)
 
     Index('ix_artifact_tags_artifact_id', artifact_tags.c.artifact_id)
@@ -100,7 +102,7 @@ def define_artifact_dependencies_table(m
                                          nullable=False),
                                   Column('updated_at', DateTime(),
                                          nullable=False),
-                                  mysql_engine='InnoDB',
+                                  mysql_engine=CONF.database.mysql_storage_engine,
                                   extend_existing=True)
 
     Index('ix_artifact_dependencies_source_id',
@@ -131,7 +133,7 @@ def define_artifact_blobs_table(meta):
                            Column('created_at', DateTime(), nullable=False),
                            Column('updated_at', DateTime(),
                                   nullable=False),
-                           mysql_engine='InnoDB',
+                           mysql_engine=CONF.database.mysql_storage_engine,
                            extend_existing=True)
     Index('ix_artifact_blobs_artifact_id',
           artifact_blobs.c.artifact_id)
@@ -161,7 +163,7 @@ def define_artifact_properties_table(met
                                 Column('updated_at', DateTime(),
                                        nullable=False),
                                 Column('position', Integer()),
-                                mysql_engine='InnoDB',
+                                mysql_engine=CONF.database.mysql_storage_engine,
                                 extend_existing=True)
     Index('ix_artifact_properties_artifact_id',
           artifact_properties.c.artifact_id)
@@ -186,7 +188,7 @@ def define_artifact_blob_locations_table
                                     Column('position', Integer()),
                                     Column('status', String(36),
                                            nullable=True),
-                                    mysql_engine='InnoDB',
+                                    mysql_engine=CONF.database.mysql_storage_engine,
                                     extend_existing=True)
     Index('ix_artifact_blob_locations_blob_id',
           artifact_blob_locations.c.blob_id)
--- glance-2015.1.2/glance/db/sqlalchemy/models.py.orig	2016-07-29 11:33:19.907591270 -0600
+++ glance-2015.1.2/glance/db/sqlalchemy/models.py	2016-07-29 11:46:37.517783749 -0600
@@ -21,6 +21,7 @@ SQLAlchemy models for glance data
 import uuid
 
 from oslo.serialization import jsonutils
+from oslo_config import cfg
 from oslo_db.sqlalchemy import models
 from oslo_utils import timeutils
 from sqlalchemy import BigInteger
@@ -39,6 +40,7 @@ from sqlalchemy import Text
 from sqlalchemy.types import TypeDecorator
 from sqlalchemy import UniqueConstraint
 
+CONF = cfg.CONF
 
 BASE = declarative_base()
 
@@ -67,7 +69,7 @@ class JSONEncodedDict(TypeDecorator):
 class GlanceBase(models.ModelBase, models.TimestampMixin):
     """Base class for Glance Models."""
 
-    __table_args__ = {'mysql_engine': 'InnoDB'}
+    __table_args__ = {'mysql_engine': CONF.database.mysql_storage_engine}
     __table_initialized__ = False
     __protected_attributes__ = set([
         "created_at", "updated_at", "deleted_at", "deleted"])
