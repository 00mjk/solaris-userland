#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

# The only symbols that modules need to export are _rad_reg & _rad_init.
# Enforcing this eliminates bloat and noise in .dynsym/.dynstr,
# and in turn helps reduce disk and memory footprint.

$mapfile_version 2

SYMBOL_VERSION SUNWprivate {
	global:
		_rad_fini;
		_rad_init;
		_rad_reg;

		# Module API
		rad_module_register	{ FLAGS = PARENT };
		rad_module_init		{ FLAGS = PARENT };
		rad_module_find_by_namespace	{ FLAGS = PARENT };

		rad_instance_create	{ FLAGS = PARENT };
		rad_instance_hold	{ FLAGS = PARENT };
		rad_instance_rele	{ FLAGS = PARENT };
		rad_instance_getname	{ FLAGS = PARENT };
		rad_instance_getdata	{ FLAGS = PARENT };
		rad_instance_notify	{ FLAGS = PARENT };

		rad_cont_insert		{ FLAGS = PARENT };
		rad_cont_insert_singleton	{ FLAGS = PARENT };
		rad_cont_insert_singleton_id	{ FLAGS = PARENT };
		rad_cont_remove		{ FLAGS = PARENT };
		rad_cont_supercede	{ FLAGS = PARENT };
		rad_cont_register_dynamic	{ FLAGS = PARENT };

		rad_log			{ FLAGS = PARENT };
		rad_log_alloc		{ FLAGS = PARENT };
		rad_get_loglevel	{ FLAGS = PARENT };

		rad_thread_arg		{ FLAGS = PARENT };
		rad_thread_ack		{ FLAGS = PARENT };
		rad_thread_create	{ FLAGS = PARENT };
		rad_thread_create_async	{ FLAGS = PARENT };

		rad_mutex_init		{ FLAGS = PARENT };
		rad_mutex_enter		{ FLAGS = PARENT };
		rad_mutex_exit		{ FLAGS = PARENT };
		rad_cond_init		{ FLAGS = PARENT };

		rad_exec_params_alloc	{ FLAGS = PARENT };
		rad_exec_params_free	{ FLAGS = PARENT };
		rad_exec_params_set_cwd	{ FLAGS = PARENT };
		rad_exec_params_set_env	{ FLAGS = PARENT };
		rad_exec_params_set_loglevel	{ FLAGS = PARENT };
		rad_exec_params_set_stdin	{ FLAGS = PARENT };
		rad_exec_params_set_stdout	{ FLAGS = PARENT };
		rad_exec_params_set_stderr	{ FLAGS = PARENT };
		rad_forkexec		{ FLAGS = PARENT };
		rad_forkexec_wait	{ FLAGS = PARENT };
		rad_wait		{ FLAGS = PARENT };

		rad_zalloc		{ FLAGS = PARENT };
		rad_strndup		{ FLAGS = PARENT };
		rad_strccmp		{ FLAGS = PARENT };
		rad_openf		{ FLAGS = PARENT };
		rad_fopenf		{ FLAGS = PARENT };

		rad_locale_parse	{ FLAGS = PARENT };
		rad_locale_free		{ FLAGS = PARENT };

		rad_isproxy		{ FLAGS = PARENT };
		rad_container		{ FLAGS = PARENT };
	local:
		*;
};
