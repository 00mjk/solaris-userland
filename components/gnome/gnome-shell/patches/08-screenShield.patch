In debugging 27206282, we ran into cases where JS errors were reported
for features we don't support.  The first two changesets address that.
The last changeset is cherry-picked from upstream to resolve the other JS
error reported in onManagerProxyLoaded

Not suitable for upstream

--- a/js/misc/loginManager.js	2017-11-30 15:55:18.202173584 -0800
+++ b/js/misc/loginManager.js	2017-11-30 15:58:17.449875628 -0800
@@ -40,9 +40,6 @@
 <signal name="Lock" /> \
 <signal name="Unlock" /> \
 <property name="Active" type="b" access="read" /> \
-<method name="SetLockedHint"> \
-    <arg type="b" direction="in"/> \
-</method> \
 </interface> \
 </node>';
 
--- a/js/ui/screenShield.js	2017-11-30 15:58:44.880254262 -0800
+++ b/js/ui/screenShield.js	2017-11-30 15:58:54.387634259 -0800
@@ -576,9 +576,6 @@
         if (prevIsActive != this._isActive)
             this.emit('active-changed');
 
-        if (this._loginSession)
-            this._loginSession.SetLockedHintRemote(active);
-
         this._syncInhibitor();
     },
 
--- a/js/misc/objectManager.js	2016-07-28 21:43:47.000000000 -0700
+++ b/js/misc/objectManager.js	2017-11-30 16:22:39.492480587 -0800
@@ -65,6 +65,9 @@
     },
 
     _tryToCompleteLoad: function() {
+        if (this._numLoadInhibitors == 0)
+            return;
+
         this._numLoadInhibitors--;
         if (this._numLoadInhibitors == 0) {
             if (this._onLoaded)
@@ -193,6 +196,11 @@
 
             let [objects] = result;
 
+            if (!objects) {
+                this._tryToCompleteLoad();
+                return;
+            }
+
             let objectPaths = Object.keys(objects);
             for (let i = 0; i < objectPaths.length; i++) {
                 let objectPath = objectPaths[i];
