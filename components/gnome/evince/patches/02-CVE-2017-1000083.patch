Fix for the remainder of CVE-2017-1000083.

For more information see:

  https://bugzilla.gnome.org/show_bug.cgi?id=784947
  https://bugzilla.gnome.org/show_bug.cgi?id=784963

with fixes taken from:

  https://bugzilla.gnome.org/attachment.cgi?id=356282

  https://bugzilla.gnome.org/attachment.cgi?id=356165
  https://bugzilla.gnome.org/attachment.cgi?id=356166
  https://bugzilla.gnome.org/attachment.cgi?id=356167
  https://bugzilla.gnome.org/attachment.cgi?id=356168
  https://bugzilla.gnome.org/attachment.cgi?id=356169
  https://bugzilla.gnome.org/attachment.cgi?id=356170
  https://bugzilla.gnome.org/attachment.cgi?id=356171
  https://bugzilla.gnome.org/attachment.cgi?id=356172
  https://bugzilla.gnome.org/attachment.cgi?id=356173
  https://bugzilla.gnome.org/attachment.cgi?id=356174


----------------------------------------
From 1040ffa506ffa35c2ee4959b090c1b1cb554cd86 Mon Sep 17 00:00:00 2001
From: Tobias Mueller <muelli@cryptobitch.de>
Date: Fri, 14 Jul 2017 12:52:14 +0200
Subject: [PATCH] dvi: Mitigate command injection attacks by quoting filename

With commit 1fcca0b8041de0d6074d7e17fba174da36c65f99 came a DVI backend.
It exports to PDF via the dvipdfm tool.
It calls that tool with the filename of the currently loaded document.
If that filename is cleverly crafted, it can escape the currently
used manual quoting of the filname.  Instead of manually quoting the
filename, we use g_shell_quote.  To further harden the call to dvipdfm
we use "--" to separate options from filenames.

https://bugzilla.gnome.org/show_bug.cgi?id=784947
---
 backend/dvi/dvi-document.c | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/backend/dvi/dvi-document.c b/backend/dvi/dvi-document.c
index cbb3f8a..6b93de7 100644
--- a/backend/dvi/dvi-document.c
+++ b/backend/dvi/dvi-document.c
@@ -300,12 +300,14 @@ dvi_document_file_exporter_end (EvFileExporter *exporter)
 	gboolean success;
 	
 	DviDocument *dvi_document = DVI_DOCUMENT(exporter);
+	gchar* quoted_filename = g_shell_quote (dvi_document->context->filename);
 	
-	command_line = g_strdup_printf ("dvipdfm %s -o %s \"%s\"", /* dvipdfm -s 1,2,.., -o exporter_filename dvi_filename */
+	command_line = g_strdup_printf ("dvipdfm %s -o %s -- %s", /* dvipdfm -s 1,2,.., -o exporter_filename dvi_filename */
 					dvi_document->exporter_opts->str,
 					dvi_document->exporter_filename,
-					dvi_document->context->filename);
-	
+					quoted_filename);
+	g_free (quoted_filename);
+
 	success = g_spawn_command_line_sync (command_line,
 					     NULL,
 					     NULL,
-- 
2.7.4


----------------------------------------
From 5e92c9acb3717e1b9b6e053973671036d42c436b Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jul 2017 03:49:25 +0200
Subject: [PATCH] comics: Add test program for archive handling code

To make it easier to find bugs related to archive handling specifically.
This test program just lists the files in the archive provided, along
with their sizes and whether they are password protected.

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 backend/comics/Makefile.am       |  11 ++++
 backend/comics/test-ev-archive.c | 116 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 127 insertions(+)
 create mode 100644 backend/comics/test-ev-archive.c

diff --git a/backend/comics/Makefile.am b/backend/comics/Makefile.am
index 1e87d049..f2fd7738 100644
--- a/backend/comics/Makefile.am
+++ b/backend/comics/Makefile.am
@@ -37,6 +37,17 @@ appstream_in_files = evince-comicsdocument.metainfo.xml.in.in
 appstream_DATA = $(appstream_in_files:.xml.in.in=.xml)
 @INTLTOOL_XML_RULE@
 
+noinst_PROGRAMS = test-ev-archive
+
+test_ev_archive_SOURCES = ev-archive.c ev-archive.h test-ev-archive.c
+test_ev_archive_CPPFLAGS = $(libcomicsdocument_la_CPPFLAGS)
+test_ev_archive_CFLAGS = $(libcomicsdocument_la_CFLAGS)
+test_ev_archive_LDADD =					\
+	$(top_builddir)/cut-n-paste/unarr/libunarr.la	\
+	$(LIBARCHIVE_LIBS)				\
+	$(BACKEND_LIBS)					\
+	$(LIB_LIBS)
+
 EXTRA_DIST = $(backend_in_files) $(appstream_in_files)
 
 CLEANFILES = $(backend_DATA) $(appstream_DATA)
diff --git a/backend/comics/test-ev-archive.c b/backend/comics/test-ev-archive.c
new file mode 100644
index 00000000..772495a9
--- /dev/null
+++ b/backend/comics/test-ev-archive.c
@@ -0,0 +1,116 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8; c-indent-level: 8 -*- */
+/*
+ * Copyright (C) 2017, Bastien Nocera <hadess@hadess.net>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ */
+
+#include "config.h"
+
+#include "ev-archive.h"
+
+static void
+usage (const char *prog)
+{
+	g_print ("- Lists file in a supported archive format\n");
+	g_print ("Usage: %s archive-type filename\n", prog);
+	g_print ("Where archive-type is one of rar, zip, 7z or tar\n");
+}
+
+static EvArchiveType
+str_to_archive_type (const char *str)
+{
+	g_return_val_if_fail (str != NULL, EV_ARCHIVE_TYPE_NONE);
+
+	if (g_strcmp0 (str, "rar") == 0)
+		return EV_ARCHIVE_TYPE_RAR;
+	if (g_strcmp0 (str, "zip") == 0)
+		return EV_ARCHIVE_TYPE_ZIP;
+	if (g_strcmp0 (str, "7z") == 0)
+		return EV_ARCHIVE_TYPE_7Z;
+	if (g_strcmp0 (str, "tar") == 0)
+		return EV_ARCHIVE_TYPE_TAR;
+
+	g_warning ("Archive type '%s' not supported", str);
+	return EV_ARCHIVE_TYPE_NONE;
+}
+
+int
+main (int argc, char **argv)
+{
+	EvArchive *ar;
+	EvArchiveType ar_type;
+	GError *error = NULL;
+	gboolean printed_header = FALSE;
+
+	if (argc != 3) {
+		usage (argv[0]);
+		return 1;
+	}
+
+	ar_type = str_to_archive_type (argv[1]);
+	if (ar_type == EV_ARCHIVE_TYPE_NONE)
+		return 1;
+
+	ar = ev_archive_new ();
+	if (!ev_archive_set_archive_type (ar, ar_type)) {
+		g_warning ("Failed to set archive type");
+		goto out;
+	}
+
+	if (!ev_archive_open_filename (ar, argv[2], &error)) {
+		g_warning ("Failed to open '%s': %s",
+			   argv[2], error->message);
+		g_error_free (error);
+		goto out;
+	}
+
+	while (1) {
+		const char *name;
+		gboolean is_encrypted;
+		gint64 size;
+
+		if (!ev_archive_read_next_header (ar, &error)) {
+			if (error != NULL) {
+				g_warning ("Fatal error handling archive: %s", error->message);
+				g_clear_error (&error);
+				goto out;
+			}
+			break;
+		}
+
+		name = ev_archive_get_entry_pathname (ar);
+		is_encrypted = ev_archive_get_entry_is_encrypted (ar);
+		size = ev_archive_get_entry_size (ar);
+
+		if (!printed_header) {
+			g_print ("P\tSIZE\tNAME\n");
+			printed_header = TRUE;
+		}
+
+		g_print ("%c\t%"G_GINT64_FORMAT"\t%s\n",
+			 is_encrypted ? 'P' : ' ',
+			 size, name);
+	}
+
+	ev_archive_reset (ar);
+	g_clear_object (&ar);
+
+	return 0;
+
+out:
+	g_clear_object (&ar);
+	return 1;
+}
-- 
2.13.0
----------------------------------------
From 9a407f1dd6fdd2b325a39484bf00b38e8dce09a9 Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Sat, 22 Jul 2017 14:59:12 +0200
Subject: [PATCH] comics: Don't strip filenames in archive

This was useful when parsing command-line outputs but makes no sense
since we switched to using libarchive/unarr, and would actually break
support for filenames in the archive that have leading or trailing
spaces.

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 backend/comics/comics-document.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/backend/comics/comics-document.c b/backend/comics/comics-document.c
index a913641d..acbdeb32 100644
--- a/backend/comics/comics-document.c
+++ b/backend/comics/comics-document.c
@@ -215,7 +215,7 @@ comics_document_load (EvDocument *document,
 		if (g_slist_find_custom (supported_extensions, suffix,
 					 (GCompareFunc) strcmp) != NULL) {
                         g_ptr_array_add (comics_document->page_names,
-                                         g_strstrip (g_strdup (cb_file)));
+                                         g_strdup (cb_file));
 		}
 		g_free (suffix);
 	}
-- 
2.13.0
----------------------------------------
From 4cc667c0fe808687d9a40a3d4ef45c1571694ffa Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jul 2017 11:37:34 +0200
Subject: [PATCH] comics: Add API to detect whether an archive entry is
 encrypted

Only implemented and used by the libarchive backend unfortunately.

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 backend/comics/ev-archive.c | 23 +++++++++++++++++++++++
 backend/comics/ev-archive.h |  1 +
 2 files changed, 24 insertions(+)

diff --git a/backend/comics/ev-archive.c b/backend/comics/ev-archive.c
index 7556a49c..f32dc2cb 100644
--- a/backend/comics/ev-archive.c
+++ b/backend/comics/ev-archive.c
@@ -261,6 +261,29 @@ ev_archive_get_entry_size (EvArchive *archive)
 	return -1;
 }
 
+gboolean
+ev_archive_get_entry_is_encrypted (EvArchive *archive)
+{
+	g_return_val_if_fail (EV_IS_ARCHIVE (archive), FALSE);
+	g_return_val_if_fail (archive->type != EV_ARCHIVE_TYPE_NONE, FALSE);
+
+	switch (archive->type) {
+	case EV_ARCHIVE_TYPE_RAR:
+		g_return_val_if_fail (archive->unarr != NULL, FALSE);
+		/* password-protected RAR is not even detected right now */
+		return FALSE;
+	case EV_ARCHIVE_TYPE_NONE:
+		g_assert_not_reached ();
+	case EV_ARCHIVE_TYPE_ZIP:
+	case EV_ARCHIVE_TYPE_7Z:
+	case EV_ARCHIVE_TYPE_TAR:
+		g_return_val_if_fail (archive->libar_entry != NULL, -1);
+		return archive_entry_is_encrypted (archive->libar_entry);
+	}
+
+	return FALSE;
+}
+
 gssize
 ev_archive_read_data (EvArchive *archive,
 		      void      *buf,
diff --git a/backend/comics/ev-archive.h b/backend/comics/ev-archive.h
index cb526698..9f015f21 100644
--- a/backend/comics/ev-archive.h
+++ b/backend/comics/ev-archive.h
@@ -46,6 +46,7 @@ gboolean       ev_archive_read_next_header   (EvArchive     *archive,
 					      GError       **error);
 const char    *ev_archive_get_entry_pathname (EvArchive     *archive);
 gint64         ev_archive_get_entry_size     (EvArchive     *archive);
+gboolean       ev_archive_get_entry_is_encrypted (EvArchive *archive);
 gssize         ev_archive_read_data          (EvArchive     *archive,
 					      void          *buf,
 					      gsize          count,
-- 
2.13.0
----------------------------------------
From 2efa1318e2dbbd63a08319762c09db79b05545ff Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jul 2017 11:35:23 +0200
Subject: [PATCH] comics: Add error reporting to comics_document_list()

So that we can know whether a NULL return value is due to an empty file
or a broken file.

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 backend/comics/comics-document.c | 45 +++++++++++++++++++++++++++-------------
 1 file changed, 31 insertions(+), 14 deletions(-)

diff --git a/backend/comics/comics-document.c b/backend/comics/comics-document.c
index acbdeb32..611d7527 100644
--- a/backend/comics/comics-document.c
+++ b/backend/comics/comics-document.c
@@ -59,24 +59,42 @@ static GSList* get_supported_image_extensions (void);
 EV_BACKEND_REGISTER (ComicsDocument, comics_document)
 
 static char **
-comics_document_list (ComicsDocument *comics_document)
+comics_document_list (ComicsDocument  *comics_document,
+		      GError         **error)
 {
 	char **ret = NULL;
 	GPtrArray *array;
 
-	if (!ev_archive_open_filename (comics_document->archive, comics_document->archive_path, NULL))
+	if (!ev_archive_open_filename (comics_document->archive, comics_document->archive_path, error)) {
+		if (*error != NULL) {
+			g_debug ("Fatal error handling archive: %s", (*error)->message);
+			g_clear_error (error);
+		}
+
+		g_set_error_literal (error,
+				     EV_DOCUMENT_ERROR,
+				     EV_DOCUMENT_ERROR_INVALID,
+				     _("File is corrupted"));
 		goto out;
+	}
 
 	array = g_ptr_array_new ();
 
 	while (1) {
 		const char *name;
-		GError *error = NULL;
 
-		if (!ev_archive_read_next_header (comics_document->archive, &error)) {
-			if (error != NULL) {
-				g_warning ("Fatal error handling archive: %s", error->message);
-				g_error_free (error);
+		if (!ev_archive_read_next_header (comics_document->archive, error)) {
+			if (*error != NULL) {
+				g_debug ("Fatal error handling archive: %s", (*error)->message);
+				g_clear_error (error);
+
+				g_ptr_array_free (array, TRUE);
+
+				g_set_error_literal (error,
+						     EV_DOCUMENT_ERROR,
+						     EV_DOCUMENT_ERROR_INVALID,
+						     _("File is corrupted"));
+				goto out;
 			}
 			break;
 		}
@@ -89,6 +107,10 @@ comics_document_list (ComicsDocument *comics_document)
 
 	if (array->len == 0) {
 		g_ptr_array_free (array, TRUE);
+		g_set_error_literal (error,
+				     EV_DOCUMENT_ERROR,
+				     EV_DOCUMENT_ERROR_INVALID,
+				     _("No files in archive"));
 	} else {
 		g_ptr_array_add (array, NULL);
 		ret = (char **) g_ptr_array_free (array, FALSE);
@@ -194,14 +216,9 @@ comics_document_load (EvDocument *document,
 	g_free (mime_type);
 
 	/* Get list of files in archive */
-	cb_files = comics_document_list (comics_document);
-	if (!cb_files) {
-		g_set_error_literal (error,
-                                     EV_DOCUMENT_ERROR,
-                                     EV_DOCUMENT_ERROR_INVALID,
-                                     _("File corrupted or no files in archive"));
+	cb_files = comics_document_list (comics_document, error);
+	if (!cb_files)
 		return FALSE;
-	}
 
         comics_document->page_names = g_ptr_array_sized_new (64);
 
-- 
2.13.0
----------------------------------------
From 29747f1e9a915973813886378dfe920ebee38a1b Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jul 2017 12:06:09 +0200
Subject: [PATCH] comics: Return an error when archive contents are encrypted

Note that this will request a password and crash when it cannot pass that
information to the EvDocument later. This needs to be fixed in the
evince shell itself.

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 backend/comics/comics-document.c | 22 ++++++++++++++++++----
 1 file changed, 18 insertions(+), 4 deletions(-)

diff --git a/backend/comics/comics-document.c b/backend/comics/comics-document.c
index 611d7527..4ead1ddc 100644
--- a/backend/comics/comics-document.c
+++ b/backend/comics/comics-document.c
@@ -64,6 +64,7 @@ comics_document_list (ComicsDocument  *comics_document,
 {
 	char **ret = NULL;
 	GPtrArray *array;
+	gboolean has_encrypted_files;
 
 	if (!ev_archive_open_filename (comics_document->archive, comics_document->archive_path, error)) {
 		if (*error != NULL) {
@@ -78,6 +79,7 @@ comics_document_list (ComicsDocument  *comics_document,
 		goto out;
 	}
 
+	has_encrypted_files = FALSE;
 	array = g_ptr_array_new ();
 
 	while (1) {
@@ -100,6 +102,11 @@ comics_document_list (ComicsDocument  *comics_document,
 		}
 
 		name = ev_archive_get_entry_pathname (comics_document->archive);
+		if (ev_archive_get_entry_is_encrypted (comics_document->archive)) {
+			g_debug ("Not adding encrypted file '%s' to the list of files in the comics", name);
+			has_encrypted_files = TRUE;
+			continue;
+		}
 
 		g_debug ("Adding '%s' to the list of files in the comics", name);
 		g_ptr_array_add (array, g_strdup (name));
@@ -107,10 +114,17 @@ comics_document_list (ComicsDocument  *comics_document,
 
 	if (array->len == 0) {
 		g_ptr_array_free (array, TRUE);
-		g_set_error_literal (error,
-				     EV_DOCUMENT_ERROR,
-				     EV_DOCUMENT_ERROR_INVALID,
-				     _("No files in archive"));
+		if (has_encrypted_files) {
+			g_set_error_literal (error,
+					     EV_DOCUMENT_ERROR,
+					     EV_DOCUMENT_ERROR_ENCRYPTED,
+					     _("Archive is encrypted"));
+		} else {
+			g_set_error_literal (error,
+					     EV_DOCUMENT_ERROR,
+					     EV_DOCUMENT_ERROR_INVALID,
+					     _("No files in archive"));
+		}
 	} else {
 		g_ptr_array_add (array, NULL);
 		ret = (char **) g_ptr_array_free (array, FALSE);
-- 
2.13.0
----------------------------------------
From 14c54a7187e5cbf710ee890a2ed78083f7d048d1 Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jul 2017 11:52:56 +0200
Subject: [PATCH] comics: Propagate an error if the mime-type cannot be read

And avoid leaking an unused error.

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 backend/comics/comics-document.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/backend/comics/comics-document.c b/backend/comics/comics-document.c
index 4ead1ddc..b3e028f6 100644
--- a/backend/comics/comics-document.c
+++ b/backend/comics/comics-document.c
@@ -219,7 +219,7 @@ comics_document_load (EvDocument *document,
 
 	comics_document->archive_uri = g_strdup (uri);
 
-	mime_type = ev_file_get_mime_type (uri, FALSE, &err);
+	mime_type = ev_file_get_mime_type (uri, FALSE, error);
 	if (mime_type == NULL)
 		return FALSE;
 
-- 
2.13.0
----------------------------------------
From 06c17eb0e7e9fe4d7c1194c7b482b0d4221e436c Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jul 2017 16:43:16 +0200
Subject: [PATCH] comics: Split off checking whether a file has a supported
 extension

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 backend/comics/comics-document.c | 31 +++++++++++++++++++++++--------
 1 file changed, 23 insertions(+), 8 deletions(-)

diff --git a/backend/comics/comics-document.c b/backend/comics/comics-document.c
index b3e028f6..cb9d2fcb 100644
--- a/backend/comics/comics-document.c
+++ b/backend/comics/comics-document.c
@@ -58,7 +58,28 @@ static GSList* get_supported_image_extensions (void);
 
 EV_BACKEND_REGISTER (ComicsDocument, comics_document)
 
-static char **
+static gboolean
+has_supported_extension (const char *name,
+			 GSList     *supported_extensions)
+{
+	gboolean ret = FALSE;
+	gchar *suffix;
+
+	suffix = g_strrstr (name, ".");
+	if (!suffix)
+		return ret;
+
+	suffix = g_ascii_strdown (suffix + 1, -1);
+	if (g_slist_find_custom (supported_extensions, suffix,
+				 (GCompareFunc) strcmp) != NULL) {
+		ret = TRUE;
+	}
+	g_free (suffix);
+
+	return ret;
+}
+
+static GPtrArray *
 comics_document_list (ComicsDocument  *comics_document,
 		      GError         **error)
 {
@@ -239,16 +260,10 @@ comics_document_load (EvDocument *document,
 	supported_extensions = get_supported_image_extensions ();
 	for (i = 0; cb_files[i] != NULL; i++) {
 		cb_file = cb_files[i];
-		gchar *suffix = g_strrstr (cb_file, ".");
-		if (!suffix)
-			continue;
-		suffix = g_ascii_strdown (suffix + 1, -1);
-		if (g_slist_find_custom (supported_extensions, suffix,
-					 (GCompareFunc) strcmp) != NULL) {
+		if (has_supported_extension (cb_file, supported_extensions)) {
                         g_ptr_array_add (comics_document->page_names,
                                          g_strdup (cb_file));
 		}
-		g_free (suffix);
 	}
 	g_strfreev (cb_files);
 	g_slist_foreach (supported_extensions, (GFunc) g_free, NULL);
-- 
2.13.0
----------------------------------------
From 2de91048d67d688ba53db6aae2b3cf0a69ff2ef9 Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jul 2017 16:50:04 +0200
Subject: [PATCH] comics: Check for supported extensions in initial list loop

Instead of looping over all the files once, making a list, then going
over the list once again to check whether those files are supported,
check for support when building the list.

This fixes reporting an error when non-image files are encrypted and
we could read the images just fine, or the separate errors for when the
archive is empty, or there are no supported files in the archive.

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 backend/comics/comics-document.c | 48 ++++++++++++----------------------------
 1 file changed, 14 insertions(+), 34 deletions(-)

diff --git a/backend/comics/comics-document.c b/backend/comics/comics-document.c
index cb9d2fcb..0725dff3 100644
--- a/backend/comics/comics-document.c
+++ b/backend/comics/comics-document.c
@@ -83,9 +83,9 @@ static GPtrArray *
 comics_document_list (ComicsDocument  *comics_document,
 		      GError         **error)
 {
-	char **ret = NULL;
 	GPtrArray *array;
 	gboolean has_encrypted_files;
+	GSList *supported_extensions;
 
 	if (!ev_archive_open_filename (comics_document->archive, comics_document->archive_path, error)) {
 		if (*error != NULL) {
@@ -100,8 +100,10 @@ comics_document_list (ComicsDocument  *comics_document,
 		goto out;
 	}
 
+	supported_extensions = get_supported_image_extensions ();
+
 	has_encrypted_files = FALSE;
-	array = g_ptr_array_new ();
+	array = g_ptr_array_sized_new (64);
 
 	while (1) {
 		const char *name;
@@ -123,6 +125,11 @@ comics_document_list (ComicsDocument  *comics_document,
 		}
 
 		name = ev_archive_get_entry_pathname (comics_document->archive);
+		if (!has_supported_extension (name, supported_extensions)) {
+			g_debug ("Not adding unsupported file '%s' to the list of files in the comics", name);
+			continue;
+		}
+
 		if (ev_archive_get_entry_is_encrypted (comics_document->archive)) {
 			g_debug ("Not adding encrypted file '%s' to the list of files in the comics", name);
 			has_encrypted_files = TRUE;
@@ -135,6 +142,8 @@ comics_document_list (ComicsDocument  *comics_document,
 
 	if (array->len == 0) {
 		g_ptr_array_free (array, TRUE);
+		array = NULL;
+
 		if (has_encrypted_files) {
 			g_set_error_literal (error,
 					     EV_DOCUMENT_ERROR,
@@ -146,14 +155,11 @@ comics_document_list (ComicsDocument  *comics_document,
 					     EV_DOCUMENT_ERROR_INVALID,
 					     _("No files in archive"));
 		}
-	} else {
-		g_ptr_array_add (array, NULL);
-		ret = (char **) g_ptr_array_free (array, FALSE);
 	}
 
 out:
 	ev_archive_reset (comics_document->archive);
-	return ret;
+	return array;
 }
 
 /* This function chooses the archive decompression support
@@ -219,10 +225,7 @@ comics_document_load (EvDocument *document,
 		      GError    **error)
 {
 	ComicsDocument *comics_document = COMICS_DOCUMENT (document);
-	GSList *supported_extensions;
 	gchar *mime_type;
-	gchar **cb_files, *cb_file;
-	int i;
 	GError *err = NULL;
 	GFile *file;
 
@@ -251,33 +254,10 @@ comics_document_load (EvDocument *document,
 	g_free (mime_type);
 
 	/* Get list of files in archive */
-	cb_files = comics_document_list (comics_document, error);
-	if (!cb_files)
+	comics_document->page_names = comics_document_list (comics_document, error);
+	if (!comics_document->page_names)
 		return FALSE;
 
-        comics_document->page_names = g_ptr_array_sized_new (64);
-
-	supported_extensions = get_supported_image_extensions ();
-	for (i = 0; cb_files[i] != NULL; i++) {
-		cb_file = cb_files[i];
-		if (has_supported_extension (cb_file, supported_extensions)) {
-                        g_ptr_array_add (comics_document->page_names,
-                                         g_strdup (cb_file));
-		}
-	}
-	g_strfreev (cb_files);
-	g_slist_foreach (supported_extensions, (GFunc) g_free, NULL);
-	g_slist_free (supported_extensions);
-
-	if (comics_document->page_names->len == 0) {
-		g_set_error (error,
-			     EV_DOCUMENT_ERROR,
-			     EV_DOCUMENT_ERROR_INVALID,
-			     _("No images found in archive %s"),
-			     uri);
-		return FALSE;
-	}
-
         /* Now sort the pages */
         g_ptr_array_sort (comics_document->page_names, sort_page_names);
 
-- 
2.13.0
----------------------------------------
From bfeafcccba3587fa9915ca2ade3b8be5710e42d8 Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jul 2017 17:32:24 +0200
Subject: [PATCH] shell: Fix typo in comment

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 shell/ev-window.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/shell/ev-window.c b/shell/ev-window.c
index 93cb7c62..46cc5c28 100644
--- a/shell/ev-window.c
+++ b/shell/ev-window.c
@@ -1723,7 +1723,7 @@ ev_window_load_job_cb (EvJob *job,
 		password = ev_keyring_lookup_password (ev_window->priv->uri);
 		if (password) {
 			if (job_load->password && strcmp (password, job_load->password) == 0) {
-				/* Password in kering is wrong */
+				/* Password in keyring is wrong */
 				ev_job_load_set_password (job_load, NULL);
 				/* FIXME: delete password from keyring? */
 			} else {
-- 
2.13.0
----------------------------------------
From 1703978aab3c916100797845608050bb8e40f856 Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Tue, 18 Jul 2017 17:39:19 +0200
Subject: [PATCH] shell: Fix crash when comics says it's encrypted

Returning an EV_DOCUMENT_ERROR_ENCRYPTED error to the shell should only
trigger a password prompt if the document supports the
EvDocumentSecurity to pass the password to the loader.

https://bugzilla.gnome.org/show_bug.cgi?id=784963
---
 shell/ev-window.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/shell/ev-window.c b/shell/ev-window.c
index 46cc5c28..6509b51d 100644
--- a/shell/ev-window.c
+++ b/shell/ev-window.c
@@ -1714,7 +1714,8 @@ ev_window_load_job_cb (EvJob *job,
 		return;
 	}
 
-	if (g_error_matches (job->error, EV_DOCUMENT_ERROR, EV_DOCUMENT_ERROR_ENCRYPTED)) {
+	if (g_error_matches (job->error, EV_DOCUMENT_ERROR, EV_DOCUMENT_ERROR_ENCRYPTED) &&
+	    EV_IS_DOCUMENT_SECURITY (document)) {
 		gchar *password;
 		
 		setup_view_from_metadata (ev_window);
-- 
2.13.0
----------------------------------------
