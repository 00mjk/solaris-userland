Fix CVE-2017-9406 : memory leak in the function gmalloc in gmem.cc

For more information see:
https://security-tracker.debian.org/tracker/CVE-2017-9406

Upstream commit at:
https://cgit.freedesktop.org/poppler/poppler/commit/?id=278439531b13b0b047dbe3a75aa3f1b3407c8bd4

Fix CVE-2017-9408 : memory leak in Object::initArray

For more information see:
https://security-tracker.debian.org/tracker/CVE-2017-9408

Upstream commit at:
https://cgit.freedesktop.org/poppler/poppler/commit/?id=b21b041f7948680c03109f0c404400a9dbc4544c

--- poppler-0.54.0/poppler/XRef.cc.orig	2017-06-05 09:23:56.026283719 +0000
+++ poppler-0.54.0/poppler/XRef.cc	2017-06-05 10:06:25.800638944 +0000
@@ -1144,13 +1144,16 @@
 }
 
 Object *XRef::getCatalog(Object *catalog) {
-  Object *obj = fetch(rootNum, rootGen, catalog);
-  if (obj->isDict()) {
-    return obj;
+  fetch(rootNum, rootGen, catalog);
+  if (catalog->isDict()) {
+    return catalog;
   }
   GBool wasReconstructed = false;
-  GBool ok = constructXRef(&wasReconstructed, gTrue);
-  return (ok) ? fetch(rootNum, rootGen, catalog) : obj;
+  if (constructXRef(&wasReconstructed, gTrue)) {
+    catalog->free();
+    fetch(rootNum, rootGen, catalog);
+  }
+  return catalog;
 }
 
 Object *XRef::fetch(int num, int gen, Object *obj, int recursion) {
@@ -1606,8 +1609,7 @@
      str->makeSubStream(offset, gFalse, 20, &obj)), gTrue);
 
   Object obj1, obj2, obj3;
-  if (((parser.getObj(&obj1)->isInt()) ||
-       parser.getObj(&obj1)->isInt64()) &&
+  if (((parser.getObj(&obj1)->isInt()) || obj1.isInt64()) &&
       (parser.getObj(&obj2)->isInt()) &&
       (parser.getObj(&obj3)->isCmd("n") || obj3.isCmd("f"))) {
     if (obj1.isInt64())
