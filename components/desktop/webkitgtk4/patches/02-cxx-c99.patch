Remove obsolete workarounds for previous Solaris problems with these
functions and C++ programs.

Also, refer to the related math functions using the fully-qualified
namespace; see upstream bug:
  143884 - Prefix isnan() with std 
  https://bugs.webkit.org/show_bug.cgi?id=143884

--- webkitgtk-2.8.3/Source/WTF/wtf/MathExtras.h	2015-05-15 01:41:50.000000000 -0700
+++ webkitgtk-2.8.3/Source/WTF/wtf/MathExtras.h	2015-07-09 19:23:03.451197962 -0700
@@ -34,10 +34,6 @@
 #include <stdlib.h>
 #include <wtf/StdLibExtras.h>
 
-#if OS(SOLARIS)
-#include <ieeefp.h>
-#endif
-
 #if OS(OPENBSD)
 #include <sys/types.h>
 #include <machine/ieee.h>
@@ -84,24 +80,6 @@
 
 #endif
 
-#if OS(SOLARIS)
-
-namespace std {
-
-#ifndef isfinite
-inline bool isfinite(double x) { return finite(x) && !isnand(x); }
-#endif
-#ifndef signbit
-inline bool signbit(double x) { return copysign(1.0, x) < 0; }
-#endif
-#ifndef isinf
-inline bool isinf(double x) { return !finite(x) && !isnand(x); }
-#endif
-
-} // namespace std
-
-#endif
-
 #if OS(OPENBSD)
 
 namespace std {
--- webkitgtk-2.8.3/Source/JavaScriptCore/API/tests/testapi.c	2015-05-15 01:41:50.000000000 -0700
+++ webkitgtk-2.8.3/Source/JavaScriptCore/API/tests/testapi.c	2015-07-09 20:14:37.933449207 -0700
@@ -72,7 +72,7 @@
     // FIXME <rdar://4668451> - On i386 the isnan(double) macro tries to map to the isnan(float) function,
     // causing a build break with -Wshorten-64-to-32 enabled.  The issue is known by the appropriate team.
     // After that's resolved, we can remove these casts
-    if (number != expectedValue && !(isnan((float)number) && isnan((float)expectedValue))) {
+    if (number != expectedValue && !(std::isnan((float)number) && std::isnan((float)expectedValue))) {
         fprintf(stderr, "assertEqualsAsNumber failed: %p, %lf\n", value, expectedValue);
         failed = 1;
     }
@@ -1500,7 +1500,7 @@
     // FIXME <rdar://4668451> - On i386 the isnan(double) macro tries to map to the isnan(float) function,
     // causing a build break with -Wshorten-64-to-32 enabled.  The issue is known by the appropriate team.
     // After that's resolved, we can remove these casts
-    ASSERT(isnan((float)JSValueToNumber(context, jsObjectNoProto, &exception)));
+    ASSERT(std::isnan((float)JSValueToNumber(context, jsObjectNoProto, &exception)));
     ASSERT(exception);
 
     exception = NULL;
--- webkitgtk-2.8.3/Source/WTF/wtf/Stopwatch.h	2015-04-28 03:37:59.000000000 -0700
+++ webkitgtk-2.8.3/Source/WTF/wtf/Stopwatch.h	2015-07-09 20:14:50.495480192 -0700
@@ -44,7 +44,7 @@
 
     double elapsedTime();
 
-    bool isActive() const { return !isnan(m_lastStartTime); }
+    bool isActive() const { return !std::isnan(m_lastStartTime); }
 private:
     Stopwatch() { reset(); }
 
@@ -60,14 +60,14 @@
 
 inline void Stopwatch::start()
 {
-    ASSERT_WITH_MESSAGE(isnan(m_lastStartTime), "Tried to start the stopwatch, but it is already running.");
+    ASSERT_WITH_MESSAGE(std::isnan(m_lastStartTime), "Tried to start the stopwatch, but it is already running.");
 
     m_lastStartTime = monotonicallyIncreasingTime();
 }
 
 inline void Stopwatch::stop()
 {
-    ASSERT_WITH_MESSAGE(!isnan(m_lastStartTime), "Tried to stop the stopwatch, but it is not running.");
+    ASSERT_WITH_MESSAGE(!std::isnan(m_lastStartTime), "Tried to stop the stopwatch, but it is not running.");
 
     m_elapsedTime += monotonicallyIncreasingTime() - m_lastStartTime;
     m_lastStartTime = NAN;
@@ -75,7 +75,7 @@
 
 inline double Stopwatch::elapsedTime()
 {
-    bool shouldSuspend = !isnan(m_lastStartTime);
+    bool shouldSuspend = !std::isnan(m_lastStartTime);
     if (shouldSuspend)
         stop();
 
