From d576113ed8cc2ee78a8ed388bf849b8be261af47 Mon Sep 17 00:00:00 2001
From: David King <amigadave@amigadave.com>
Date: Sat, 31 Dec 2016 21:29:38 +0000
Subject: [PATCH] get-pac-test: Fix overflow test

Rather than checking for EBADF when the socket is closed due to an
overly-large request, check that the sent size differs from the
received. Use a large buffer to ensure that the number of bytes sent are
greater than the kernel TCP receive buffer size, as otherwise the send()
call succeeds even though the bytes were never retrieved from the
socket. Pass the MSG_NOSIGNAL flag (or the SO_NOSIGPIPE socket option)
so that SIGPIPE is not generated when the socket is closed once the
content length has been read.

Close #47
---
 libproxy/test/get-pac-test.cpp | 22 ++++++++++++++++------
 1 file changed, 16 insertions(+), 6 deletions(-)

diff --git a/libproxy/test/get-pac-test.cpp b/libproxy/test/get-pac-test.cpp
index 0fb3e4d..068e5c4 100644
--- a/libproxy/test/get-pac-test.cpp
+++ b/libproxy/test/get-pac-test.cpp
@@ -16,6 +16,11 @@
 
 #include "url.hpp"
 
+// macOS does not define MSG_NOSIGNAL, but uses the SO_NOSIGPIPE option instead
+#ifndef MSG_NOSIGNAL
+#define MSG_NOSIGNAL 0
+#endif
+
 using namespace libproxy;
 
 class TestServer {
@@ -115,6 +120,11 @@ class TestServer {
 			csock = accept(m_sock, (sockaddr*) &addr, &len);
 			assert(csock > 0);
 
+#ifdef SO_NOSIGPIPE
+			int i = 1;
+			setsockopt(c_sock, SOL_SOCKET, SO_NOSIGPIPE, &i, sizeof(i));
+#endif
+
 			// Read request
 			ptr = buffer;
 			do {
@@ -188,20 +198,20 @@ done:
 		void sendOverflow(int csock)
 		{
 			int ret;
-			int size = 500000;
+			int size = 50000000; // Must be larger than the kernel TCP receive buffer
 			char *buf = new char[size];
 			memset(buf, 1, size);
 
 			const char *basic =
 				"HTTP/1.1 200 OK\n" \
 				"Content-Type: text/plain\n" \
-				"Content-Length: 500000\n" \
+				"Content-Length: 50000000\n" \
 				"\n";
-			ret = send(csock, (void*)basic, strlen(basic), 0);
+			ret = send(csock, (void*)basic, strlen(basic), MSG_NOSIGNAL);
 			assert(ret == strlen(basic));
-			ret = send(csock, (void*)buf, size, 0);
-			if (!(errno == EBADF))
-				abort(); // Test failed... the socket did not close on us
+			ret = send(csock, (void*)buf, size, MSG_NOSIGNAL);
+			if (ret == size)
+				abort(); // Test failed... the socket should not accept the whole buffer
 			delete[] buf;
 			shutdown(csock, SHUT_RDWR);
 		}
-- 
2.7.4

