The strcasestr function is not available in Solaris 10, so this replaces it
with an alternate function. This is not necessary for Solaris 12+.
The 'uname' part is necessary because the uname() function returns a
non-negative value.

--- comm-esr31/mozilla/widget/xpwidgets/GfxInfoX11.cpp.orig	2015-06-04 17:42:51.546213832 -0700
+++ comm-esr31/mozilla/widget/xpwidgets/GfxInfoX11.cpp	2015-06-04 17:42:51.548646551 -0700
@@ -12,6 +12,7 @@
 #include <sys/utsname.h>
 #include "nsCRTGlue.h"
 #include "prenv.h"
+#include "plstr.h"
 
 #include "GfxInfoX11.h"
 
@@ -135,7 +136,7 @@
     // only useful for Linux kernel version check for FGLRX driver.
     // assumes X client == X server, which is sad.
     struct utsname unameobj;
-    if (!uname(&unameobj))
+    if (uname(&unameobj) >= 0)
     {
       mOS.Assign(unameobj.sysname);
       mOSRelease.Assign(unameobj.release);
@@ -210,13 +211,13 @@
         // with Mesa, the version string contains "Mesa major.minor" and that's all the version information we get:
         // there is no actual driver version info.
         whereToReadVersionNumbers = Mesa_in_version_string + strlen("Mesa");
-        if (strcasestr(mVendor.get(), "nouveau"))
+        if (PL_strcasestr(mVendor.get(), "nouveau"))
             mIsNouveau = true;
-        if (strcasestr(mRenderer.get(), "intel")) // yes, intel is in the renderer string
+        if (PL_strcasestr(mRenderer.get(), "intel")) // yes, intel is in the renderer string
             mIsIntel = true;
-        if (strcasestr(mRenderer.get(), "llvmpipe"))
+        if (PL_strcasestr(mRenderer.get(), "llvmpipe"))
             mIsLlvmpipe = true;
-        if (strcasestr(mRenderer.get(), "software rasterizer"))
+        if (PL_strcasestr(mRenderer.get(), "software rasterizer"))
             mIsOldSwrast = true;
     } else if (strstr(mVendor.get(), "NVIDIA Corporation")) {
         mIsNVIDIA = true;
