This patch includes support for the Solaris netlink.

This patch has not been proposed upstream because we are not yet
proposing Solaris specific requirements upstream.

diff --git a/lib/netlink-protocol.h b/lib/netlink-protocol.h
index a7b9a65fa..106b5a6db 100644
--- a/lib/netlink-protocol.h
+++ b/lib/netlink-protocol.h
@@ -33,7 +33,31 @@
 #include <sys/socket.h>
 #include "util.h"
 
+#ifdef __sun
+
+/* Accommodate older socket.h on build machines */
+#ifndef AF_NETLINK
+#define	AF_NETLINK	34		/* Netlink socket */
+#define SOL_NETLINK     0xfffb          /* options for netlink sockets */
+#endif
+
+struct sockaddr_nl {
+        sa_family_t     nl_family;      /* AF_NETLINK   */
+        unsigned short  nl_pad;         /* zero         */
+        uint32_t        nl_pid;         /* port ID      */
+        uint32_t        nl_groups;      /* multicast groups mask */
+};
+
+/*
+ * Solaris has netlink in the kernel, but no headers. So undefine
+ * to pick up the headers from local source
+ */
+#undef HAVE_NETLINK
+
+#endif /* __sun */
+
 #ifdef HAVE_NETLINK
+
 #include <linux/netlink.h>
 #include <linux/genetlink.h>
 
@@ -62,7 +86,11 @@
 
 #define NLMSG_MIN_TYPE          0x10
 
+#ifdef __sun
+#define MAX_LINKS               34
+#else
 #define MAX_LINKS               32
+#endif
 
 struct nlmsghdr {
     uint32_t nlmsg_len;
@@ -144,6 +172,11 @@ enum {
 #define CTRL_ATTR_OP_MAX (__CTRL_ATTR_OP_MAX - 1)
 #endif  /* !HAVE_NETLINK */
 
+#ifdef __sun
+/* Redefine it to execute netlink related code */
+#define HAVE_NETLINK 1
+#endif  /* __sun */
+
 /* These were introduced all together in 2.6.24. */
 #ifndef NLA_TYPE_MASK
 #define NLA_F_NESTED        (1 << 15)
diff --git a/lib/netlink-socket.c b/lib/netlink-socket.c
index 7502764de..a4e0080b6 100644
--- a/lib/netlink-socket.c
+++ b/lib/netlink-socket.c
@@ -44,10 +44,13 @@ COVERAGE_DEFINE(netlink_received);
 COVERAGE_DEFINE(netlink_recv_jumbo);
 COVERAGE_DEFINE(netlink_sent);
 
+#ifndef __sun
+/* This comes from socket.h for Solaris, if not leave it undefined */
 /* Linux header file confusion causes this to be undefined. */
 #ifndef SOL_NETLINK
 #define SOL_NETLINK 270
 #endif
+#endif /* !__sun */
 
 /* A single (bad) Netlink message can in theory dump out many, many log
  * messages, so the burst size is set quite high here to avoid missing useful
@@ -103,13 +106,18 @@ nl_sock_create(int protocol, struct nl_sock **sockp)
     struct sockaddr_nl local, remote;
 #endif
     socklen_t local_size;
+#ifndef	__sun
     int rcvbuf;
+#endif	/* !__sun */
     int retval = 0;
 
     if (ovsthread_once_start(&once)) {
         int save_errno = errno;
         errno = 0;
 
+#ifdef __sun
+        max_iovs = MAX_IOVS;
+#else
         max_iovs = sysconf(_SC_UIO_MAXIOV);
         if (max_iovs < _XOPEN_IOV_MAX) {
             if (max_iovs == -1 && errno) {
@@ -119,6 +127,7 @@ nl_sock_create(int protocol, struct nl_sock **sockp)
         } else if (max_iovs > MAX_IOVS) {
             max_iovs = MAX_IOVS;
         }
+#endif /* __sun */
 
         errno = save_errno;
         ovsthread_once_done(&once);
@@ -159,7 +168,9 @@ nl_sock_create(int protocol, struct nl_sock **sockp)
     sock->protocol = protocol;
     sock->next_seq = 1;
 
+#ifndef	__sun
     rcvbuf = 1024 * 1024;
+#endif	/* !__sun */
 #ifdef _WIN32
     sock->rcvbuf = rcvbuf;
     retval = get_sock_pid_from_kernel(sock);
@@ -171,6 +182,7 @@ nl_sock_create(int protocol, struct nl_sock **sockp)
         goto error;
     }
 #else
+#ifndef __sun
     if (setsockopt(sock->fd, SOL_SOCKET, SO_RCVBUFFORCE,
                    &rcvbuf, sizeof rcvbuf)) {
         /* Only root can use SO_RCVBUFFORCE.  Everyone else gets EPERM.
@@ -180,6 +192,7 @@ nl_sock_create(int protocol, struct nl_sock **sockp)
                          "(%s)", rcvbuf, ovs_strerror(errno));
         }
     }
+#endif /* !__sun */
 
     retval = get_socket_rcvbuf(sock->fd);
     if (retval < 0) {
@@ -653,7 +666,9 @@ nl_sock_recv__(struct nl_sock *sock, struct ofpbuf *buf, bool wait)
         retval = recvmsg(sock->fd, &msg, wait ? 0 : MSG_DONTWAIT);
 #endif
         error = (retval < 0 ? errno
+#ifndef __sun
                  : retval == 0 ? ECONNRESET /* not possible? */
+#endif /* !__sun */
                  : nlmsghdr->nlmsg_len != UINT32_MAX ? 0
                  : retval);
     } while (error == EINTR);
@@ -972,7 +987,7 @@ nl_sock_transact_multiple(struct nl_sock *sock,
         /* Batch up to 'max_batch_count' transactions.  But cap it at about a
          * page of requests total because big skbuffs are expensive to
          * allocate in the kernel.  */
-#if defined(PAGESIZE)
+#if defined(PAGESIZE) && !defined(__sun)
         enum { MAX_BATCH_BYTES = MAX(1, PAGESIZE - 512) };
 #else
         enum { MAX_BATCH_BYTES = 4096 - 512 };
