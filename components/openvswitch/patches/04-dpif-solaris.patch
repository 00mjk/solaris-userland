This patch includes support for the Solaris dpif.

This patch has not been proposed upstream because we are not yet
proposing Solaris specific requirements upstream.

diff --git a/lib/dpif-netlink.c b/lib/dpif-netlink.c
index a39faa230..d9c880a1b 100644
--- a/lib/dpif-netlink.c
+++ b/lib/dpif-netlink.c
@@ -23,12 +23,20 @@
 #include <fcntl.h>
 #include <inttypes.h>
 #include <net/if.h>
+#ifdef __sun
+#include "solaris/pkt_sched.h"
+#else
 #include <linux/types.h>
 #include <linux/pkt_sched.h>
+#endif /* __sun */
 #include <poll.h>
 #include <stdlib.h>
 #include <strings.h>
+#ifdef __sun
+#include <port.h>
+#else
 #include <sys/epoll.h>
+#endif /* __sun */
 #include <sys/stat.h>
 #include <unistd.h>
 
@@ -39,6 +47,9 @@
 #include "fat-rwlock.h"
 #include "netdev.h"
 #include "netdev-linux.h"
+#ifdef __sun
+#include "netdev-solaris.h"
+#endif
 #include "netdev-vport.h"
 #include "netlink-conntrack.h"
 #include "netlink-notifier.h"
@@ -57,6 +68,14 @@
 #include "openvswitch/vlog.h"
 
 VLOG_DEFINE_THIS_MODULE(dpif_netlink);
+
+#ifdef __sun
+#ifdef IFNAMSIZ
+#undef IFNAMSIZ
+#define IFNAMSIZ MAXLINKNAMESPECIFIER
+#endif
+#endif
+
 #ifdef _WIN32
 enum { WINDOWS = 1 };
 #else
@@ -159,18 +178,40 @@ struct dpif_windows_vport_sock {
 };
 #endif
 
+/*
+ * epoll() is OS/platform specific, it's currently supported
+ * by Linux, FreeBSD, NetBSD. The MacOS and OpenBSD come with
+ * kqueue, Solaris has event port (port_create(3C)). Windows
+ * come with events (?Wsock events?).
+ *
+ * If OVS wants to be multiplaform it must either kill epoll and use libevent
+ * [1], which is truly portable or make automake/autoconf smarter to detect
+ * epoll() availability e.g. introducing HAVE_EPOLL, HAVE_EVENT_PORT, etc.
+ *
+ * The current code is kind of 'work in progress'. We opt for the most
+ * straightforward fix, which is to get it working with port_get(3C).
+ * The plan is to contribute our fix to upstream.
+ *
+ * There is no time to fiddle with libevent currently.
+ *
+ * [1] http://libevent.org
+ */
 struct dpif_handler {
     struct dpif_channel *channels;/* Array of channels for each handler. */
-    struct epoll_event *epoll_events;
-    int epoll_fd;                 /* epoll fd that includes channel socks. */
-    int n_events;                 /* Num events returned by epoll_wait(). */
-    int event_offset;             /* Offset into 'epoll_events'. */
-
-#ifdef _WIN32
+#ifdef  __sun
+    int port_fd;            /* file descriptor associated with port */
+    port_event_t *pevs;     /* array of port events */
+    uint_t pevs_sz;         /* array size */
+#elif _WIN32
     /* Pool of sockets. */
     struct dpif_windows_vport_sock *vport_sock_pool;
     size_t last_used_pool_idx; /* Index to aid in allocating a
                                   socket in the pool to a port. */
+#else
+    struct epoll_event *epoll_events;
+    int epoll_fd;                 /* epoll fd that includes channel socks. */
+    int n_events;                 /* Num events returned by epoll_wait(). */
+    int event_offset;             /* Offset into 'epoll_events'. */
 #endif
 };
 
@@ -517,6 +558,103 @@ vport_get_pids(struct dpif_netlink *dpif, uint32_t port_idx,
     return true;
 }
 
+#ifdef  __sun
+static int
+vport_add_channels(struct dpif_netlink *dpif, odp_port_t port_no,
+                   struct nl_sock **socksp)
+{
+    uint32_t port_idx = odp_to_u32(port_no);
+    size_t i, j;
+    int error;
+    struct dpif_handler *handler;
+
+    if (dpif->handlers == NULL) {
+        return 0;
+    }
+
+    /* We assume that the datapath densely chooses port numbers, which can
+     * therefore be used as an index into 'channels' and 'epoll_events' of
+     * 'dpif->handler'. */
+    if (port_idx >= dpif->uc_array_size) {
+        uint32_t new_size = port_idx + 1;
+
+        if (new_size > MAX_PORTS) {
+            VLOG_WARN_RL(&error_rl, "%s: datapath port %"PRIu32" too big",
+                         dpif_name(&dpif->dpif), port_no);
+            return EFBIG;
+        }
+
+        for (i = 0; i < dpif->n_handlers; i++) {
+            handler = &dpif->handlers[i];
+
+            handler->channels = xrealloc(handler->channels,
+                new_size * sizeof *handler->channels);
+
+            handler->pevs = xrealloc(handler->pevs,
+                new_size * sizeof (port_event_t));
+            handler->pevs_sz = new_size;
+
+            for (j = dpif->uc_array_size; j < new_size; j++) {
+                handler->channels[j].sock = NULL;
+            }
+
+        }
+
+        dpif->uc_array_size = new_size;
+    }
+
+    for (i = 0; i < dpif->n_handlers; i++) {
+        handler = &dpif->handlers[i];
+        error = port_associate(handler->port_fd, PORT_SOURCE_FD,
+        nl_sock_fd(socksp[i]), POLLIN, (void *)(uintptr_t)port_idx);
+        if (error != 0) {
+            error = errno;
+            goto error;
+        }
+        dpif->handlers[i].channels[port_idx].sock = socksp[i];
+        dpif->handlers[i].channels[port_idx].last_poll = LLONG_MIN;
+    }
+
+    return 0;
+
+error:
+    for (j = 0; j < i; j++) {
+        (void) port_dissociate(handler->port_fd, PORT_SOURCE_FD,
+            nl_sock_fd(socksp[j]));
+        dpif->handlers[j].channels[port_idx].sock = NULL;
+    }
+
+    return error;
+}
+
+static void
+vport_del_channels(struct dpif_netlink *dpif, odp_port_t port_no)
+{
+    uint32_t port_idx = odp_to_u32(port_no);
+    size_t i;
+
+    if (!dpif->handlers || port_idx >= dpif->uc_array_size) {
+        return;
+    }
+
+    /* Since the sock can only be assigned in either all or none
+     * of "dpif->handlers" channels, the following check would
+     * suffice. */
+    if (!dpif->handlers[0].channels[port_idx].sock) {
+        return;
+    }
+
+    for (i = 0; i < dpif->n_handlers; i++) {
+        struct dpif_handler *handler = &dpif->handlers[i];
+        (void) port_dissociate(handler->port_fd, PORT_SOURCE_FD,
+            nl_sock_fd(handler->channels[port_idx].sock));
+        nl_sock_destroy(handler->channels[port_idx].sock);
+        handler->channels[port_idx].sock = NULL;
+    }
+}
+#endif  /* __sun */
+
+#ifdef  HAVE_EPOLL
 static int
 vport_add_channels(struct dpif_netlink *dpif, odp_port_t port_no,
                    struct nl_sock **socksp)
@@ -619,6 +757,7 @@ vport_del_channels(struct dpif_netlink *dpif, odp_port_t port_no)
         handler->event_offset = handler->n_events = 0;
     }
 }
+#endif  /* HAVE_EPOLL */
 
 static void
 destroy_all_channels(struct dpif_netlink *dpif)
@@ -657,7 +796,15 @@ destroy_all_channels(struct dpif_netlink *dpif)
         struct dpif_handler *handler = &dpif->handlers[i];
 
         dpif_netlink_handler_uninit(handler);
+#ifdef  HAVE_EPOLL
         free(handler->epoll_events);
+#endif  /* HAVE_EPOLL */
+/* XXX-HAVE_EVENT_PORT */
+#ifdef  __sun
+        free(handler->pevs);
+        handler->pevs = NULL;
+        handler->pevs_sz = 0;
+#endif  /* __sun */
         free(handler->channels);
     }
 
@@ -820,7 +967,9 @@ dpif_netlink_port_add__(struct dpif_netlink *dpif, struct netdev *netdev,
     struct nl_sock **socksp = NULL;
     uint32_t *upcall_pids;
     int error = 0;
-
+#ifdef __sun
+    const char *dlname;
+#endif
     if (dpif->handlers) {
         socksp = vport_create_socksp(dpif, &error);
         if (!socksp) {
@@ -839,15 +988,33 @@ dpif_netlink_port_add__(struct dpif_netlink *dpif, struct netdev *netdev,
         vport_del_socksp(dpif, socksp);
         return EINVAL;
     }
+#ifdef  __sun
+    if (request.type != OVS_VPORT_TYPE_NETDEV && request.type != OVS_VPORT_TYPE_VXLAN &&
+		request.type != OVS_VPORT_TYPE_INTERNAL) {
+	VLOG_ERR("dpif_netlink_port_add__: adding unknown port type");
+	return (EINVAL);
+    }
+
+    /*
+     * The device name for the internal ports is the implicit VNIC name.
+     * For the other port types, their device names and netdev names
+     * are equivalent.
+     */
+    if (request.type == OVS_VPORT_TYPE_INTERNAL)
+	dlname = netdev_solaris_get_name(netdev);
+    else
+	dlname = name;
+
+    request.name = dlname;
+    VLOG_DBG("dpif_netlink_port_add__ %s (%s) type %s port_no %d vtype %d",
+	name, dlname, type, *port_nop, request.type);
+#else
     request.name = name;
 
     if (request.type == OVS_VPORT_TYPE_NETDEV) {
-#ifdef _WIN32
-        /* XXX : Map appropiate Windows handle */
-#else
         netdev_linux_ethtool_set_flag(netdev, ETH_FLAG_LRO, "LRO", false);
-#endif
     }
+#endif
 
     tnl_cfg = netdev_get_tunnel_config(netdev);
     if (tnl_cfg && (tnl_cfg->dst_port != 0 || tnl_cfg->exts)) {
@@ -968,12 +1135,42 @@ dpif_netlink_port_query__(const struct dpif_netlink *dpif, odp_port_t port_no,
     struct dpif_netlink_vport reply;
     struct ofpbuf *buf;
     int error;
+#ifdef __sun
+    char vnicname[MAXLINKNAMELEN];
+    char devname[MAXLINKNAMELEN];
+    struct netdev *netdev;
+    extern struct netdev *netdev_from_name(const char *name);
+    enum ovs_vport_type port_type = OVS_VPORT_TYPE_UNSPEC;
+    extern enum ovs_vport_type netdev_to_ovs_vport_type(const struct netdev *netdev);
+#endif
 
     dpif_netlink_vport_init(&request);
     request.cmd = OVS_VPORT_CMD_GET;
     request.dp_ifindex = dpif->dp_ifindex;
     request.port_no = port_no;
+
+#ifdef __sun
+
+    if (port_name != NULL && (netdev = netdev_from_name(port_name)) != NULL) {
+        port_type = netdev_to_ovs_vport_type(netdev);
+        netdev_close(netdev);
+    }
+
+    if (port_type == OVS_VPORT_TYPE_INTERNAL) {
+        error = devname_to_internal(port_name, vnicname, sizeof (vnicname));
+        if (error != 0) {
+	    VLOG_ERR("Failed to generate vnic name for %s", port_name);
+	    return (error);
+        }
+        VLOG_DBG("dpif_netlink_port_query__: port_name = %s, vnicname = %s",
+	    port_name, vnicname);
+        request.name = vnicname;
+    } else {
+        request.name = port_name;
+    }
+#else
     request.name = port_name;
+#endif
 
     error = dpif_netlink_vport_transact(&request, &reply, &buf);
     if (!error) {
@@ -982,7 +1179,18 @@ dpif_netlink_port_query__(const struct dpif_netlink *dpif, odp_port_t port_no,
              * other than 'dpif', but the caller wants to know about 'dpif'. */
             error = ENODEV;
         } else if (dpif_port) {
+#ifdef __sun
+	    if (reply.type == OVS_VPORT_TYPE_INTERNAL) {
+		(void) internal_to_devname(reply.name, devname, sizeof (devname));
+		dpif_port->name = xstrdup(devname);
+		VLOG_DBG("dpif_netlink_port_query__: reply name = %s, dpif name = %s",
+		     reply.name, dpif_port->name);
+	    } else {
+                dpif_port->name = xstrdup(reply.name);
+	    }
+#else
             dpif_port->name = xstrdup(reply.name);
+#endif
             dpif_port->type = xstrdup(get_vport_type(&reply));
             dpif_port->port_no = reply.port_no;
         }
@@ -1125,13 +1333,25 @@ dpif_netlink_port_dump_next(const struct dpif *dpif_, void *state_,
     struct dpif_netlink_port_state *state = state_;
     struct dpif_netlink_vport vport;
     int error;
+#ifdef __sun
+    char devname[MAXLINKNAMELEN];
+#endif
 
     error = dpif_netlink_port_dump_next__(dpif, &state->dump, &vport,
                                           &state->buf);
     if (error) {
         return error;
     }
+#ifdef __sun
+    if (vport.type == OVS_VPORT_TYPE_INTERNAL) {
+	(void) internal_to_devname(vport.name, devname, sizeof (devname));
+	dpif_port->name = xstrdup(devname);
+    } else {
+	dpif_port->name = CONST_CAST(char *, vport.name);
+    }
+#else
     dpif_port->name = CONST_CAST(char *, vport.name);
+#endif
     dpif_port->type = CONST_CAST(char *, get_vport_type(&vport));
     dpif_port->port_no = vport.port_no;
     return 0;
@@ -1192,6 +1412,14 @@ dpif_netlink_port_poll(const struct dpif *dpif_, char **devnamep)
                     && (vport.cmd == OVS_VPORT_CMD_NEW
                         || vport.cmd == OVS_VPORT_CMD_DEL
                         || vport.cmd == OVS_VPORT_CMD_SET)) {
+#ifdef __sun
+                    char devname[MAXLINKNAMELEN];
+
+		    if (vport.type == OVS_VPORT_TYPE_INTERNAL) {
+			(void) internal_to_devname(vport.name, devname, sizeof (devname));
+                        vport.name = xstrdup(devname);
+                    }
+#endif
                     VLOG_DBG("port_changed: dpif:%s vport:%s cmd:%"PRIu8,
                              dpif->dpif.full_name, vport.name, vport.cmd);
                     if (vport.cmd == OVS_VPORT_CMD_DEL && dpif->handlers) {
@@ -1730,7 +1958,7 @@ dpif_netlink_operate(struct dpif *dpif_, struct dpif_op **ops, size_t n_ops)
     }
 }
 
-#if _WIN32
+#ifdef _WIN32
 static void
 dpif_netlink_handler_uninit(struct dpif_handler *handler)
 {
@@ -1742,8 +1970,26 @@ dpif_netlink_handler_init(struct dpif_handler *handler)
 {
     return vport_create_sock_pool(handler);
 }
-#else
+#endif  /* _WIN32 */
+
+/* XXX-HAVE_EVENT_PORT */
+#ifdef  __sun
+static int
+dpif_netlink_handler_init(struct dpif_handler *handler)
+{
+    handler->port_fd = port_create();
+    return handler->port_fd < 0 ? errno : 0;
+}
 
+static void
+dpif_netlink_handler_uninit(struct dpif_handler *handler)
+{
+    close(handler->port_fd);
+    handler->port_fd = -1;
+}
+#endif  /* __sun */
+
+#ifdef  HAVE_EPOLL
 static int
 dpif_netlink_handler_init(struct dpif_handler *handler)
 {
@@ -1756,7 +2002,7 @@ dpif_netlink_handler_uninit(struct dpif_handler *handler)
 {
     close(handler->epoll_fd);
 }
-#endif
+#endif  /* HAVE_EPOLL */
 
 /* Synchronizes 'channels' in 'dpif->handlers'  with the set of vports
  * currently in 'dpif' in the kernel, by adding a new set of channels for
@@ -1803,11 +2049,13 @@ dpif_netlink_refresh_channels(struct dpif_netlink *dpif, uint32_t n_handlers)
         dpif->n_handlers = n_handlers;
     }
 
+#ifdef  HAVE_EPOLL
     for (i = 0; i < n_handlers; i++) {
         struct dpif_handler *handler = &dpif->handlers[i];
 
         handler->event_offset = handler->n_events = 0;
     }
+#endif  /* HAVE_EPOLL */
 
     keep_channels_nbits = dpif->uc_array_size;
     keep_channels = bitmap_allocate(keep_channels_nbits);
@@ -1947,6 +2195,10 @@ static int
 dpif_netlink_queue_to_priority(const struct dpif *dpif OVS_UNUSED,
                              uint32_t queue_id, uint32_t *priority)
 {
+#ifdef __sun
+	*priority = queue_id;
+	return 0;
+#endif /* __sun */
     if (queue_id < 0xf000) {
         *priority = TC_H_MAKE(1 << 16, queue_id + 1);
         return 0;
@@ -2084,7 +2336,9 @@ dpif_netlink_recv_windows(struct dpif_netlink *dpif, uint32_t handler_id,
 
     return EAGAIN;
 }
-#else
+#endif
+
+#ifdef  HAVE_EPOLL
 static int
 dpif_netlink_recv__(struct dpif_netlink *dpif, uint32_t handler_id,
                     struct dpif_upcall *upcall, struct ofpbuf *buf)
@@ -2159,7 +2413,214 @@ dpif_netlink_recv__(struct dpif_netlink *dpif, uint32_t handler_id,
 
     return EAGAIN;
 }
-#endif
+#endif  /* HAVE_EPOLL */
+
+/* XXX-HAVE_EVENT_PORT */
+#ifdef  __sun
+static int
+dpif_netlink_recv_sun(struct dpif_netlink *dpif, uint32_t handler_id,
+                    struct dpif_upcall *upcall, struct ofpbuf *buf)
+    OVS_REQ_RDLOCK(dpif->upcall_lock)
+{
+    struct dpif_handler *handler;
+    uint_t active, expecting;
+    int retval;
+    struct dpif_channel *ch;
+    uint_t  i, j;
+    timespec_t  no_block;
+    int error, old_error, old_errno;
+    int dp_ifindex;
+    int attempt;
+    uint64_t port_idx;
+
+    bzero(&no_block, sizeof (timespec_t));
+
+    if (!dpif->handlers || handler_id >= dpif->n_handlers) {
+        return EAGAIN;
+    }
+
+    handler = &dpif->handlers[handler_id];
+    if (handler->pevs_sz == 0) {
+        return EAGAIN;
+    }
+
+    /*
+     * find out how many events are waiting on port.
+     */
+    active = 0;
+    retval = port_getn(handler->port_fd, NULL, 0, &active, &no_block);
+    if (retval != 0) {
+        static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(1, 1);
+        VLOG_WARN_RL(&rl, "%s port_getn() failed (%s)", __func__,
+            ovs_strerror(errno));
+        /*
+         *  Note: A failure counter could be introduced to prevent loop?
+         */
+        return EAGAIN;
+    }
+
+    if (active == 0) {
+        /*
+         * We can't tell difference between alert state and case, when
+         * there are no sockets ready for reading on port.
+         *
+         * We pro-actively cancel alert. Not doing so the port will keep
+         * alerting us until we cancel the alert (shall alert ever happen
+         * on port).
+         */
+        VLOG_DBG("%s no data ready\n", __func__);
+        (void) port_alert(handler->port_fd, PORT_ALERT_SET, 0, NULL);
+        /*
+         * Caller will put us to poll()
+         */
+        return EAGAIN;
+    }
+
+    /*
+     * read events
+     */
+    expecting = active;
+    retval = port_getn(handler->port_fd, handler->pevs, handler->pevs_sz,
+        &active, &no_block);
+    if (retval != 0) {
+        static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(1, 1);
+        VLOG_WARN_RL(&rl, "%s port_getn() failed (%s)", __func__,
+            ovs_strerror(errno));
+        /*
+         *  EAGAIN might lead to infinite loop, we should have a failure
+         *  counter here.
+         */
+        return EAGAIN;
+    }
+    if (active == 0) {
+        VLOG_WARN("%s was expecting %d, but got nothing\n", __func__,
+            expecting);
+        /*
+         * This should be recoverable error. It indicates a kind of race
+         * like two consumers competing on same port. We should not hit
+         * it currently.
+         */
+        return EAGAIN;
+    }
+    VLOG_DBG("%s got %d events to handle (expecting %d)\n", __func__,
+        active, expecting);
+
+    for (i = 0; i < active; i++) {
+        port_idx = (uint64_t)handler->pevs[i].portev_user;
+        ch = &handler->channels[port_idx];
+
+        if ((handler->pevs[i].portev_events & POLLIN) != 0) {
+            VLOG_DBG("%s, pevs[i].portev_object: %lu, nl_sock_fd(): %d",
+                __func__, (uint64_t)handler->pevs[i].portev_object,
+            nl_sock_fd(ch->sock));
+        for (attempt = 0; attempt < 50; attempt++) {
+            error = nl_sock_recv(ch->sock, buf, false);
+            if (error == ENOBUFS) {
+                /* ENOBUFS typically means that we've received so many
+                 * packets that the buffer overflowed.  Try again
+                 * immediately because there's almost certainly a packet
+                 * waiting for us.
+                 */
+                report_loss(dpif, ch, port_idx, handler_id);
+                /*
+                 * packet did not fit to buffer, so we are going to read
+                 * another packet, which might wait for us on channel.
+                 * there are like 50 attempts to try out.
+                 */
+                continue;
+            }
+
+            ch->last_poll = time_msec();
+            /*
+             * unlike HAVE_EPOLL guys, we must queue the socket to port here
+             * in order to make sure the port will keep polling it.
+             */
+            old_errno = errno;
+            old_error = error;
+            error = port_associate(handler->port_fd, PORT_SOURCE_FD,
+                nl_sock_fd(ch->sock), POLLIN, (void *)(uintptr_t)port_idx);
+            if (error) {
+                VLOG_DBG("%s, could not re-associate channel sock fd: %d (%s)\n",
+                    __func__, nl_sock_fd(ch->sock), ovs_strerror(errno));
+            }
+
+            if (old_error) {
+                /*
+                 * I think we should report error for channel and move on to
+                 * process next channel. The HAVE_EPOLL guys tend to return
+                 * from function.
+                 */
+                if (old_error != EAGAIN) {
+                    VLOG_ERR("%s, nl_sock_recv() error: %s", __func__,
+                        ovs_strerror(old_errno));
+                }
+
+                /*
+                 * we might need an error counter for errors on channel as
+                 * well.
+                 */
+                break;
+            }
+
+            error = parse_odp_packet(dpif, buf, upcall, &dp_ifindex);
+            if (!error && dp_ifindex == dpif->dp_ifindex) {
+                for (j = i; j < active; j++) {
+                    port_idx = (uint64_t)handler->pevs[j].portev_user;
+                    ch = &handler->channels[port_idx];
+                    VLOG_DBG("%s, re-associating remaining fd: %d\n", __func__,
+                        nl_sock_fd(ch->sock));
+                    error = port_associate(handler->port_fd, PORT_SOURCE_FD,
+                        nl_sock_fd(ch->sock), POLLIN,
+                        (void *)(uintptr_t)port_idx);
+                    if (error) {
+                        VLOG_ERR("%s could not associate fd: %d (%s)\n",
+                            __func__, nl_sock_fd(ch->sock),
+                            ovs_strerror(errno));
+                    }
+                }
+                return 0;
+            } else if (error) {
+                break;
+            }
+        }
+        handler->pevs[i].portev_events &= ~POLLIN;
+    }
+
+    if (handler->pevs[i].portev_events) {
+        VLOG_DBG(
+            "%s port_idx(%lu) indicates %s:%s:%s:%s:%s:%s:%s:%s:%s:%s\n",
+            __func__, port_idx,
+            (handler->pevs[i].portev_events & POLLIN) ?
+                "POLLIN" : "",
+            (handler->pevs[i].portev_events & POLLRDNORM) ?
+                "POLLRDNORM" : "",
+            (handler->pevs[i].portev_events & POLLRDBAND) ?
+                "POLLRDBAND" : "",
+            (handler->pevs[i].portev_events & POLLPRI) ?
+                "POLLPRI" : "",
+            (handler->pevs[i].portev_events & POLLOUT) ?
+                "POLLOUT" : "",
+            (handler->pevs[i].portev_events & POLLWRNORM) ?
+                "POLLWRNORM" : "",
+            (handler->pevs[i].portev_events & POLLWRBAND) ?
+                "POLLWRBAND" : "",
+            (handler->pevs[i].portev_events & POLLERR) ?
+                "POLLERR" : "",
+            (handler->pevs[i].portev_events & POLLHUP) ?
+                "POLLHUP" : "",
+            (handler->pevs[i].portev_events & POLLNVAL) ?
+                "POLLNVAL" : "");
+        if ((handler->pevs[i].portev_events & (POLLERR|POLLHUP)) != 0) {
+            static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(1, 1);
+            VLOG_WARN_RL(&rl, "%s port_idx(%lu) error is unrecoverable",
+                __func__, port_idx);
+                continue;
+            }
+        }
+    }
+    return EAGAIN;
+}
+#endif  /* __sun */
 
 static int
 dpif_netlink_recv(struct dpif *dpif_, uint32_t handler_id,
@@ -2171,9 +2632,14 @@ dpif_netlink_recv(struct dpif *dpif_, uint32_t handler_id,
     fat_rwlock_rdlock(&dpif->upcall_lock);
 #ifdef _WIN32
     error = dpif_netlink_recv_windows(dpif, handler_id, upcall, buf);
-#else
-    error = dpif_netlink_recv__(dpif, handler_id, upcall, buf);
 #endif
+#ifdef  HAVE_EPOLL
+    error = dpif_netlink_recv__(dpif, handler_id, upcall, buf);
+#endif  /* HAVE_EPOLL */
+/* XXX-HAVE_EVENT_PORT */
+#ifdef  __sun
+    error = dpif_netlink_recv_sun(dpif, handler_id, upcall, buf);
+#endif  /* __sun */
     fat_rwlock_unlock(&dpif->upcall_lock);
 
     return error;
@@ -2196,13 +2662,17 @@ dpif_netlink_recv_wait__(struct dpif_netlink *dpif, uint32_t handler_id)
     for (i = 0; i < VPORT_SOCK_POOL_SIZE; i++) {
         nl_sock_wait(sock_pool[i].nl_sock, POLLIN);
     }
-#else
+#endif
     if (dpif->handlers && handler_id < dpif->n_handlers) {
         struct dpif_handler *handler = &dpif->handlers[handler_id];
-
+#ifdef  HAVE_POLL
         poll_fd_wait(handler->epoll_fd, POLLIN);
+#endif  /* HAVE_POLL */
+/* XXX-HAVE_EPOLL */
+#ifdef  __sun
+        poll_fd_wait(handler->port_fd, POLLIN);
+#endif  /* __sun */
     }
-#endif
 }
 
 static void
@@ -2274,6 +2744,7 @@ dpif_netlink_get_datapath_version(void)
     return version_str;
 }
 
+#ifndef __sun
 struct dpif_netlink_ct_dump_state {
     struct ct_dpif_dump_state up;
     struct nl_ct_dump_state *nl_ct_dump;
@@ -2334,6 +2805,7 @@ dpif_netlink_ct_flush(struct dpif *dpif OVS_UNUSED, const uint16_t *zone)
         return nl_ct_flush();
     }
 }
+#endif /* !__sun */
 
 const struct dpif_class dpif_netlink_class = {
     "system",
@@ -2376,10 +2848,17 @@ const struct dpif_class dpif_netlink_class = {
     NULL,                       /* enable_upcall */
     NULL,                       /* disable_upcall */
     dpif_netlink_get_datapath_version, /* get_datapath_version */
+#ifdef __sun
+    NULL,                       /* ct_dump_start */
+    NULL,                       /* ct_dump_next */
+    NULL,                       /* ct_dump_done */
+    NULL                        /* ct_flush */
+#else
     dpif_netlink_ct_dump_start,
     dpif_netlink_ct_dump_next,
     dpif_netlink_ct_dump_done,
     dpif_netlink_ct_flush
+#endif /* __sun */
 };
 
 static int
@@ -2455,6 +2934,10 @@ dpif_netlink_vport_from_ofpbuf(struct dpif_netlink_vport *vport,
         [OVS_VPORT_ATTR_OPTIONS] = { .type = NL_A_NESTED, .optional = true },
     };
 
+#ifdef __sun
+    VLOG_DBG("dpif_netlink_vport_from_ofpbuf");
+#endif
+
     dpif_netlink_vport_init(vport);
 
     struct ofpbuf b = ofpbuf_const_initializer(buf->data, buf->size);
@@ -2803,7 +3286,12 @@ dpif_netlink_flow_from_ofpbuf(struct dpif_netlink_flow *flow,
 
         ufid = nl_attr_get_unspec(a[OVS_FLOW_ATTR_UFID],
                                   nl_attr_get_size(a[OVS_FLOW_ATTR_UFID]));
+#ifdef __sun
+	/* Fixes sparc alignment issue */
+	bcopy(ufid, &(flow->ufid), sizeof (ovs_u128));
+#else
         flow->ufid = *ufid;
+#endif /* __sun */
         flow->ufid_present = true;
     }
     if (a[OVS_FLOW_ATTR_MASK]) {
diff --git a/lib/dpif.c b/lib/dpif.c
index 53958c559..2673fb36a 100644
--- a/lib/dpif.c
+++ b/lib/dpif.c
@@ -65,7 +65,7 @@ COVERAGE_DEFINE(dpif_purge);
 COVERAGE_DEFINE(dpif_execute_with_help);
 
 static const struct dpif_class *base_dpif_classes[] = {
-#if defined(__linux__) || defined(_WIN32)
+#if defined(__linux__) || defined(_WIN32) || defined(__sun)
     &dpif_netlink_class,
 #endif
     &dpif_netdev_class,
diff --git a/ofproto/ofproto-dpif.c b/ofproto/ofproto-dpif.c
index a86dd3f78..6e5742f50 100644
--- a/ofproto/ofproto-dpif.c
+++ b/ofproto/ofproto-dpif.c
@@ -828,6 +828,15 @@ close_dpif_backer(struct dpif_backer *backer)
     shash_find_and_delete(&all_dpif_backers, backer->type);
     free(backer->type);
     free(backer->dp_version_string);
+#ifdef __sun
+    /*
+     * On Solaris, we want to destroy the datapath on a
+     * graceful shutdown. This change is needed until we
+     * have support for the "--cleanup" option in
+     * "ovs-appctl exit" command.
+     */
+    dpif_delete(backer->dpif);
+#endif
     dpif_close(backer->dpif);
     free(backer);
 }
@@ -1153,6 +1162,7 @@ check_max_mpls_depth(struct dpif_backer *backer)
     return n;
 }
 
+#ifndef __sun
 /* Tests whether 'backer''s datapath supports masked data in
  * OVS_ACTION_ATTR_SET actions.  We need to disable some features on older
  * datapaths that don't support this feature. */
@@ -1206,6 +1216,7 @@ check_masked_set_action(struct dpif_backer *backer)
     }
     return !error;
 }
+#endif
 
 /* Tests whether 'backer''s datapath supports truncation of a packet in
  * OVS_ACTION_ATTR_TRUNC.  We need to disable some features on older
@@ -1314,7 +1325,17 @@ check_support(struct dpif_backer *backer)
 
     backer->support.odp.recirc = check_recirc(backer);
     backer->support.odp.max_mpls_depth = check_max_mpls_depth(backer);
+
+   /* 
+    * Temporarily set this to false for Solaris since even though Solaris
+    * doesn't support masked set, the flow used to probe this feature
+    * succeeds on Solaris. Once that is fixed, remove this.
+    */
+#ifdef __sun
+    backer->support.masked_set_action = false;
+#else
     backer->support.masked_set_action = check_masked_set_action(backer);
+#endif
     backer->support.trunc = check_trunc_action(backer);
     backer->support.ufid = check_ufid(backer);
     backer->support.tnl_push_pop = dpif_supports_tnl_push_pop(backer->dpif);
@@ -1827,14 +1848,36 @@ port_destruct(struct ofport *port_, bool del)
     const char *devname = netdev_get_name(port->up.netdev);
     char namebuf[NETDEV_VPORT_NAME_BUFSIZE];
     const char *dp_port_name;
+#ifdef __sun
+    char vnicname[MAXLINKNAMELEN];
+#endif
 
     ofproto->backer->need_revalidate = REV_RECONFIGURE;
     xlate_txn_start();
     xlate_ofport_remove(port);
     xlate_txn_commit();
 
+#ifdef __sun
+    /*
+     * We need to do the naming conversion for bridge vnic here since
+     * netdev_remove() was called before coming here. So dpif cannot find
+     * the netdev from the port name and thus cannot do the conversion there.
+     * This is not ideal and we should be careful about this change when
+     * bringing in future code.
+     */
+    if (!strcmp(netdev_get_type(port->up.netdev), "internal")) {
+        dp_port_name = netdev_get_name(port->up.netdev);
+        strlcpy(vnicname, dp_port_name, sizeof (dp_port_name));
+        strlcat(vnicname, "_0", MAXLINKNAMELEN);
+        dp_port_name = vnicname;
+    } else {
+        dp_port_name = netdev_vport_get_dpif_port(port->up.netdev, namebuf,
+                                                  sizeof namebuf);
+    }
+#else
     dp_port_name = netdev_vport_get_dpif_port(port->up.netdev, namebuf,
                                               sizeof namebuf);
+#endif
     if (del && dpif_port_exists(ofproto->backer->dpif, dp_port_name)) {
         /* The underlying device is still there, so delete it.  This
          * happens when the ofproto is being destroyed, since the caller
diff --git a/ofproto/ofproto-dpif-ipfix.c b/ofproto/ofproto-dpif-ipfix.c
index abea49249..8f2afa90e 100644
--- a/ofproto/ofproto-dpif-ipfix.c
+++ b/ofproto/ofproto-dpif-ipfix.c
@@ -317,10 +317,18 @@ BUILD_ASSERT_DECL(sizeof(struct ipfix_data_record_flow_key_icmp) == 2);
 static uint8_t tunnel_protocol[NUM_DPIF_IPFIX_TUNNEL] = {
     0,              /* reserved */
     IPPROTO_UDP,    /* DPIF_IPFIX_TUNNEL_VXLAN */
+#ifdef __sun
+    0,              /* DPIF_IPFIX_TUNNEL_GRE */
+#else
     IPPROTO_GRE,    /* DPIF_IPFIX_TUNNEL_GRE */
+#endif
     IPPROTO_UDP,    /* DPIF_IPFIX_TUNNEL_LISP*/
     IPPROTO_TCP,    /* DPIF_IPFIX_TUNNEL_STT*/
+#ifdef __sun
+    0,              /* DPIF_IPFIX_TUNNEL_IPSEC_GRE */
+#else
     IPPROTO_GRE,    /* DPIF_IPFIX_TUNNEL_IPSEC_GRE */
+#endif
     0          ,    /* reserved */
     IPPROTO_UDP,    /* DPIF_IPFIX_TUNNEL_GENEVE*/
 };
diff --git a/ofproto/ofproto-dpif-sflow.c b/ofproto/ofproto-dpif-sflow.c
index c3234ee4a..64a55c97a 100644
--- a/ofproto/ofproto-dpif-sflow.c
+++ b/ofproto/ofproto-dpif-sflow.c
@@ -46,6 +46,13 @@
 
 VLOG_DEFINE_THIS_MODULE(sflow);
 
+#ifdef __sun
+#ifdef IFNAMSIZ
+#undef IFNAMSIZ
+#define IFNAMSIZ MAXLINKNAMESPECIFIER
+#endif
+#endif
+
 static struct ovs_mutex mutex;
 
 /* This global var is used to determine which sFlow
@@ -603,11 +610,15 @@ dpif_sflow_tunnel_proto(enum dpif_sflow_tunnel_type tunnel_type)
     switch(tunnel_type) {
 
     case DPIF_SFLOW_TUNNEL_GRE:
+#ifndef __sun
         ipproto = IPPROTO_GRE;
+#endif /* !__sun */
         break;
 
     case DPIF_SFLOW_TUNNEL_IPSEC_GRE:
+#ifndef __sun
         ipproto = IPPROTO_ESP;
+#endif /* !__sun */
         break;
 
     case DPIF_SFLOW_TUNNEL_VXLAN:
