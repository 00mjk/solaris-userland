# Developed in house: Solaris specific
# Use EVP API instead of low level SHA API
--- a/apps/speed.c	2016-09-26 02:49:07.000000000 -0700
+++ b/apps/speed.c	2016-10-25 11:26:37.455939170 -0700
@@ -1640,7 +1640,8 @@
             print_message(names[D_SHA256], c[D_SHA256][j], lengths[j]);
             Time_F(START);
             for (count = 0, run = 1; COND(c[D_SHA256][j]); count++)
-                SHA256(buf, lengths[j], sha256);
+                EVP_Digest(buf, (unsigned long)lengths[j], sha256, NULL,
+                           EVP_sha256(), NULL);
             d = Time_F(STOP);
             print_result(D_SHA256, j, count, d);
         }
@@ -1653,7 +1654,8 @@
             print_message(names[D_SHA512], c[D_SHA512][j], lengths[j]);
             Time_F(START);
             for (count = 0, run = 1; COND(c[D_SHA512][j]); count++)
-                SHA512(buf, lengths[j], sha512);
+                EVP_Digest(buf, (unsigned long)lengths[j], sha512, NULL,
+                           EVP_sha512(), NULL);
             d = Time_F(STOP);
             print_result(D_SHA512, j, count, d);
         }
--- a/crypto/Makefile		2017-05-25 05:54:34.000000000 -0700
+++ b/crypto/Makefile.new	2017-10-26 11:38:09.600396030 -0700
@@ -36,9 +36,9 @@
 LIB= $(TOP)/libcrypto.a
 SHARED_LIB= libcrypto$(SHLIB_EXT)
 LIBSRC=	cryptlib.c mem.c mem_clr.c mem_dbg.c cversion.c ex_data.c cpt_err.c \
-	ebcdic.c uid.c o_time.c o_str.c o_dir.c o_fips.c o_init.c fips_ers.c
+ebcdic.c uid.c o_time.c o_str.c o_dir.c fips_ers.c
 LIBOBJ= cryptlib.o mem.o mem_dbg.o cversion.o ex_data.o cpt_err.o ebcdic.o \
-	uid.o o_time.o o_str.o o_dir.o o_fips.o o_init.o fips_ers.o $(CPUID_OBJ)
+	uid.o o_time.o o_str.o o_dir.o fips_ers.o $(CPUID_OBJ)
 
 SRC= $(LIBSRC)
 
